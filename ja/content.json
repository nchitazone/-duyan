{"meta":{"title":"プログラミング学習　初心者向け入門ガイド","subtitle":"プログラミング学習　初心者向け入門ガイド","description":"Laptrinhcanban.com - A beginner's guide to learning programming. Website is the experience learning programming in Japan by former international student Kiyoshi.","author":"Kiyoshi","url":"https://laptrinhcanban.com","root":"/ja/"},"pages":[{"title":"Cửa sổ luyện tập online ngôn ngữ lập trình JAVA","date":"2020-02-29T15:25:40.000Z","updated":"2021-07-21T13:45:58.078Z","comments":true,"path":"online_window/java.html","permalink":"https://laptrinhcanban.com/online_window/java","excerpt":"","text":"window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-109496342-3'); Homepage Contact Chạy Code Java Online - Online Java Compiler - Online Java editor irst step: Enter code to run&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Second step: Click Run or press Ctrl+Enter (adsbygoogle = window.adsbygoogle || []).push({}); (adsbygoogle = window.adsbygoogle || []).push({}); #up { font-family: Helvetica; text-align: center; } #up p{ color: brown; } #main{ width: 100%; display: table; table-layout: fixed; } .ad{ width:300px; margin: 0px 20px 0px; display: table-cell; } #foo{ margin: 0px 20px 0px; display: table-cell; vertical-align: middle; } .link_404{ color: #fff!important; padding: 10px 20px; background: #39ac31; display: inline-block; border-radius: 10px; }"},{"title":"Cửa sổ luyện tập online ngôn ngữ lập trình JavaScript","date":"2020-02-29T15:25:40.000Z","updated":"2021-07-21T13:47:22.808Z","comments":true,"path":"online_window/javascript.html","permalink":"https://laptrinhcanban.com/online_window/javascript","excerpt":"","text":"window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-109496342-3'); Homepage Contact Chạy Code JavaScript Online - Online JavaScript Compiler - Online JavaScript editor irst step: Enter code to run&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Second step: Click Run or press Ctrl+Enter (adsbygoogle = window.adsbygoogle || []).push({}); (adsbygoogle = window.adsbygoogle || []).push({}); #up { font-family: Helvetica; text-align: center; } #up p{ color: brown; } #main{ width: 100%; display: table; table-layout: fixed; } .ad{ width:300px; margin: 0px 20px 0px; display: table-cell; } #foo{ margin: 0px 20px 0px; display: table-cell; vertical-align: middle; } .link_404{ color: #fff!important; padding: 10px 20px; background: #39ac31; display: inline-block; border-radius: 10px; }"},{"title":"Cửa sổ luyện tập online ngôn ngữ lập trình PHP","date":"2020-02-29T15:25:40.000Z","updated":"2021-07-21T13:46:24.063Z","comments":true,"path":"online_window/php.html","permalink":"https://laptrinhcanban.com/online_window/php","excerpt":"","text":"window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-109496342-3'); Homepage Contact Chạy Code PHP Online - Online PHP Compiler - Online PHP editor irst step: Enter code to run&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Second step: Click Run or press Ctrl+Enter (adsbygoogle = window.adsbygoogle || []).push({}); (adsbygoogle = window.adsbygoogle || []).push({}); #up { font-family: Helvetica; text-align: center; } #up p{ color: brown; } #main{ width: 100%; display: table; table-layout: fixed; } .ad{ width:300px; margin: 0px 20px 0px; display: table-cell; } #foo{ margin: 0px 20px 0px; display: table-cell; vertical-align: middle; } .link_404{ color: #fff!important; padding: 10px 20px; background: #39ac31; display: inline-block; border-radius: 10px; }"},{"title":"Cửa sổ luyện tập online ngôn ngữ lập trình python","date":"2020-02-29T15:25:40.000Z","updated":"2021-07-21T13:47:02.290Z","comments":true,"path":"online_window/python.html","permalink":"https://laptrinhcanban.com/online_window/python","excerpt":"","text":"window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-109496342-3'); Homepage Contact Chạy Code Python Online - Online Python Compiler - Online Python editor irst step: Enter code to run&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Second step: Click Run or press Ctrl+Enter (adsbygoogle = window.adsbygoogle || []).push({}); (adsbygoogle = window.adsbygoogle || []).push({}); #up { font-family: Helvetica; text-align: center; } #up p{ color: brown; } #main{ width: 100%; display: table; table-layout: fixed; } .ad{ width:300px; margin: 0px 20px 0px; display: table-cell; } #foo{ margin: 0px 20px 0px; display: table-cell; vertical-align: middle; } .link_404{ color: #fff!important; padding: 10px 20px; background: #39ac31; display: inline-block; border-radius: 10px; }"},{"title":"06. Pythonの変数","date":"2021-03-01T10:20:40.000Z","updated":"2022-11-15T15:33:43.788Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/bien-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/bien-trong-python/","excerpt":"","text":"Python で変数を使用するためのガイド。このコースでは、Python の変数の概念と、Python で変数を使用する方法を学習します。 Pythonの変数とは Python で変数を宣言する Pythonで変数を割り当てる Python で変数をインポートする Pythonで変数を削除する To be continued…"},{"title":"02. Pythonをインストール","date":"2020-03-01T01:25:40.000Z","updated":"2022-11-16T10:44:13.078Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/cai-dat-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/cai-dat-python/","excerpt":"","text":"Pythonのインストールと環境構築を行いましょう。 古典的な方法 WindowsにPythonをインストール Pythonの環境変数PATHを設定する AnacondaでPythonをインストールする Anacondaインストール手順（Windows・Mac用） Ubuntuにanacondaをインストール"},{"title":"15. PythonのDatetime","date":"2021-03-01T10:20:40.000Z","updated":"2022-11-17T11:03:54.644Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/datetime-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/datetime-trong-python/","excerpt":"","text":"Python で datetime モジュールを使用するための手順。このコースでは、Python の datetime の概念と、Python で datetime を使用する方法を学びます。 Python Datetime モジュールを使用 Pythonで現在の日付と時刻を取得 (now,time,timetz)New! Pythonで日付と時刻を取得する Pythonで日時を文字列に変換する Pythonで文字列を日時に変換する Pythonで日付を加算および減算し、時間を比較する Python ランタイムの計算New! Pythonでストップウォッチを作成New!"},{"title":"17. PythonでのCSV・EXCEL","date":"2020-03-01T01:25:40.000Z","updated":"2022-11-17T11:00:40.676Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/","excerpt":"","text":"PythonでのCSV・EXCEL・JSON・XML・PDFなどのファイル形式の扱いは非常に重要ですので、しっかりと使いこなすとプログラミングが早くなり、事務作業の効率化にもつながります。 このトピックでは、これらのファイル形式の処理方法を一緒に学びましょう。 PythonでCSVファイルを処理する Pythonでcsvファイルを読み込むNew! Pythonでcsvファイルを書き込むNew! PythonでCSVファイルにデータログを残すNew! PythonでExcelファイルを処理する PythonでExcelファイルを読み込むNew! PythonでExcelファイルにデータを書き込むNew! To be continued…"},{"title":"18. Pythonのexe化","date":"2021-06-15T12:25:40.000Z","updated":"2022-11-17T11:04:50.690Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/","excerpt":"","text":"作成した pythonプログラムをマシンで実行するだけであれば、python プログラムをパッケージ化する必要はありません。ただし、このプログラムを第三者に渡して使用する必要がある場合や、別のコンピュータで使用したい場合など、使用するための python 環境をインストールして準備するのは非常に面倒です。 労力を節約し、上記の複雑な作業のほとんどを取り除くには、python ファイルを exe に変換し、python プログラムを別の環境で実行できるスタンドアロン プログラムにパッケージ化する必要があります。 そして、このセクションでは、Pythonプログラムをexe化・パッケージ化する一般的な方法の使用方法と長所と短所を順番に学びましょう。 Pyinstaller を使用して Python プログラムをexe化するNew! Python プログラムをexe化する(cx_Freeze)New! SubprocessによるPythonから別のコマンドまたはアプリケーションを呼び出すNew! To be continued…"},{"title":"01.Pythonの紹介","date":"2020-03-01T01:25:40.000Z","updated":"2022-11-15T15:34:56.404Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/gioi-thieu-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/gioi-thieu-python/","excerpt":"","text":"Python言語とは何のものだ？Pythonを学ぶ必要があるのか？このトピックでは、Pythonの概要を学びましょう。 Pythonとは。Pythonプログラミング言語の特徴 Pythonを学ぶべきか。Pythonで何ができるか。 Zen of Python"},{"title":"14. Pythonの関数","date":"2021-02-25T01:25:40.000Z","updated":"2022-11-17T11:07:11.857Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/ham-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/ham-trong-python/","excerpt":"","text":"Pythonでの関数の使用方法について詳しく説明します。 Python の関数の概念、Pythonで関数を呼び出す方法、Pythonで独自の関数を作成する方法、および組み込み関数の使用方法を一緒に学習しましょう。 Python の関数とはNew! Python defで関数を定義・宣言New! Python returnで戻り値を返すNew! Hàm tích hợp sẵn trong Python Python の str() 関数 Python の int() 関数 Python の float() 関数 Python の len() 関数 Python の range() 関数 To be continued…"},{"title":"11. PythonのDictionary","date":"2021-03-01T10:20:40.000Z","updated":"2022-11-16T11:41:04.017Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/dictionary-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/dictionary-trong-python/","excerpt":"","text":"Hướng dẫn sử dụng dictionary trong Python. Bạn sẽ học được khái niệm dictionary trong Python cũng như cách sử dụng dictionary trong python trong chuyên đề này. Dictionary trong python là gì Tạo dictionary trong python Chỉ định khóa và lấy giá trị trong dictionary python Lấy toàn bộ giá trị trong dictionary python Thêm phần tử vào dictionary python Thay đổi giá trị trong dictionary python Đếm số phần tử trong dictionary python Kiểm tra key hoặc value có tồn tại trong dictionary python hay không Sắp xếp dictionary python Xóa phần tử trong dictionary python"},{"title":"03. Pythonの基礎知識","date":"2020-03-01T01:25:40.000Z","updated":"2022-11-15T15:35:01.917Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/","excerpt":"","text":"Pythonプログラミングの基本をマスターすると、手間をかけずにすばやくプログラミングできます。このトピックではPythonプログラミングの基本について学びましょう。 Python対話モードの使用方法 Pythonプログラムの作成、保存と実行する方法 Pythonを直接実行する4つの方法 Pythonのコメントの書き方 Pythonにおけるインデント Pythonでの改行方法 Pythonファイルで使用する文字コードの設定"},{"title":"05. Pythonの数字","date":"2020-03-01T01:25:40.000Z","updated":"2022-11-15T15:35:16.696Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/","excerpt":"","text":"Pythonで数値を処理することは非常に重要であるため、それを習得して適切に処理すれば、手間をかけずにすばやくプログラミングするのに役立ちます。 このトピックを通じて、Pythonで数値データ型の演算と操作などを学びましょう。 Pythonの数値型 Pythonの算術演算子 Pythonのビット演算子 To be continued…"},{"title":"10. Pythonのリスト","date":"2020-12-03T03:06:46.000Z","updated":"2022-11-17T11:27:47.281Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/","excerpt":"","text":"リストpythonは要素が順番に並んだデータ型で、宣言後に値を変更することができます。リスト内の各要素には、リスト内に独自のインデックスと値があります。リスト内のその要素のインデックスを介してその中の要素にアクセスし、その要素の値を変更または削除することができます。次のレッスンを通して、Kiyoshi と List python について学びましょう。 宣言 Python でリストを作成する Python リストの要素数を数える Python List の長さを計算 (len) PythonのインデックスとリストPythonの要素にアクセスする方法 Python の List() 関数と iterable からリストを作成する方法 Python でのリスト内包表記の使用 挿入・追加 リストに要素を追加し、Pythonでリストを結合する(append, extend, slice) Python リストに要素を挿入する(insert, slice) 切り・消す Pythonでリストをスライス Python リストの要素を削除 (del, pop, remove, clear)New! 検索・置換 Python リストの要素値を変更する Python リストの最大値または最小値を取得New! キャスト Python で文字列をリストに変換するNew! 並べ替え・比較 Python リストの要素を並べ替える Python リストを逆にする (reverse, reversed)New! Pythonで2つのリストを比較し、同じ要素と異なる要素を取得New! リストの重複要素 Python リストの重複要素を削除New! Python リストの重複要素をチェックして取得New! メソッド一覧 PythonのappendメソッドNew! PythonのextendメソッドNew!"},{"title":"13. Set trong Python","date":"2021-03-01T10:20:40.000Z","updated":"2021-07-30T16:13:55.123Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/set-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/set-trong-python/","excerpt":"","text":"Hướng dẫn sử dụng set trong Python. Bạn sẽ học được khái niệm set trong Python cũng như cách sử dụng set trong python trong chuyên đề này. Set trong python là gì Tạo set trong python Đếm số phần tử trong set python Thêm phần tử trong set python Xóa phần tử trong set python Tìm phần tử trong set python Phép toán tập hợp trong set python So sánh set trong python Hàm set() trong python và cách tạo set từ iterableNew!"},{"title":"04. Pythonの標準入出力","date":"2020-03-01T01:25:40.000Z","updated":"2022-11-15T15:35:11.859Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/","excerpt":"","text":"Python でのインポートとエクスポートは、データを Python に入れ、処理結果を画面に表示するプロセスです。これらは非常に基本的ですが、Python 学習者にとって非常に重要な操作であり、このトピックを学習すれば完全に習得できます。 Pythonの標準入力 Pythonのprint関数によるデータ出力 New! Pythonで文字列とリストの入力 New! Pythonで数字を入力 New! Pythonの標準出力 Pythonのprint関数によるデータ出力 New! Pythonで文字列や数値、リスト、タプル、辞書などを出力 New! Pythonのpprintでリストや辞書をスマートに美しく出力する New!"},{"title":"09. Chuỗi trong python","date":"2020-11-29T11:48:28.000Z","updated":"2021-10-21T13:08:51.207Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/thao-tac-voi-chuoi-string-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/thao-tac-voi-chuoi-string-trong-python/","excerpt":"","text":"Việc xử lý chuỗi trong python rất quan trọng, vì thế nếu bạn nắm vững và xử lý nhuần nhuyễn thì sẽ giúp bạn lập trình thật nhanh mà chẳng tốn công sức. Hãy cùng Kiyoshi tìm hiểu căn bản về chuỗi trong python cũng như các thao tác với chuỗi tring trong python trong chuyên đề này nhé. Khai báo chuỗi Khai báo chuỗi trong python Độ dài chuỗi trong python Nối và lặp Nối chuỗi và lặp chuỗi trong python Nối chuỗi trong python bằng phương thức join Cắt tách xoá Cách cắt chuỗi trong python Tách chuỗi trong python Tách số trong chuỗi pythonNew! Xóa ký tự trong chuỗi python Tìm kiếm và thay thế Tìm ký tự trong chuỗi python Lấy ký tự trong chuỗi python Thay thế ký tự trong chuỗi python Đếm số lần xuất hiện của ký tự trong chuỗi python Kiểm tra chuỗi Kiểm tra chuỗi có phải là chữ hay không trong python Kiểm tra chuỗi có phải là số hay không trong python Ép kiểu chuỗi Chuyển số thành chuỗi trong python Chuyển list thành string trong PythonNew! Chữ hoa chữ thường Kiểm tra chữ hoa chữ thường trong python Chuyển chữ hoa thành chữ thường và ngược lại trong python Căn lề trong python So sánh và Sắp xếp Đảo ngược chuỗi trong pythonNew! So sánh chuỗi trong pythonNew! Ký tự đặc biệt Ký tự đặc biệt trong python (escape sequence) Loại bỏ ký tự đặc biệt trong chuỗi PythonNew! Cách sử dụng chuỗi thô raw string trong python Định dạng chuỗi Định dạng chuỗi trong python bằng toán tử định dạng Định dạng chuỗi trong python bằng chuỗi f Định dạng chuỗi trong python bằng phương thức format Các phương thức xử lý chuỗi python Ljust() trong Python Center() trong Python Rjust() trong Python Zfill() trong Python Lower() trong Python Upper() trong Python Capitalize() trong Python Swapcase() trong Python Title() trong Python Join() trong Python"},{"title":"07. Pythonの条件分岐","date":"2021-03-01T10:20:40.000Z","updated":"2022-11-17T11:16:50.939Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/","excerpt":"","text":"Python で条件分岐を使用するための手順。Python の条件文は単純ですが、Python プログラムを扱う上で非常に重要な役割を果たします。このトピックを通じて、条件文の使用方法をマスターし、Python でのコーディングを改善しましょう。 Pythonのif文と1つ以上の条件分岐 Python でのインデント Python 比較演算子と文字列、数値、およびリストの比較 Python の論理演算子と True False値 Pythonの三項演算子と条件文を短くする方法 To be continued…"},{"title":"12. Tuple trong Python","date":"2021-03-01T10:20:40.000Z","updated":"2021-06-29T13:55:14.756Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/tuple-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/tuple-trong-python/","excerpt":"","text":"Hướng dẫn sử dụng tuple trong Python. Bạn sẽ học được khái niệm tuple trong Python cũng như cách sử dụng tuple trong python trong chuyên đề này. Tuple trong python là gì Tạo tuple trong python Hàm tuple() trong python và cách tạo tuple từ iterable Thêm phần tử vào Tuple trong Python Lấy phần tử trong tuple python Đếm số phần tử trong tuple python Kiểm tra phần tử trong tuple python Sắp xếp tuple trong python"},{"title":"08. Vòng lặp trong Python","date":"2021-03-01T10:20:40.000Z","updated":"2021-07-12T21:14:23.565Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/vong-lap-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/vong-lap-trong-python/","excerpt":"","text":"Hướng dẫn sử dụng vòng lặp trong Python. Vòng lặp trong Python tuy đơn giản nhưng có vai trò vô cùng quan trọng khi xử lý chương trình python. Bạn sẽ học được cách sử dụng các lệnh lặp trong python như câu lệnh for, câu lệnh while, câu lệnh while True v.v.. và nâng cao khả năng code trong python thông qua chuyên đề này. For trong python và vòng lặp với số lần cụ thể While trong python và vòng lặp không giới hạn số lần Vòng lặp vô hạn trong python Break trong python và cách thoát khỏi vòng lặp Continue trong python và cách bỏ qua vòng lặp Vòng lặp for range trong Python (For in range python) Vòng lặp while True trong Python và ứng dụng cụ thể Pass trong python và cách sử dụng chi tiết New! To be continued…"},{"title":"16. Xử lý file trong Python","date":"2021-05-08T10:20:40.000Z","updated":"2021-09-30T15:07:15.207Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/xu-ly-file-trong-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/xu-ly-file-trong-python/","excerpt":"","text":"Hướng dẫn cách làm việc với file và thư mục trong python. Bạn sẽ học được các cách xử lý file và thư mục trong python với các hướng dẫn đơn giản, đầy đủ và chi tiết sau bài học này. Đọc và ghi file trong python Mở và đóng file trong python (open, with, close) Đọc file trong python Ghi file trong python Thao tác với file trong python Tạo file trong pythonNew! Tạo và lưu file trong thư mục mới bằng python Đổi tên file trong pythonNew! Copy file trong pythonNew! Xóa file trong pythonNew! Di chuyển file trong pythonNew! Lấy thông tin file trong pythonNew! Lấy tên file, thư mục và đuôi file trong pythonNew! Thao tác với thư mục trong python Tạo thư mục trong pythonNew! Đổi tên thư mục trong pythonNew! Kiểm tra tồn tại của file và thư mục trong pythonNew! Xóa thư mục trong pythonNew! Lấy danh sách tên file và thư mục trong pythonNew! Lấy danh sách tên file và thư mục theo điều kiện trong pythonNew! Lấy kích thước file và thư mục trong pythonNew! Thao tác với đường dẫn trong python Nối đường dẫn trong pythonNew!"},{"title":"初心者向けのPython学習","date":"2020-03-01T01:25:40.000Z","updated":"2022-11-15T15:09:50.812Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/index.html","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/","excerpt":"","text":"特集テーマ：Python基礎 初心者向けのPythonプログラミングは初心者向けのPythonプログラミングの知識を中心に説明されます。Pythonを最も効果的に学習できるようになるため、各記事ではPythonの基礎知識を詳細且つ明確に説明し、演習問題なども掲載しています。 Python基礎 初心者向けのPythonプログラミングPythonは優れたプログラミング言語であり、理解しやすい単純な文法構文を備えていますが、非常に短い行数で多くのタスクを実行できます。その利点により、Pythonはすぐにプログラマーに愛され、現在、Pythonは世界で最も人気のある言語になり、日本でも徐々に開発されています。 あらゆる年齢の初心者のためのPythonプログラミングを学ぶニーズに応え、特集テーマ：Python基礎 初心者向けのPythonプログラミングが誕生しました。 このトピックは、Laptrinhcanban.com - プログラミング基礎 初心者向けのプログラミング学習のサイトの一部です。サイトの内容は、現在東京でキャリアを積んでいる元留学生であるKiyoshiのプログラミング学習の経験です。 記事は常に更新されるため、後で検索できるように、ブックマークをブラウザに保存してください。独学の基本的なPythonプログラミング（初心者向けのPythonプログラミング）について質問がある場合、または質問がある場合は、Kiyoshiまで問い合わせてください。 Pythonの紹介 Pythonをインストールする Pythonの標準入力・出力 Pythonの基本的な知識 Pythonでの数字 Pythonの紹介 Pythonとは。Pythonプログラミング言語の特徴 Pythonを学ぶべきか。Pythonで何ができるか。 Zen of Python Pythonをインストールする 古典的な方法 WindowsにPythonをインストール Pythonの環境変数PATHを設定する AnacondaでPythonをインストールする Anacondaインストール手順（Windows・Mac用） Ubuntuにanacondaをインストール Pythonの基礎知識 Python対話モードの使用方法 Pythonプログラムの作成、保存と実行する方法 Pythonを直接実行する4つの方法 Pythonのコメントの書き方 Pythonにおけるインデント Pythonでの改行方法 Pythonファイルで使用する文字コードの設定 Pythonの標準入力・出力 Pythonの標準入力 Pythonのprint関数によるデータ出力 Pythonで文字列とリストの入力 Pythonで数字を入力 Pythonの標準出力 Pythonのprint関数によるデータ出力 Pythonで文字列や数値、リスト、タプル、辞書などを出力 Pythonのpprintでリストや辞書をスマートに美しく出力する Pythonでの数字 Pythonの数値型 Pythonの算術演算子 Pythonのビット演算子 おわりプログラミングのキャリアを追求するかどうか疑問を思っていますか？プログラミングを学びたいが、どこから始めればいいのかわからない？あなたはプログラマーで、新しい言語を学び始めたいですか？それなら確かにPythonプログラミング言語はあなたにぴったりです。習得しやすく、理解しやすい文法構造を備えていますが、生活の多くの分野に広く適用できるPythonは、学習を開始するために選択する必要のある最初のプログラミング言語です。 特にプログラミングの仕事を探している人にとっては、Pythonも非常に良い選択です。日本でPythonを知っているプログラマーの需要は非常に大きく、Webプログラミングや作業自動化、AI開発、自動運転など様々な分野で活躍できます。 この特集テーマ：Python基礎 初心者向けのPythonプログラミングを完了すると、プログラム基礎知識を得られ、他のプログラミング言語を学ぶ時にも役立ちます。 さらに、Python言語でいくつかの簡単なツールを開発したら、画像処理、データ並べ替え、大量のExcelファイル処理などのタスクを自動化することもできます。AIプログラミングに興味のある方は、SSD、VGG16、YOLO3などのCNN（畳み込みニューラルネットワーク-畳み込みニューラルネットワーク）を使用した有名なモデルを使用して、画像認識（画像識別） AIプログラミングについても学習が出来ると思います。 Pythonを習得した後は、多くの興味深いことを行いますが、最初に、ここでPythonプログラミングの基礎知識を習得してください。 特集テーマ：Python基礎 初心者向けのPythonプログラミングは、Kiyoshiによって継続的に更新されます。 Python言語の学習からIT業界へ歩みましょう！"}],"posts":[{"title":"Python defで関数を定義・宣言","slug":"python/nhap-mon-lap-trinh-python/ham-trong-python/ham-def-trong-python","date":"2022-11-17T05:14:51.000Z","updated":"2022-11-17T11:51:47.459Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/ham-trong-python/ham-def-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/ham-trong-python/ham-def-trong-python/","excerpt":"Pythonのdefを使用する方法そ説明します。このレッスンの後、def を使用して python で関数を宣言する方法と、宣言された関数を呼び出す方法を学習します。","text":"Pythonのdefを使用する方法そ説明します。このレッスンの後、def を使用して python で関数を宣言する方法と、宣言された関数を呼び出す方法を学習します。 PythonのdefとはPython の def は、関数を定義するために使用されるキーワードです。Python で関数を宣言するときに def を使用します。 Python の関数の記事では、Pythonには 3 種類の関数があることが分かります。この中には、プログラムで使用する独自の関数を作成できる関数の種類、つまりユーザー定義の Python 関数があります。 ユーザー定義の Python 関数を使用する場合は、最初に次のようにPythonのdef を使用して関数を宣言する必要があります。 def 関数名 (パラメーター1, パラメーター2, ...) :&nbsp;&nbsp;&nbsp;&nbsp;関数内のステートメント 1&nbsp;&nbsp;&nbsp;&nbsp;関数内のステートメント 2&nbsp;&nbsp;&nbsp;&nbsp;... &nbsp;&nbsp;&nbsp;&nbsp;return value そこで： def:Pythonで関数を宣言するために使用されるキーワード 関数名:関数名を表すために使用される文字列です。 パラメーター:関数宣言で使用される変数であり、関数を使用するときにパラメーターを入力するため return:関数から戻り値のvalueを返すために使用されるキーワード 例えば、def を使用して、2 つの数値を合計し、プログラムで結果を返す関数を次のように作成します。 Copydef add(a, b): x = a + b return x 尚、関数が外部から渡された値を受け取る必要がない場合は、次のように Python で関数を宣言するときにパラメーターを省略することもできます。 def 関数名() :&nbsp;&nbsp;&nbsp;&nbsp;関数内のステートメント 1&nbsp;&nbsp;&nbsp;&nbsp;関数内のステートメント 2&nbsp;&nbsp;&nbsp;&nbsp;… &nbsp;&nbsp;&nbsp;&nbsp;return value 次の例のように、関数を宣言するときにパラメーターを使用しません。 Copydef add(): x = 1 + 2 print(x) return x 最後に、returnは関数から値を返すためです。returnを含む関数は値を返す関数と呼ばれます。ただし、関数から返す値がない場合は、このキーワードを省略できます。例えば： Copydef hello(): print(&#x27;Hello&#x27;) Pythonで関数を呼び出すPythonで関数を宣言した後、次の構文で関数を呼び出すことにより、プログラムでその関数を何度も使用できます。 関数名 ( 引数1, 引数2,...) 関数名を書き、引数 (関数を呼び出すときに渡される値) を括弧()で囲み、カンマで区切ります。引数は、外側から値をパラメーターに渡すために使用されます。 たとえば、次のように Python で関数を宣言して呼び出します。 Copydef add(a, b): x = a + b return(x)add(1, 2)add(5, 6) 関数を宣言するために使用される変数をパラメーター(parameter)と呼び、関数を呼び出すときに渡される実際の値が引数(argument)であることに注意してください。 引数の値は、対応するパラメーターによって受け取られ、関数内で処理を実行します。関数内のパラメータが関数外から引数を受け取ることを、Pythonではパラメータの受け渡しと呼びます。Python のパラメーターと引数の詳細については、Pythonの関数の記事を参照してください。 python で関数を呼び出した後、関数の結果である値が返されます。関数からの戻り値は、次のように使用する変数に割り当てることができます。 Copydef add(a, b): x = a + b return(x)ketqua = add(1, 2)print(ketqua)#&gt; 3 宣言された関数にパラメーターが含まれていない場合、関数に引数を渡すこともできません。次に引数を省略して、Python で関数を呼び出します。 関数名() 例えば： Copydef hello(): print(&#x27;Hello&#x27;)hello()#&gt;&gt; Hello 尚、宣言された関数が python の戻り値関数でない場合、つまり関数内に return キーワードが含まれていない場合、デフォルトで値Noneが返されます。例えば： Copydef sample(): x = 1 + 2a = sample()print(a)#&gt; None pythonで関数を呼び出すときの最後の注意として、宣言されていない関数を呼び出すと、次の NameError が発生します。 Copysample2()&gt;&gt;Traceback (most recent call last):&gt;&gt; File &quot;Main.py&quot;, line 1, in &lt;module&gt;&gt;&gt; sample2()&gt;&gt;NameError: name &#x27;sample2&#x27; is not defined まとめ上記 Kiyoshi は、 python で def を使用して関数を宣言する方法と、 python で関数を呼び出す方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"Ham-trong-python","permalink":"https://laptrinhcanban.com/tags/Ham-trong-python/"}]},{"title":"Python の関数とは","slug":"python/nhap-mon-lap-trinh-python/ham-trong-python/ham-trong-python-la-gi","date":"2022-11-17T05:13:51.000Z","updated":"2022-11-17T10:52:18.092Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/ham-trong-python/ham-trong-python-la-gi/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/ham-trong-python/ham-trong-python-la-gi/","excerpt":"Pythonの関数について学びましょう。Python の関数の概念、パラメータ、引数、戻り値などの基本コンポーネントを含む Python の関数の構造を 学習します。このレッスンの後、組み込みの python関数、python モジュール関数、およびユーザー定義の Python 関数を含むpython 関数についても学習します。","text":"Pythonの関数について学びましょう。Python の関数の概念、パラメータ、引数、戻り値などの基本コンポーネントを含む Python の関数の構造を 学習します。このレッスンの後、組み込みの python関数、python モジュール関数、およびユーザー定義の Python 関数を含むpython 関数についても学習します。 次のように、Python 関数で使用される 3 つのコンポーネントに注意する必要があります。 パラメーター (parameter) 引数(argument) 戻り値 また、次のように Python で 3 種類の関数をマスターする必要があります。 組み込み関数 モジュールの関数 ユーザー定義の関数 これらの事実を以下の清と一緒に明らかにしましょう。. Python の関数Pythonの関数とはPython の関数は、プログラムで特定の関数を実行するための一連の操作の固まりです。関数を使用すると、さまざまなハンドラーを 1 つに結合して名前を付けることができます。関数を作成して名前を付けたら、プログラムで使用する必要があるたびに関数名を呼び出すだけです。 再処理を 1 つの関数にまとめることで、ハンドラーを何度も書き直す必要がなくなり、コードを記述する際のエラーが減り、関数を別のプログラムで再利用できるようになります。 関数は値を取り、何らかの処理を経た値を返すことができるため、最小限のプログラム コードで最大の容量を生成できます。 Pythonの機能を使いこなすことは、プログラマーにとって必須のスキルと言っても過言ではありません。 Python の関数内のコンポーネントPython で関数について学習する場合、パラメーター、引数、および戻り値を含む関数の 3 つのコンポーネントを理解する必要があります。Python で関数を使用してコンポーネントを視覚化するために、次の単純な関数の例を見てみましょう。この関数は、次のようにプログラムで 2 つの数値を合計し、結果を返すのに役立ちます。 Copydef find_sum(a,b): sum = a + b return sum Python で def キーワードを使用して関数を宣言し、上記の find_sum 関数を宣言するときに使用するa および bという名前の変数をパラメーター(parameter)と呼びます。 関数を宣言した後、以下のように Python で関数を呼び出して使用できます。 Copytổng = find_sum(1,2)print(tổng)#&gt; 3 def 関数を使用して Python で関数を宣言する方法、および Python で関数を呼び出す方法の詳細については、Python での def の記事と関数を作成するための構文を参照してください。 python で関数を呼び出すときは、上記の例の 1 と 2 のような実数値を引数として渡し、関数内で計算します。関数に渡される実際の値を引数と呼び、計算のために実際の値を関数に渡すことをpythonではパラメータ渡しと呼びます。 関数の実行が完了すると、関数は値を返します。これをPython 関数の戻り値と呼びます。 以下のPythonでのパラメータ、引数、および戻り値について詳しく学びましょう。 Python のパラメータと引数パラメータとは| Parameterパラメーター (parameter) は、関数で処理するために渡された値 (引数) を受け取るために使用される名前付き変数です。python で関数を宣言するときにパラメーターが使用されます。 Python で関数を宣言するときは、上記の変数 a と b としてパラメーターを指定するだけです。ただし、Python マスターの場合、さまざまなケースでさまざまな種類のパラメーターを使用して、コードを美しくし、プログラムをよりスムーズに実行します。 python チュートリアル サイトPython Doccumentによると、 python には 5 種類のパラメーターがありますが、通常は次のように python で最大 4 種類のパラメーターを使用します。 位置 パラメータキーワード パラメータデフォルト パラメータカスタム パラメータ この記事の枠組みの中で、Kiyoshiはこの問題について深く議論することはしません. ただし、プロのように python でパラメーターを使用するのに役立つように、Kiyoshi は別の記事で説明したいと思います。 引数とは | Argument引数は、関数を呼び出すときに渡される 実際の値です。関数に渡された引数は、パラメーターに割り当てられ、 python で関数を呼び出すときに使用されます。 また、実際のメインの python チュートリアル サイトPython Doccumentによると、python には次の 2 種類の引数があります 位置 引数キーワード 引数 この記事の枠組みの中で、清はこの問題について深く議論することはしません. ただし、プロのように Python で引数を使用するのに役立つように、Kiyoshi は別の記事で説明したいと思います 引数とパラメータの違いKiyoshi は、この記事を読む前に、まだpython でパラメーターと引数を区別する方法を知らない人がたくさんいると確信しています。しかし、上記の分析を通して、python におけるパラメーターと引数の違いは理解できましたか? 引数とパラメータの違いをまとめましょう。 パラメーターは、関数宣言で使用される名前付き変数です。 関数の引数は、関数を呼び出すときに渡される実際の値です。 パラメーターは、関数の外部から渡された引数の値を受け取り、関数内で計算を実行します。 Python でパラメーターを渡すPython で関数を呼び出す場合、引数 (実際の値) をパラメーターを介して関数に渡します。パラメーターを介して関数に引数を渡すことは、 Pythonではパラメーターの受け渡しと呼ばれ、次のように表されます。 Pythonでの戻り値(return values)戻り値は、その名前が示すように、関数の実行が終了した後に関数が返す値です。 関数の戻り値は、数値、文字列、リスト、または関数宣言で指定されたその他のデータ型です。 ただし、値を返さない関数もあります。この時点で、デフォルトの戻り値はnone、nullまたはundefinedになります。 関数から値を返すには、 python で return ステートメントを使用する必要があります。詳細については、次の記事を参照してください。 参照: Python での戻り値と戻り値 Python の関数種類Python関数で使用される定義を知った後、ここではPythonの関数の種類を学びます. Python には、組み込みの Python関数、Python モジュールの関数、およびユーザー定義の Python 関数の 3 種類の関数があります。 組み込みの Python関数組み込みの Python関数はPythonのインストールする時にセットで付与された組み込み関数です。これらの関数は python プログラムで使用できるため、Python プログラムにインポートせずに直接使用できます。 たとえば、print()関数、int()関数、len()関数、range() 関数などpython で使用でき、次のようにプログラムで直接使用できます。 Copychuoi = &quot;初心者のための独学のpython&quot;print(len(chuoi))#&gt; 16 Python モジュールの関数Python モジュール内の関数は、Python モジュールにパッケージ化された関数です。Python モジュールの関数はプログラムに組み込まれていないため、関数を使用する前に、関数を含むモジュールをプログラムにインポートする必要があります。 たとえば、Python でファイルの名前を変更するために使用されるos.rename()関数や、Python でパスを結合するために使用されるos.path.join()関数のような Python のファイル処理関数は、すべて os モジュールの関数です。次のように、使用する前にこのモジュールをプログラムにインポートする必要があります。 Copyimport osfilepath = os.path.join(&quot;user&quot;,&quot;username.txt&quot;)print(filepath)#&gt; user/username.txt ユーザー定義の Python 関数ユーザー定義の Python 関数 (user-defined functions))は、プログラム内で宣言して自分で作成する関数です。関数を宣言した後、それらをプログラムで直接使用するか、自己作成モジュールにカプセル化し、必要に応じて他のプログラムで再利用できます。 Python のユーザー定義関数の大きな利点は、自由に関数をカスタマイズできることです。これは、関数が独自の作成、独自の設計、および独自のコントロールであるためです。 Python で関数を宣言する方法も非常に簡単です。defコマンドを使用して、関数名とその def ブロック内の関数の処理ステートメントを宣言します。たとえば、次のように 2 つの数値の合計を求める独自の関数を作成できます。 Copydef find_sum(a,b): sum = a + b return sum Python ユーザー定義関数の使用は、他の関数と同じです。関数を宣言した後、使用する必要があるときに関数名を呼び出すだけです。. Copyc = find_sum(1,2)print(c)#&gt; 3 def 関数を使用して Python で関数を宣言する方法、および Python で関数を呼び出す方法の詳細については、Python での defの記事を参照してください。 まとめ上記の Kiyoshi は、python の関数とも呼ばれるpython の関数について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 また、次のレッスンでは、Python で関数を宣言して呼び出す方法を引き続き学習しましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"Ham-trong-python","permalink":"https://laptrinhcanban.com/tags/Ham-trong-python/"}]},{"title":"Python の range() 関数","slug":"python/nhap-mon-lap-trinh-python/ham-trong-python/range-trong-python","date":"2022-11-17T05:06:51.000Z","updated":"2022-11-17T10:52:28.842Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/ham-trong-python/range-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/ham-trong-python/range-trong-python/","excerpt":"Python で range() 関数を使用する方法。このレッスンでは、range() 関数を使用して Python で一連の数値を作成する方法を学習します。","text":"Python で range() 関数を使用する方法。このレッスンでは、range() 関数を使用して Python で一連の数値を作成する方法を学習します。 Pythonのrange()関数とはPython の range() は、次の構文を使用して、関数で指定された開始点から終了点までの一連の連続した数値を生成するために使用される関数です。 Python での range() 関数の構文 range(stop)またはrange(start,stop,step) そこで range: 関数名です start: 連続数字の開始点です。デフォルトstartは 0 です。 stop: 連続数字の終わりです step: 各数値との間隔。デフォルトstepは 1 で、省略可能です。 Python の Range() 関数の結果は、startから始まる連続した数字配列になります。次の数字は前の数字をstepに足した値に等しい、最後の数字がまだstopより小さい限り、継続的に生成されます。 Python で Range() 関数を使用したサンプル プログラムCopyrange(5)&gt;&gt; 0 1 2 3 4range(0, 5)&gt;&gt; 0 1 2 3 4range(4,7)&gt;&gt; 4 5 6range(0, 5, 1)&gt;&gt; 0 1 2 3 4range(0, 10, 2)&gt;&gt; 0 2 4 6 8 Python で高級な Range() 関数を使用する方法Python で Range() 関数を使用するときに引数を省略次の例のように、Python で Range() 関数を使用する場合、 startおよびstep引数を省略できます。 startとstepの両方を省略。するとデフォルト値のstart = 0とstep = 1が使用されます。 Copyrange(5)&gt;&gt; 0 1 2 3 4 ステップを省略。するとデフォルト値のstep = 1が使用されます。* Copyrange(0, 5)&gt;&gt; 0 1 2 3 4 Python で Range() 関数を使用して、連続した後方番号の数値配列を作成stepを負の値で指定すると、次の例のように、連続した後方番号の数値配列が作成されます。 Copyrange(10, 0, -1)&gt;&gt; 10 9 8 7 6 5 4 3 2 1range(0, -8, -2)&gt;&gt; 0 -2 -4 -6 Python で Range() 関数を使用する場合の注意次の例のように、 print関数を使用して、Python の Range() 関数によって作成された数値配列内の要素を出力することはできません。 Copyr = range(0, 10)print(r) 結果： Copyrange(0, 10) ご覧のとおり、返される結果は range() 関数によって作成された一連の数値ではなく、range自体です。 range() 関数によって作成された要素を画面に出力することはできませんが、Python で範囲からリストを作成することで、次のようにrange内の要素を出力できます。 Copyr = range(0, 10)print(list(r))#&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] さらに、次のようにインデックスを使用して、range内の要素にアクセスすることもできます。 Copyr = range(0, 10)print(r[0])&gt;&gt; 0print(r[5])&gt;&gt; 5print(r[3:7])&gt;&gt; range(3, 7) Python での range() 関数の適用Python の range() 関数は、for ループで、または Python でリストやタプルなどのイテラブルを作成するときに広く使用されています。たとえば、次のように for ループで range() 関数を使用します Copyfor i in range(4): print(i) 結果： Copy0123 たは、range() 関数を使用して、次の例のように Python で文字列からリストを作成できます。 Copystr=&#x27;bigcityboy&#x27;list=[]for i in range(0, len(str)): list.append(str[i])print(list) 結果： Copy[&#x27;b&#x27;, &#x27;i&#x27;, &#x27;g&#x27;, &#x27;c&#x27;, &#x27;i&#x27;, &#x27;t&#x27;, &#x27;y&#x27;, &#x27;b&#x27;, &#x27;o&#x27;, &#x27;y&#x27;] まとめ上記 Kiyoshi は、Range() 関数を使用して Pythonで連続した数字のシーケンスを作成する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで python の基礎を学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"Ham-trong-python","permalink":"https://laptrinhcanban.com/tags/Ham-trong-python/"}]},{"title":"Python の len() 関数","slug":"python/nhap-mon-lap-trinh-python/ham-trong-python/len-trong-python","date":"2022-11-17T05:05:51.000Z","updated":"2022-11-17T10:52:25.149Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/ham-trong-python/len-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/ham-trong-python/len-trong-python/","excerpt":"Python で Len() 関数を使用する手順。Python でオブジェクトの長さを計算したり、要素の数を数えたりする方法、および len() 関数を使用して pythonで文字列の長さを計算する方法、Python リストの要素の数を数える方法を学びます。このレッスンの後、python 配列の要素の数を数えます。","text":"Python で Len() 関数を使用する手順。Python でオブジェクトの長さを計算したり、要素の数を数えたりする方法、および len() 関数を使用して pythonで文字列の長さを計算する方法、Python リストの要素の数を数える方法を学びます。このレッスンの後、python 配列の要素の数を数えます。 Pythonのlen()関数とはPython のLen() は、Pythonでオブジェクトの長さまたは要素の数を見つけるために使用される関数です。 python で len() 関数を使用して、 pythonで文字列の長さを調べ、 python リストの要素数をカウントし、次の構文でpython 配列の要素数をカウントします。 Python での Len() 関数の構文 len(s) そこで lenは関数名です sは長さを計算したり、要素の数を数えたりするためのオブジェクトです。文字列、リスト、タプル、または配列を指定することができます。 Python の Len() 関数の出力は、指定されたオブジェクトの長さまたは要素数になります。 Python で len() 関数を使用したサンプル プログラムCopylen(&quot;Hello&quot;)&gt;&gt; 5len([&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;])&gt;&gt; 3len(&#123;&quot;s&quot;:150, &quot;m&quot;:160, &quot;l&quot;:170, &quot;xl&quot;:180&#125;)&gt;&gt; 4 Python で len() 関数を使用するlen() 関数を使用して Python で文字列の長さを計算する)次の例のように、len() 関数を使用して、Python で文字列の長さを計算できます。 Copy# 1ビット文字を含む文字列の長さを計算print(len(&#x27;Hello&#x27;))&gt;&gt; 5# 2 ビット文字を含む文字列の長さを計算print(len(&#x27;Chào&#x27;))&gt;&gt; 4# ２ビット文字を含む文字列の長さを計算print(len(&#x27;ｔｏｕｋｙo&#x27;))&gt;&gt; 6 len() 関数を使用して Python リストの要素数をカウントする次の例のように、len() 関数を使用して、Python リスト内の要素の数をカウントできます。: Copylen([&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;])&gt;&gt; 3len([1, 2, 3, 4, 5])&gt;&gt; 5len([10, 20, [&quot;Sun&quot;, &quot;Mon&quot;, &quot;Fri&quot;], 40])&gt;&gt; 4 len() 関数を使用して Python 配列の要素数をカウントする次の例のように、len() 関数を使用して、Python 配列の要素数をカウントできます。 Copylen(&#123;&quot;s&quot;:150, &quot;m&quot;:160, &quot;l&quot;:170, &quot;xl&quot;:180&#125;)&gt;&gt; 4len(&#123;&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;&#125;)&gt;&gt; 3len(frozenset([1, 2, 3, 4, 5]))&gt;&gt; 5 まとめ上記 Kiyoshi は、 len() 関数を使用して python でオブジェクトの長さを計算またはカウントする方法と、 len() 関数を適用して pythonで文字列の長さを計算する方法を示しました。 python listの要素数と python array の要素数を数えます。 レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。そして、次のレッスンで python の基礎を学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"Ham-trong-python","permalink":"https://laptrinhcanban.com/tags/Ham-trong-python/"}]},{"title":"Python returnで戻り値を返す","slug":"python/nhap-mon-lap-trinh-python/ham-trong-python/return-trong-python","date":"2022-11-17T05:04:03.000Z","updated":"2022-11-17T10:52:32.355Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/ham-trong-python/return-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/ham-trong-python/return-trong-python/","excerpt":"Python で returnを使用する方法。このレッスンの後、return を使用して Python 関数で値を返す方法、Python で複数の値を返す関数でreturn ステートメントを処理する方法、およびreturn を使用して Python で関数を終了する方法を学習します","text":"Python で returnを使用する方法。このレッスンの後、return を使用して Python 関数で値を返す方法、Python で複数の値を返す関数でreturn ステートメントを処理する方法、およびreturn を使用して Python で関数を終了する方法を学習します PythonのreturnとはPythonのreturnとは関数から値を返すために使用されるキーワード (keyword) です。Return には、関数を終了し、コントロールと関数処理の結果を呼び出し元に返す効果があります。python で関数を宣言するときに return を使用または省略できます。python で return を含む関数は、 python で戻り値関数と呼ばれます。 Python で return を使用する方法関数が値を返すかどうかに応じて、Python での return の使用方法が異なります。nhau. 値を返す関数で return を使用する方法Python で値を返す関数で return を使用する場合、return ステートメントの後に関数の戻り値を次のように記述します。: def function():&nbsp;&nbsp;&nbsp;&nbsp;return value x = function() 例えば：: Copydef add(x, y): z = x + y return zz = add(1, 2)print(z)#&gt; 3 値を返さない関数で return を使用する方法Python で値を返さない関数で return を使用する場合、次のように関数の最後に return ステートメントを記述します。 def function():&nbsp;&nbsp;&nbsp;&nbsp;return x = function() 具体例 Copydef myfunc(): print(&quot;Hello&quot;) returnmyfunc()#&gt; Hello Python で値を返さない関数を宣言する場合、return を省略することもできます。上記の例は、次のように書き直すことができます。 Copydef myfunc(): print(&quot;Hello&quot;)myfunc()#&gt; Hello 尚、Python の戻り値のない関数は関数に渡された値に対応する値を返しませんが、それは関数が何も返さないという意味ではありません。本質的に、関数から返される特定の値を指定しない場合、Noneというデフォルト値が返されます。例えば： Copydef myfunc(): print(&quot;Hello&quot;)x= myfunc()#&gt; Helloprint(x)#&gt; None returnで式の結果を返します前のセクションでは、 return を使用して特定の値を返す方法を既に知っています。ただし、数値、文字などの特定の値を返すことに加えて、return を使用して計算式の結果を返すこともできます。 たとえば、次のように return ステートメントの後に計算式を直接記述して、加算の結果を返すことができます。 Copydef add(x, y): return x + yz = add(1, 2)print(z)#&gt; 3 または、次のように return ステートメントの直後に比較を記述して、true、false を返すことができます。 Copydef chanle(x): return &#x27;chẵn&#x27; if x % 2 == 0 else &#x27;lẻ&#x27;z = chanle(1)print(z)#&gt;&gt; lẻ 上記の式の書き方はpythonでは三項演算子と呼ばれ、条件文を短くするのに役立つ一種の演算子であり、C コードをより簡潔にし、書く手間を省きます。 参照: Python の三位一体演算子 Pythonで複数の値を返す関数基本的に、return ステートメントの後ろに戻り値を指定するだけです。ただし、これらの値をタプルやリストなどの多要素オブジェクトに格納し、タプルまたはリストを指定することで、Python 関数で複数の値をreturnで簡単に返すこともできます。 return を使用して、リストに格納された複数の値を返しますこれらの値をリストに格納し、return ステートメントの後にそのリストを戻り値として指定することにより、Python 関数で複数の値を返すことができます。例えば： Copydef myfunc(): name = &quot;Kiyoshi&quot; old = 30 return [name, old] 次に、このリストの要素にアクセスして、次のように戻り値を取得できます。 Copyx = myfunc()print(x[0])#&gt; Kiyoshiprint(x[1])#&gt; 30 return を使用して複数のコンマ区切り値を返すこれらの値をタプルに格納し、return ステートメントの後にそのリストを戻り値として指定することにより、Python 関数で複数の値を返すことができます。次に、python tuple 内の要素にアクセスすることで、次の例のような戻り値を取得できます。 Copydef myfunc(): name = &quot;Kiyoshi&quot; old = 30 return (name, old)x = myfunc()print(x[0])#&gt; Kiyoshiprint(x[1])#&gt; 30 ただし、上記のリストを使用する場合とは異なり、タプルを使用すると、タプルを指定するときに()括弧を省略できます。したがって、関数の戻り値を return ステートメントの直後に次のように記述できます。 Copydef myfunc(): name = &quot;Kiyoshi&quot; old = 30 return name, old この時点で、返される結果はまだ次のようなタプルです。 Copyx = myfunc()print(type(x))#&gt; &lt;class &#x27;tuple&#x27;&gt;print(x[0])#&gt; Kiyoshi しかし、もう 1 つの奇跡は、Python の Unpack 関数を利用することで、次のようにさまざまな変数に戻り値を直接代入できることです。 Copya,b = myfunc()print(a)#&gt; Kiyoshiprint(b)#&gt; 30 簡単に言うと、Python で tuple と unpack 関数を使用すると、次のような単純な Python 関数で複数の値を簡単に返すことができます。 Copydef myfunc(): name = &quot;Kiyoshi&quot; old = 30 return name, olda, b = myfunc() return を使用して関数を終了return ステートメントは、値を返すだけでなく、関数の処理を終了するためにも使用されます。return を使用すると、初期条件が満たされた時点で関数を終了できます。 たとえば、次のように、関数に入力された値に応じて関数を終了できます。 Copydef checkNum(num): if (num &gt; 10): return &quot;大きすぎ&quot; elif (num &lt; 1): return &quot;小さすぎ&quot; else: return &quot;範囲内&quot;print(&quot;num=&quot;,3, checkNum(3))print(&quot;num=&quot;,-3, checkNum(-3))print(&quot;num=&quot;,30, checkNum(30)) 結果： Copynum= 3 範囲内num= -3 小さすぎnum= 30 大きすぎ 関数に渡される値に応じて、上記の return ステートメントを使用して、さまざまな条件で関数を終了できることがわかります。 まとめ上記 Kiyoshi は、Python 関数で return を使用して値を返す方法と、Python で複数の値を返す関数でハンドルする方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"Ham-trong-python","permalink":"https://laptrinhcanban.com/tags/Ham-trong-python/"}]},{"title":"Python の int() 関数","slug":"python/nhap-mon-lap-trinh-python/ham-trong-python/int-trong-python","date":"2022-11-17T05:03:51.000Z","updated":"2022-11-17T10:52:21.533Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/ham-trong-python/int-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/ham-trong-python/int-trong-python/","excerpt":"pythonのint()関数を使用するための手順。このレッスンの後、int() 関数を使用して Python で文字列を int に変換する方法を学習します。","text":"pythonのint()関数を使用するための手順。このレッスンの後、int() 関数を使用して Python で文字列を int に変換する方法を学習します。 Pythonのint()関数とはPythonのint()関数とはPythonで文字列を int に変換するために使用される関数です。 python int()関数を使用して、 Pythonで文字列を数値に変換し、次の構文で新しい数値を生成します。 Pythonの int() 関数の構文 int(x)またはint(x, base=y) そこで int：関数名です x：intに変換される形式の数値、数字、または数字の文字列です。 base：変換したい値の基数を指定することです。yの値は、基数 2、基数 10、16 進数などです。 Pythonでint()関数を使ったサンプルプログラム次のように Python で int() 関数を使用するために、変換したい数値のxとその値のy基数を指定できます。 x省略した場合、結果は 0 になります Copyint()&gt;&gt; 0 xは整数の場合、戻り値は xのそのままです。 Copyint(15)&gt;&gt; 15 xは10進数の場合、結果は x の丸められた整数になります。 Copyint(3.14)&gt;&gt; 3 xは指定されたy基数形式の場合、結果は x の 10 進数です。 Copyint(&quot;1011&quot;, 2)&gt;&gt; 11int(&quot;3F&quot;, 16)&gt;&gt; 63 xは文字列の場合、結果はその文字のint形式の数値になります。 Copyint(&#x27;28&#x27;)&gt;&gt; 28int(&quot;28&quot;, 10)&gt;&gt; 28int(&quot;1011&quot;, 2)&gt;&gt; 11int(&quot;3F&quot;, 16)&gt;&gt; 63 さらに、次のようにbaseを省略し、y基数をそのまま指定できます。 Copyint(&quot;24&quot;, base=8)&gt;&gt; 20int(&quot;24&quot;,8)&gt;&gt; 20 Python で int() 関数を使用する場合の注意int() 関数のみを使用して、Python で文字列から int に変換します。文字列は数値、数字、または英数字の文字列であり、これらはintに変換できるデータです。指定された文字列をintに変換できない場合、次の例に示すように ValueError が発生します Copyint(&quot;good game&quot;) ValueError の戻り値: CopyTraceback (most recent call last): File &quot;Main.py&quot;, line 1, in &lt;module&gt; int(&quot;good game&quot;)ValueError: invalid literal for int() with base 10: &#x27;good game&#x27; “good game”文字列はintに変換できないため、エラーが発生しました。 まとめ上記 Kiyoshi は、 int() 関数を使用して Python で string から int に変換する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで python の基礎を学びましょう","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"Ham-trong-python","permalink":"https://laptrinhcanban.com/tags/Ham-trong-python/"}]},{"title":"Python の str() 関数","slug":"python/nhap-mon-lap-trinh-python/ham-trong-python/str-trong-python","date":"2022-11-17T05:02:43.000Z","updated":"2022-11-17T10:52:35.998Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/ham-trong-python/str-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/ham-trong-python/str-trong-python/","excerpt":"python で Str() 関数を使用するための手順。このレッスンの後、str() 関数を使用してPython で int から string に変換する方法を学習します。.","text":"python で Str() 関数を使用するための手順。このレッスンの後、str() 関数を使用してPython で int から string に変換する方法を学習します。. Pythonのstr()関数とはPythonのstr()関数とはPythonで int から string に変換するために使用される関数です。 Python で str() 関数を使用して数値を文字列に変換し、次の構文で新しい文字列を作成します。 Python での str() 関数の構文Python での str()の構文は次のとおりです。 str(int) そこで str：メソッド名です int：文字列に変換したい数値 得られる結果は文字列形式の数字になります。 Python で str() 関数を使用したサンプル プログラムCopynum = 18str_num = str (num) # 数値 18 を文字列 &quot;18&quot; に変換print ( type (num)) # num のデータ型をチェックprint ( type (str_num)) # str_num のデータ型をチェックprint ( &quot;年齢：&quot; + str_num ) 結果： Copy&lt;class &#x27;int&#x27;&gt;&lt;class &#x27;str&#x27;&gt;年齢：18 Python での str() 関数の適用str() 関数のPython で int から string に変換する機能のおかげで、この関数を使用してデータ型をキャストしてから処理できます。 たとえば、 pythonで文字列を連結して反復する方法では、次の例のように+演算子を使用して文字列と数値を連結できないことを学びました。 Copyprint(&quot;僕は&quot;+ 18 +&quot;才&quot;) TypeError が発生しました: CopyTraceback (most recent call last): File &quot;Main.py&quot;, line 1, in &lt;module&gt; print(&quot;僕は&quot;+ 18 +&quot;才&quot;)TypeError: can only concatenate str (not &quot;int&quot;) to str その理由は、文字列と数値は 2 つの異なるデータ型であるため、+ 演算子を使用してそれらを連結する前に、それらを同じ型にキャストする必要があるためです。 次に、Python で str() 関数を使用して数値データ型をキャストし、Python で int から文字列に変換してから、次のように + 演算子を使用して通常どおりそれらを連結できます。 Copyprint(&quot;僕は&quot;+ str(18) +&quot;才&quot;) 結果： Copy僕は18才 まとめ上記 Kiyoshi は、 str() 関数を使用して Python で int から string に変換する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで python の基礎を学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"Ham-trong-python","permalink":"https://laptrinhcanban.com/tags/Ham-trong-python/"}]},{"title":"Python の算術演算子","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/toan-tu-so-hoc-trong-python","date":"2022-11-16T20:46:50.000Z","updated":"2022-11-17T10:51:40.786Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/toan-tu-so-hoc-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/toan-tu-so-hoc-trong-python/","excerpt":"Python で算術演算子を使用するための手順。このレッスンの後、Python で足し算、引き算、掛け算、割り算などの算術演算子を書き、使用する方法を学びます。","text":"Python で算術演算子を使用するための手順。このレッスンの後、Python で足し算、引き算、掛け算、割り算などの算術演算子を書き、使用する方法を学びます。 Python の算術演算子Python の算術演算子は、次の 9 つの基本形式で表されます。これらの演算子は、整数、実数、複素数を含むPythonのすべての数値データ型に適用できます。 演算子 書き方 サンプル 意味 足し算 x + y 20 + 3 = 23 xとyの和 引き算 x - y 20 - 3 = 17 xとyの差 掛け算 x * y 20 * 3 = 60 xとyの積 割り算 x / y 20 / 3 = 6.666 xとyの商 商を切り下げ x // y 20 // 3 = 6 xとyの商を切り下げたもの 剰余 x % y 20 % 3 = 2 x/yの剰余 符号反転 -x -20 = 20 xの符号反転 符号そのまま +x +20 = 20 xそのまま 乗 x ** y 203 = 8000 xのy乗 xy たとえば、次の加算、減算、乗算、および除算を実行します。 15 + 7 # 22 3.4 + 2.225 # 5.625 7 + 4.5 # 11.5 Python で算術演算子を使用し同じ数値型間で計算する場合算術演算子を使用して同じ型の数値間の計算を行う場合、たとえば、整数と整数の和を計算したり、実数と実数を乗算したりすると、元の数値と同じデータ型の数値が返されます。 たとえば、次のように、Python で整数と整数の間で算術演算子を使用します。 Copyprint(&quot;5 + 7 = &quot; + str(5 + 7))#&gt;&gt; 5 + 7 = 12print(&quot;4 * 8 = &quot; + str(4 * 8))#&gt;&gt; 4 * 8 = 32print(&quot;15 / 2 = &quot; + str(15 / 2))#&gt;&gt; 15 / 2 = 7.5print(&quot;15 // 2 = &quot; + str(15 // 2))&gt;&gt; 15 // 2 = 7print(&quot;15 % 2 = &quot; + str(15 % 2))&gt;&gt; 15 % 2 = 1 計算で使用される//演算子は、除算の四捨五入された商のみを取ることがわかります。たとえば、7.5に切り捨てられ7になります。また%演算子は剰余のみを取得するのに役立つのです。尚、すべての計算の結果は元の数値と同じデータ型になるため、ここでは整数になります。 別の例を見てみましょう。今回は、次のように Python で実数の間の算術演算子を使用します。 Copyprint(&quot;5.2 + 7.485 = &quot; + str(5.2 + 7.485))#&gt;&gt; 5.2 + 7.485 = 12.685print(&quot;8.21 * 3.5 = &quot; + str(8.21 * 3.5))#&gt;&gt; 8.21 * 3.5 = 28.735000000000003print(&quot;15.78 / 2.4 = &quot; + str(15.78 / 2.4))#&gt;&gt; 15.78 / 2.4 = 6.575print(&quot;15.78 // 2.4 = &quot; + str(15.78 // 2.4))#&gt;&gt; 15.78 // 2.4 = 6.0print(&quot;15.78 % 2.4 = &quot; + str(15.78 % 2.4))#&gt;&gt; 15.78 % 2.4 = 1.38 //演算子は、計算の四捨五入された商も返すことがわかります。ただし、ここでは算術演算子を使用して実数で計算しているため、返される結果も実数です。また、この結果は切り捨てられます。たとえば、7.56は7.0に丸めたり、 -1.23は-2.0に丸めたりします。そして、すべての計算の結果は、元の数値と同じデータ型である実数です。 Python で算術演算子を使用し異なる数値型間で計算する場合上記で、算術演算子を使用して同じ型の数値を計算すると、返される結果は元の数値と同じデータ型の数値になることがわかります。 算術演算子を使用して異なる型の数値を計算する場合は異なり、元のデータ型の制限が最も少ないデータ型が返されます。 Python での数値データ型の下位から上位への順序は次のとおりです。 複素数 &gt; 実数 &gt; 整数 たとえば、算術演算子を使用して整数と実数の間を計算すると、返される結果は実数になります。または、実数と複素数の間では、次の例のように、返される結果は複素数になります。 Copyprint(&quot;異なる数値型間で計算&quot;)print(&quot;2 + 1.485 = &quot; + str(2 + 1.485))print(&quot;9 * 5.23 = &quot; + str(9 * 5.23))print(&quot;16 / 4.23 = &quot; + str(16 / 4.23))print(&quot;16 ** 4.23 = &quot; + str(16 ** 4.23)) 結果： Copy異なる数値型間で計算2 + 1.485 = 3.48500000000000039 * 5.23 = 47.0700000000000116 / 4.23 = 3.782505910165484316 ** 4.23 = 124001.66787161745 上記の例から、実数と整数の間で計算を行う場合、整数が実数に変換されて計算され、返される結果も実数であることがわかります。したがって、異なるタイプの数値間で計算する場合、目的の結果を得るには、結果がどのタイプの数値に表示されるかに注意を払う必要があります。 まとめ上記 Kiyoshi はpython で算術演算子を使用する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"Python の数値型","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/so-trong-python","date":"2022-11-16T20:45:50.000Z","updated":"2022-11-17T10:51:30.026Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/so-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/so-trong-python/","excerpt":"Python は、整数(int)、実数(float)および複素数(complex)の3 つの数値データ型をサポートしています。これらの数値データ型の使用方法については、このレッスンで学習します。","text":"Python は、整数(int)、実数(float)および複素数(complex)の3 つの数値データ型をサポートしています。これらの数値データ型の使用方法については、このレッスンで学習します。 Pythonの数値データ型とはPythonの数値データ型(英語 : Numeric literal)とはPythonプログラムで使用される数字を呼び出すために使用されるデータ型の名前です。リテラル データ型と同様に、Python の数値データ型もリテラル(それ自体を表す値) です。たとえば、11は数値データ型であり、11 に等しい独自の値を表し、外部要因に依存しません。 Pythonの整数データ型(int)Python の整数データ型には、正の整数 (1,2,3…)、負の整数 (-1、-2、-3…)、および数値 0 が含まれます。整数自体にはドットは含まれません。 プログラムで整数を記述する場合、以下の例のように値を記述します。 Copy# 正の整数123# 負の整数-1-123# ゼロ0 Python では、次のように整数データ型 int を記述するときに、任意の位置にアンダースコア_を追加して数字を分割し、見やすくすることができます。 Copy1000010_0001000_01_0000 さらに、以下のように、2 進数 (2 進数)、8 (8 進数)、および 16 (16 進数 - 16 進数) 形式で整数を表すことができます。 Copy0b10110x9F-0b1011 Python で整数データ型 int を2 進数(バイナリ)、8 進数(8 進数)、および16 進数(16 進数 – 16 進数) として表すには、次の表を参照してください。 形 書き方 サンプル 10進数 0 から 9 までの数字を使用して表します。文字列または数値の先頭に+-記号を 追加できます。数字 0 以外の 0 から始まる数字を書くことはできません。 100-1000 2進数 0b文字で始まる数字を書きます。0 と 1 を使用して数値を表します。 文字列または数字の先頭に+-記号を追加できます。 0b1111-0b1111 8進数 0o文字で始まる数字を書きます。数字を表すには、0 ～ 7 の数字を使用します文字列または数字の先頭に+-記号を追加できます。 0o100-0o1000 16進数 0x文字で始まる数字を書きます。数字を表すには、0 から 9 までの数字を使用します。文字列または数字の先頭に+-記号を追加できます。 0x100-0x1000 Python で他のデータ型から整数データ型 int に変換するには、int() メソッドを使用できます。次の例に示すように、 bin()、oct()、またはhexメソッドを使用して、整数データ型を 2 進数、8 進数、および 16 進数に変換することもできます。 Copy# 文字列 &quot;15&quot; を変数 a に代入a=&quot;15&quot;# a を文字列データ型から整数データ型に変換# 次に、この値を b に代入b = int(a)print(b)#&gt;&gt;15# b を 10 進数から 2 進数に変換print(bin(b))#&gt;&gt; 0b1111# b を 10 進数から 8 進数に変換print(oct(b))#&gt;&gt; 0o17# b を 10 進数から 16 進数に変換print(hex(b))#&gt;&gt; 0xf Pythonの実数データ型(float)**Pythonの実数データ型(float)**は、浮動小数点数として表される数値型です(英語: Floating point number)。 簡単に理解できますが、Python の浮動小数点または実数のデータ型は、ドットの後に小数を含む数値です。 整数データ型 int と同様に、以下の例のように、Python で float の値を直接書き込むことができます。 Copy12.49-19.5 次のように float データ型を記述するときに、見やすいように数字を分割するために任意の位置でアンダースコアを使用することもできます。 Copy122_3.49-1_43249.5 コンマの後に多数ある非常に大きいまたは非常に小さい実数の場合、以下に示すように、Python で数値 e を使用してそれらを表すことができます。 Copy8.5e+72.34e-12 その中に、, 8.5e+7の値は 8.5×100000=850000であり, 2.34e-12の値は2.34×0.0001=0.000234です。 次の例のようにfloat() メソッドを使用して、Python で他のデータ型を float に変換することもできます Copy# 文字列 &quot;15&quot; を変数 a に代入 aa=&quot;15&quot;# a を文字列データ型から実数データ型に変換# 次に、この値を b に代入b = float(a)print(b)#&gt;&gt;15.0 Pythonの複素数データ型Pythonの複素数データ型は、以下に示すように、実数部と虚数部で表される数値です。 a + bj Pythonは、複素数のデータ型をサポートする数少ないプログラミング言語の1つです。その理由は、複素数が開発できる分野である数学的および工学的幾何学で使用されることが多いためです。 しかし、実際には一般的な python プログラムでは、複素数のデータ型の扱いにはほとんど関係がないため、この型の数をよく理解していなくても心配する必要はありません。 Python で複素数データ型を記述したい場合は、以下の例を参照してください。 Copy4.2 + 5j3 + 4j4j(3.2 + 4j) サンプルプログラム以下に示すように、Python で数値データ型の値を表示する簡単なプログラムを作成します。 Copyprint(&quot;整数:&quot;,12345)#&gt;&gt; 整数: 12345print(&quot;実数 :&quot;,2.34e-12)#&gt;&gt; 実数 : 2.34e-12print(&quot;複素数 :&quot;, 4.2 + 5j)#&gt;&gt; 複素数 : (4.2+5j) まとめ上記 Kiyoshi は、Python の数値型について説明しています。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"round関数を使用してPythonで数値を丸める","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/lam-tron-so-trong-python-bang-ham-round","date":"2022-11-16T20:34:42.000Z","updated":"2022-11-17T10:51:12.219Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/lam-tron-so-trong-python-bang-ham-round/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/lam-tron-so-trong-python-bang-ham-round/","excerpt":"Python で数値を丸める方法のチュートリアル。このレッスンでは、ラウンド関数を使用して Python で数値を丸める方法を学習します。","text":"Python で数値を丸める方法のチュートリアル。このレッスンでは、ラウンド関数を使用して Python で数値を丸める方法を学習します。 round()関数を使用してPythonで数値を丸めるPython をインストールするとき、 round()を含む一部の組み込み関数はインポートなしで使用できます。 ラウンド関数 - Python ドキュメント 次の構文を使用して、Python で数値 (整数または実数) を丸めるために round() 関数を使用します。 round(number , ndigits) そこで、 round：関数名 number：丸めたい値 ndigits：丸めた結果の小数点以下の桁数。省略ができ、デフォルトndigitsは 0です round()関数は次の場合に使用できます。 Pythonで実数を丸める実数の場合、次の例のようにカンマの後の数値を自由に丸めます。 round() 関数を使用して、カンマの後の数値を丸め、実数を整数に変換しますround() 関数でndigitsを指定しないことにより、次の例のようにカンマの後の数値を丸め、実数をカンマなしの整数に変換できます。 Copyf = 123.456print(type(f))# &lt;class &#x27;float&#x27;&gt;print(round(f))# 123print(type(round(f)))# &lt;class &#x27;int&#x27;&gt; ご覧通り、f数値が実数であり、round()で丸めた後、カンマの後に四捨五入されてintになっていることがわかります。 round() 関数を使用して、実数を丸め、丸める小数点以下の桁数を指定ndigitsの値をに指定することで、python で実数を丸める際に丸める小数点以下の桁数を指定することができます。負の値がある場合ndigitsはカンマの左側に小数点以下の桁を指定し、正の値はカンマの右側に小数点以下の桁を指定します。 例えば、-1は数十、-2は数百であり、0で指定るると省略されます。 数値: 1 2 3 , 4 5 6 ndigits -2 -1 0 1 2 3 具体例は以下のとおりです。 Copyf = 123.456print(type(f))# &lt;class &#x27;float&#x27;&gt;print(round(f, 1))# 123.5print(round(f, 2))# 123.46print(round(f, -1))# 120.0print(round(f, -2))# 100.0print(round(f, 0))# 123.0print(type(round(f, 0)))# &lt;class &#x27;float&#x27;&gt; 実数がさまざまな場所で丸められ、返された結果で float データ型が変更されていないことがわかります。 round() 関数を使用して Python で整数を丸める実数と同様に、 ndigitsの値を指定または減らすことで、丸められる位置で数値を丸めることができます。 以下の具体的な例を見てみましょう。尚、整数を丸めた結果も整数になることに注意してください。 Copyi = 99518print(round(i))# 99518print(round(i, 2))# 99518print(round(i, -1))# 99520print(round(i, -2))# 99500print(round(i, -3))# 100000 round() 関数は、省略された丸めではなく、偶数の丸めですPython の最新バージョンでは、 round() 関数は数値の丸めではなく、偶数の丸め (バンキングで使用) であることに注意してください。 偶数丸めは次のように定義されます。 端数が 0.5 未満の場合は切り捨て、端数が 0.5 より大きい場合は端数を切り捨て、端数が 0.5 の場合は切り捨てまたは切り上げを行い、結果が偶数になるようにします。偶数の丸め 公式の python ウェブサイトによると、0.5の偶数丸められ結果は0であり、1.5の偶数丸められた結果は2になります。 以下にいくつかの例を見てみましょう。 Copyprint(&#x27;0.4 =&gt;&#x27;, round(0.4))print(&#x27;0.5 =&gt;&#x27;, round(0.5))print(&#x27;0.6 =&gt;&#x27;, round(0.6))# 0.4 =&gt; 0# 0.5 =&gt; 0# 0.6 =&gt; 1print(&#x27;4 =&gt;&#x27;, round(4, -1))print(&#x27;5 =&gt;&#x27;, round(5, -1))print(&#x27;6 =&gt;&#x27;, round(6, -1))# 4 =&gt; 0# 5 =&gt; 0# 6 =&gt; 10 偶数の丸めでは、0.5は常に切り上げまたは切り捨てになるとは限らないことに注意してください。 Copyprint(&#x27;0.5 =&gt;&#x27;, round(0.5))print(&#x27;1.5 =&gt;&#x27;, round(1.5))print(&#x27;2.5 =&gt;&#x27;, round(2.5))print(&#x27;3.5 =&gt;&#x27;, round(3.5))print(&#x27;4.5 =&gt;&#x27;, round(4.5))# 0.5 =&gt; 0# 1.5 =&gt; 2# 2.5 =&gt; 2# 3.5 =&gt; 4# 4.5 =&gt; 4 また、小数点以下 2 桁目以降の浮動小数点実数でround() 関数を使用すると、常に正しい値を取得できるとは限りません。 Copyprint(&#x27;0.05 =&gt;&#x27;, round(0.05, 1))print(&#x27;0.15 =&gt;&#x27;, round(0.15, 1))print(&#x27;0.25 =&gt;&#x27;, round(0.25, 1))print(&#x27;0.35 =&gt;&#x27;, round(0.35, 1))print(&#x27;0.45 =&gt;&#x27;, round(0.45, 1))# 0.05 =&gt; 0.1# 0.15 =&gt; 0.1# 0.25 =&gt; 0.2# 0.35 =&gt; 0.3# 0.45 =&gt; 0.5 その理由は、Python ドキュメントによると、本質的に実数を正確に 10 進数として表すことができないためです。 浮動小数点実数で round() 関数を使用すると、驚くべき結果が得られることに注意してください。たとえば、 round(2.675, 2) は、予想される 2.68 ではなく 2.67 を返します。これはエラーではありません。これは、ほとんどの 10 進数が浮動小数点数で正確に表現されていないための結果です。 実数でも丸めたときに正確な結果を出したい場合は、10 進標準ライブラリに組み込まれている quantize() メソッドを使用します。これについては、次のレッスンで学習しましょう。 まとめ上記 Kiyoshi は Python の round 関数を使用して、Python で数値を丸める方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"Pythonの演算子の優先順位","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/thu-tu-uu-tien-toan-tu-trong-python","date":"2022-11-16T20:18:53.000Z","updated":"2022-11-17T10:51:36.722Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/thu-tu-uu-tien-toan-tu-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/thu-tu-uu-tien-toan-tu-trong-python/","excerpt":"pythonでの演算子の優先順位の説明。Python では多くの種類の演算子を使用できますが、1 つのステートメントに複数の演算子が存在する場合、プログラムはpython の演算子の優先順位に従って演算子を実行します。","text":"pythonでの演算子の優先順位の説明。Python では多くの種類の演算子を使用できますが、1 つのステートメントに複数の演算子が存在する場合、プログラムはpython の演算子の優先順位に従って演算子を実行します。 Pythonの演算子の優先順位表次の表は、Python での演算子の優先順位を高いものから低いものへと示しています。 No 演算子 意味 1 (expressions...), [expressions...], &#123;key: value...&#125;, &#123;expressions...&#125; タプル、リスト、リスト、辞書を表示 2 x[index], x[index:index], x(arguments...), x.attribute 登録、トリミング、呼び出し、属性参照 3 await x await式 4 ** 累乗 5 +x, -x, ~x 符号を保持、符号を変更,bit NOT 6 *, @, /, //, % 乗算、行列、除算、丸め除算、剰余除算 7 +, - 加減 8 &lt;&lt;, &gt;&gt; ビットシフト演算 9 &amp; ビット AND 10 ^ ビット XOR 11 ビット OR 12 in, not in, is, is not,&lt;, &lt;=, &gt;, &gt;=, !=, == 比較 13 not x Boolean NOT 14 and Boolean AND 15 or Boolean OR 16 if -- else 条件式 17 lambda ラムダ式 たとえば、if – else演算子と乗算と加算演算子を含む式では、乗算が最初に実行され、次に加算が実行され、最後にif – elseが実行されます。 Pythonでの演算子の優先順位による計算式に複数の演算子がある場合、Python は次の 2 つの規則に従って、Python の演算子の優先順位に従って計算します。 TPythonでの演算子の優先順位による計算次の例を見てみましょう。 Copynum = 5 + 3 * 4 +演算子と*演算子の優先順位を比較すると、*優先順位が高いため先に計算され、上記の式は次のように計算されます。 num = 5 + 3 * 4 num = 5 + 12 num = 17 Pythonの演算子の優先順位が同じ場合、左から右に計算次の例を参照してください。dụ sau: Copynum = 8 / 2 * 4 /演算子と*演算子の優先順位を比較すると優先順位が同じであるためpython は左から右に計算し、上記の式を評価します。計算は次のようになります。 num = 8 / 2 * 4 num = 4 * 4 num = 16 Pythonで演算子の計算順序を変更するPython で演算子の計算順序を変更したい場合は、式に()括弧を挿入して使用します。括弧内の演算子が最初に評価されます。 次の例を見てみましょう。 Copynum1 = 5 + 3 * 4num2 = (5 + 3) * 4 式 num1 には括弧がないため、デフォルトで python が計算を実行します。 num = 5 + 3 * 4 num = 5 + 12 num = 17 ただし、式 num2 では、括弧の出現により、括弧内の演算子が最初に評価されます。 num2 = (5 + 3) * 4 num = 8 * 4 num = 32 尚、複数の括弧を含む式の場合、内側の括弧が優先されます。 num2 = (5 + (3-2)) * 4 num = (5 + 1) * 4 num = 6 * 4 num = 24 まとめ上記 Kiyoshi は、すでにpython での演算子の優先順位について説明しています。レッスンの内容をよりよく理解するために、次の例で練習してください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"Pythonで素数をチェック","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-nguyen-to-trong-python","date":"2022-11-16T20:18:27.000Z","updated":"2022-11-17T10:51:06.764Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-nguyen-to-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-nguyen-to-trong-python/","excerpt":"Pythonで素数を調べる方法のチュートリアル。このレッスンの後、python で素数をチェックする関数を作成する方法と、 pythonで n 未満のすべての素数を一覧表示する方法を学習します。","text":"Pythonで素数を調べる方法のチュートリアル。このレッスンの後、python で素数をチェックする関数を作成する方法と、 pythonで n 未満のすべての素数を一覧表示する方法を学習します。 Pythonの素数とは素数は、2 つの小さい自然数の積ではない 1 より大きい自然数であることは誰もが知っています。つまり、素数は、1 とそれ自体の 2 つの約数を持つ数です。 たとえば、数字の 2、3、6 を次のように考えます。 数 2 は 1 のちょうど 2 つの約数を持ち、それ自体が素数である必要があります数 3 は 1 のちょうど 2 つの約数を持ち、それ自体が素数である必要があります数 6 は 1、2、3、および 6 の 4 つの約数を持っているため、素数ではありません。 Pythonで素数をチェック素数は1 より大きい数であり、正確に 2 つの約数 ( 1 とそれ自体) しかありません。したがって、与えられた数が1 とそれ自体以外に複数の約数を持つ場合、それは素数ではありません。 これを活用し、1～与えられた数の範囲内に約数があるかどうかを確認するだけで素数をチェックが出来ます。もし1つでも約数がある場合、与えられた数は素数ではないでしょう。 これに基づいて、次のように Python で素数チェッカー関数を作成できます。 Copydef check_prime_number(n): #flag = 0 =&gt; 素数ではない #flag = 1 =&gt; 素数である flag = 1; if (n &lt;2): flag = 0 return flag #2 未満の数は素数ではありません #1～与えられた数の範囲内に約数があるか for p in range(2, n): if n % p == 0: flag = 0 break #もし1つでも約数がある場合、ループを終了 return flag この関数を呼び出して、以下のように素数をチェックするプログラムに使用できます。このプログラムには、n を入力して、n が素数かどうかをチェックします。 Copydef check_prime_number(n): #flag = 0 =&gt; 素数ではない #flag = 1 =&gt; 素数である flag = 1; if (n &lt;2): flag = 0 return flag #2 未満の数は素数ではありません #1～与えられた数の範囲内に約数があるか for p in range(2, n): if n % p == 0: flag = 0 break #もし1つでも約数がある場合、ループを終了 return flagn = int(input(&quot;&gt;&gt; 整数を入力してください: &quot;))check = check_prime_number(n); if check == 1: print(n,&quot; :素数である&quot;)else: print(n,&quot; :素数ではない&quot;) 入力画面と、素数をチェックする python プログラムの結果は次のようになります。 Copy&gt;&gt; 整数を入力してください: 11 素数ではない&gt;&gt; 整数を入力してください: 22 素数である&gt;&gt; 整数を入力してください: 33 素数である&gt;&gt; 整数を入力してください: 44 素数ではない&gt;&gt; 整数を入力してください: 66 素数ではない n 未満のすべての素数をリストする上記の方法を使用すると、Python を使用してn 未満のすべての素数をリストできます。 これは、Pythonで n 未満のすべての素数をリストするプログラムの例です。 Copydef check_prime_number(n): #flag = 0 =&gt; 素数ではない #flag = 1 =&gt; 素数である flag = 1; if (n &lt;2): flag = 0 return flag #2 未満の数は素数ではありません #1～与えられた数の範囲内に約数があるか for p in range(2, n): if n % p == 0: flag = 0 break #もし1つでも約数がある場合、ループを終了 return flagn = int(input(&quot;&gt;&gt; 整数を入力: &quot;))for i in range(n): check = check_prime_number(i) if( check == 1 ) : print(i) Kết quả: Copy&gt;&gt; 整数を入力: 20235711131719 まとめ上記 Kiyoshi は、 python で素数をチェックする方法と、すでに pythonで n 未満のすべての素数をリストする方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"Pythonの円周率(π)","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/so-pi-trong-python","date":"2022-11-16T20:06:27.000Z","updated":"2022-11-17T10:51:19.307Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/so-pi-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/so-pi-trong-python/","excerpt":"初心者向けの python で円周率(π)を使用する方法のチュートリアル。このレッスンでは、数学モジュールに組み込まれている math.pi 定数を使用して円周率を表示するする方法、およびPythonでの円周率を使用する方法を学習します。","text":"初心者向けの python で円周率(π)を使用する方法のチュートリアル。このレッスンでは、数学モジュールに組み込まれている math.pi 定数を使用して円周率を表示するする方法、およびPythonでの円周率を使用する方法を学習します。 Pythonの円周率(π)とは確かに、数学世界でよく知られた円周率(パイ)(記号: π) は、直径を掛けると円の円周が得られる値です。 πというギリシャ語のアルファベットの記号は、英語のペリフェラルとペリメーター (どちらも円周、円を意味します) の最初の文字です。また、パイは円の円周と直径の比であるため、πはこれが円周率(パイ)として使用されています。 Python の 円周率(π)の概念も、その常識から変更されていません。これは、直径を掛けると、円の円周が得られる量です。 Python で パイを使用して円を描画し、関連する数量を計算します。ただし、Python ではpi の値を直接使用することはできませんが、Math モジュールの組み込みのmath.pi 定数を介して間接的に使用する必要があります。 mathモジュールを介してpythonでπを表示するPython で πを表示するには、 math モジュールに組み込まれている math.pi 定数を使用します。Pythonに似た他のプログラミング言語でも、math モジュールに組み込まれている math.pi 定数を使用することができます。 Pythonのモジュールとはモジュール(Module)は、ステートメント、概念、クラスのコレクションを含む pythonの特集ファイルです。このモジュールは、import キーワードを介して読み込むことにより、Pythonのプログラムで使用できます。 Pythonのmathモジュールとはmath モジュールは、数学的計算を実行する際に役立つコマンドが多数含まれているモジュールです。数学モジュールは、周囲スケール、切り上げ、切り捨て、指数、対数、三角形などのさまざまな数学演算を処理できます。 mathモジュールを介してpythonでπを表示する方法このモジュールに含まれるコマンドを使用できるように、 math モジュールをプログラムにインポートする必要があります。また、math.pi 定数を使用して、次のように Python で パイ を表示します。 import mathmath.pi そこで import mathは、使用するプログラムにモジュールを呼び出す処理です。 math.piはPython で πを表示するために使用されます。 Python で パイ を使用した例Python で パイを使用して sin、cos、tan を計算し、次のプログラムで円の円周と面積を計算する実際の例を見てみましょう Python で パイ を取得するCopyimport mathprint(math.pi)##&gt; 3.141592653589793 Python で 円周率を使用して sin を計算するonCopyimport mathprint(&quot;sin(π/4) = &quot;,math.sin(math.pi/4))##&gt; sin(π/4) = 0.7071067811865475 Pythonで円周率を使用してcosを計算するCopyimport mathprint(&quot;cos(π/4) = &quot;,math.cos(math.pi/4))##&gt; cos(π/4) = 0.7071067811865476 Pythonで円周率を使ってtanを計算するCopyimport mathprint(&quot;tan(π/4) = &quot;,math.tan(math.pi/4))#&gt;&gt; tan(π/4) = 0.9999999999999999 Pythonで円周率を使用して円周を計算するCopyimport mathr = 8print(&quot;Chu vi = &quot;, 2 * r * math.pi)##&gt; Chu vi = 50.26548245743669 Pythonで円周率を使って円の面積を計算するCopyimport mathr = 8print(&quot;Dien tich = &quot;, r * r * math.pi)##&gt; Dien tich = 201.06192982974676 上記の例から、 Pythonで円周率を使用して円を描画し、関連する数量を計算する方法を見ることができます。 まとめ上記 Kiyoshi は、 python で piを使用する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"Pyinstaller を使用して Python プログラムをexe化する","slug":"python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/dong-goi-chuong-trinh-python-pyinstaller","date":"2022-11-16T09:40:20.000Z","updated":"2022-11-16T14:03:11.988Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/dong-goi-chuong-trinh-python-pyinstaller/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/dong-goi-chuong-trinh-python-pyinstaller/","excerpt":"Pyinstallerを使用して Python プログラムをexe化する方法に関するチュートリアル。このレッスンの後、Pyinstaller を使用してPython ファイルを exe に変換し、Python プログラムをexe化する方法を学習します。","text":"Pyinstallerを使用して Python プログラムをexe化する方法に関するチュートリアル。このレッスンの後、Pyinstaller を使用してPython ファイルを exe に変換し、Python プログラムをexe化する方法を学習します。 Python プログラムをexe化する必要Python プログラムを作成、保存、実行する方法の記事では、Python プログラムを実行するには、マシンに Pythonの環境を作成し、プログラムを提供するために必要なモジュールをインストールする必要があることを知っています。次に、プログラムのソース コードを py ファイルに保存し、このファイルを Anaconda または DOS で実行する必要もあります。 作成した python プログラムをマシンで実行するだけであれば、python プログラムをexe化する必要はありません。ただし、このプログラムを第三者に渡して使用する必要がある場合や、別のコンピュータで使用したい場合など、使用するための python 環境をインストールして準備するのは非常に面倒です。 労力を節約し、上記の複雑な作業のほとんどを取り除くには、python ファイルを exe に変換し、python プログラムを、 python 環境をインストールせずにさまざまなマシンで実行できるスタンドアロン プログラムにexe化する必要があります。 python プログラムをexe化する方法は数多くありますが、代表的な方法は以下の 3 通りあり、メリットとデメリットがあります。 方法p 利点 欠陥 PyInstaller 人気が高い開発中ほとんどの新しいバージョンの python と互換性がある 単一の exe ファイルを作成できる 次のプログラムは非常に重く圧縮され ています exeファイルの実行速度は遅い Py2exe xeファイルの実行速度が速い もう開発中ではありません単一のexeファイルをマージできません cx_Freeze 非常に軽量exeファイルの実行速度が速い&lt;開発中&gt; 単一のexeファイルをマージできませんNumPy、SciPy、OpenCV、matplotlib、PyQT などのサードパーティ ライブラリをバンドルできない 次の PyInstaller と Py2exe の人気の比較を参照できます。 trends.embed.renderExploreWidget(\"TIMESERIES\", {\"comparisonItem\":[{\"keyword\":\"py2exe\",\"geo\":\"\",\"time\":\"today 12-m\"},{\"keyword\":\"pyinstaller\",\"geo\":\"\",\"time\":\"today 12-m\"}],\"category\":31,\"property\":\"\"}, {\"exploreQuery\":\"cat=31&q=py2exe,pyinstaller&date=today 12-m,today 12-m\",\"guestPath\":\"https://trends.google.com:443/trends/embed/\"}); Python ファイルを exe パッケージに変換するこれらの方法を比較すると、Py2exe は古すぎて、もはや普及していないことがわかります。cx_Freeze は PyInstaller より高速で、アフター パッケージは軽量ですが、cx_Freeze は NumPy、SciPy、OpenCV、matplotlib、PyQT などのサードパーティ製ライブラリをexe化できません。 したがって、Python で簡単なプログラムをexe化する必要がある場合は cx_Freeze を使用し、上記のようなサードパーティ ライブラリに関連するプログラムをexe化する必要がある場合は PyInstaller を使用する必要があります。 cx_Freeze の使用方法については、Kiyoshi が cx_Freeze を使用したPython プログラムのexe化 に関する投稿で既に共有しています。この記事では、Pyinstaller を使用して Python プログラムをexe化する方法を学習します。 PythonのPyinstallerとは公式のPyInstaller マニュアルWeb サイトによると: PyInstaller は、Python アプリケーションとそのすべての依存関係を 1 つのパッケージにバンドルします。ユーザーは、Python インタープリターやモジュールをインストールしなくても、exe化されたアプリケーションを実行できます。PyInstaller は Python 3.6 以降をサポートし、numpy、PyQt、Django、wxPython などの主要な Python パッケージを正しくexe化します。 PyInstaller は、Windows、Mac OS X、および GNU/Linux でテストされています。ただし、これはクロス コンパイラではありません。Windows アプリケーションを作成するには、Windows で PyInstaller を実行します。PyInstaller は AIX、Solaris、FreeBSD、および OpenBSD で正常に使用されていますが、それらに対するテストは統合テストの一部ではありません。 簡単に言うと、Python のPyinstaller は、Python アプリケーションとその依存関係から単一のスタンドアロン実行可能ファイル (exe) を作成するモジュールです。Pyinstaller を使用して、python ファイルを exe に変換し、python プログラムをexe化します。 Pyinstaller を使用して Python プログラムをexe化するPyinstaller をインストールする次のコマンドを使用して、Pyinstaller を python にインストールします。 Copypip install pyinstaller Python は Pyinstaller をインストールし、Successfully installedという行が表示されれば、インストールは成功しています。 exe化するpythonプログラムを準備するexe化するpythonプログラムのソースコードを書いて、パッケージング前にpyファイルに保存します。 たとえば、次のように、OpenCV を使用してビデオをキャプチャおよび記録するプログラムをexe化する必要があります。 Copyimport cv2# quay và ghi video bằng OpenCVcapture = cv2.VideoCapture(0)while True: ret, frame = capture.read() if not ret: continue cv2.imshow(&#x27;frame&#x27;,frame) if cv2.waitKey(1) &amp; 0xFF == ord(&#x27;q&#x27;): breakcapture.release()cv2.destroyAllWindows() 上記のプログラムでは、OpenCV ライブラリのcs2 モジュールを使用する必要があるため、次のインストール コマンドを使用してコンピュータに OpenCV がインストールされていることを確認してください Copypip install opencv-python プログラム ソース コードをファイル名で保存video_capture.pyし、次の手順に進みます。 |data/ |--video_capture.py Pythonファイルをexeに変換し、プログラムをexe化することに進みます準備が完了したら、次のようにpyinstallerコマンドの後ろに python ファイルのパスを指定して、python ファイルを exe に変換し、プログラムをexe化します。 Copypyinstaller video_capture.py Pyinstaller は、次のように、exe化されるプログラムを実行するために必要なファイルとディレクトリの構築に進みます。 テキストBuilding EXE from EXE-00.toc が表示されたら、python ソフトウェアが正常にexe化されました。 尚、python ソフトウェアとそのすべての依存関係を単一の exe ファイルにexe化する場合は、次のコマンドを使用します。 Copypyinstaller video_capture.py --onefile すると、python ソフトウェアをexe化する必要があり、関連するすべてのコンポーネントがdist &gt; video_captureフォルダー内の exe ファイルにラップされます。それに応じて、この exe ファイルの名前を変更し、コンピューターでスタンドアロン プログラムとして使用できます。 |data/ |--dist | |--video_capture | |--video_capture.exe |--video_capture.py まとめ上記 Kiyoshi は、 Pyinstaller を使用して python プログラムをexe化する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Đóng gói chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Dong-goi-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Dong-goi-chuong-trinh-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Đóng gói chương trình python","slug":"Dong-goi-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Dong-goi-chuong-trinh-python/"}]},{"title":"Python プログラムをexe化する(cx_Freeze)","slug":"python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/dong-goi-chuong-trinh-python-cx-freeze","date":"2022-11-16T09:39:20.000Z","updated":"2022-11-16T14:03:11.753Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/dong-goi-chuong-trinh-python-cx-freeze/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/dong-goi-chuong-trinh-python-cx-freeze/","excerpt":"cx_Freezeを使用して python プログラムをexe化するチュートリアル。このレッスンの後、cx_Freeze を使用してPython ファイルを exe に変換し、Python プログラムをexe化する方法を学習します。","text":"cx_Freezeを使用して python プログラムをexe化するチュートリアル。このレッスンの後、cx_Freeze を使用してPython ファイルを exe に変換し、Python プログラムをexe化する方法を学習します。 関連記事 : Pyinstallerでpythonプログラムをexe化する Pythonのcx_FreezeとはPythonのcx_FreezeとはPythonのスクリプトファイル(.py)から実行可能ファイル(.exe)を作成するモジュールです。cx_Freeze を使用して、python ファイルを exe に変換し、python プログラムをexe化できます。 cx_Freeze の歴史は古く、2003 年から 2.1 バージョンがリリースされ、現在に至るまで更新が続けられています。 Web サイトslant.coによると、cx_Freeze は Python プログラムのexe化をサポートするモジュールのリストで 2 位にランクされており、兄弟の Pyinstaller と比較した場合、ほとんどのユーザーは cx_Freeze を選択します。 Python スクリプトがある場合は、cx_Freeze を使用して、それを使用するプラットフォームで実行可能ファイルに変換できます。Python 自体が実行されている任意のプラットフォームで実行されます。ただし、クロスコンパイルできないことに注意してください。that it can’t cross-compile. cx_Freeze には、python プログラムを非常に迅速にexe化するのに役立つという利点があり、コンピューター リソースを消費し、移動が容易な小さな出力プログラムを使用できます。統計によると、cx_Freeze によってexe化された python プログラムは、Pyinstaller よりも 10 倍軽くなる可能性があります。 ただし、cx_Freeze は軽量でシンプルな Python プログラムしかexe化できず、NumPy、SciPy、OpenCV、matplotlib、PyQT などのサードパーティ製ライブラリを使用しないため、軽さは cx_Freeze の欠点でもあります。これらを使用する Python プログラムをexe化する必要があります。 cx_Freeze の代わりに Pyinstallerを使用する必要があります。 cx_Freeze の公式ドキュメントサイト で cx_Freeze の詳細を読むこともできます。 cx_Freeze を使用して Python プログラムをexe化cx_Freeze をインストールする次のコマンドを使用して cx_Freeze を Python にインストールします。: Copypython -m pip install cx_Freeze 次のように、インストールする cx_Freezee のバージョンを指定することもできます。 Copypip install cx-Freeze==6.3 Python によって cx_Freeze がインストールされ、[Successfully installed cx-Freeze] という行が表示されれば、インストールは成功です。 exe化するpythonプログラムを準備するexe化するpythonプログラムのソースコードを書いて、exe化前にpyファイルに保存します。 たとえば、このプログラムを再利用して、 for in range python レッスンで Python の乗算表を出力し、次のように特定の回数ループします。 Copynum = 1for i in range(9): i += 1 print(&quot;2 * &quot; + str(i) + &quot; = &quot; + str(2*i))input_exit = input(&quot;nhap exit de thoat:&quot;) プログラムをtest.pyファイル名で保存し、次の手順に進みます。 setup.py を作成cx_Freeze で python プログラムをexe化するには、指定された python ファイルを exe 形式に変換するsetup.pyファイルを作成する必要があります。このsetup.pyファイルには、次の内容が含まれている必要があります。 Copy# coding: utf-8# cx_Freeze を使用して Python プログラムをexe化 import sysfrom cx_Freeze import setup, Executable base = None# GUI= activate, CUI= not activate # if sys.platform == &#x27;win32&#x27; : base = &#x27;Win32GUI&#x27; # exeに変換するpythonファイル名を指定exe = Executable(script = &#x27;test.py&#x27;, base = base) # Set upsetup(name = &#x27;cx_Freeze&#x27;, version = &#x27;0.1&#x27;, description = &#x27;converter&#x27;, executables = [exe]) そこで、Executable関数のscript引数に変換したいexe名を指定する必要があります。 上記のファイルを setup.pyという名前で保存した後、このファイルと上記で作成したtest.pyファイルを同じフォルダーに配置して、ファイルのexe化に進むことができるようにします。例えば： |data/ |--test.py |--setup.py Pythonファイルをexeに変換し、プログラムをパッケージsetup.pyの準備が完了したら、次のコマンドでファイルを実行して、python ファイルを exe に変換し、プログラムをパッケージ化します。 Copypython setup.py build cx_Freeze は、次のように、exe化するプログラムを実行するために必要なファイルとディレクトリの構築に進みます。 exe化された python プログラムを確認するインストールが完了すると、exe化化されたプログラムは次のようにbuild &gt; exe.win-amd64-3.8 ディレクトリに配置されます。 |data/ |--build | |--exe.win-amd64-3.8 | |-- lib | |-- python3.dll | |-- python38.dll | |-- test.exe |--test.py |--setup.py また、ファイルtest.pyも上記のtest.exeファイル名でexe化されています。 test.exeファイルを開いて結果を確認してみましょう。 プログラムを圧縮した後、フォルダーの名前exe.win-amd64-3.8を任意の名前に変更し、このフォルダーをコンピューターでスタンドアロンの exe プログラムとして使用できます。 まとめ上記の Kiyoshi は、すでにcx_Freeze を使用して Python プログラムをexe化化する方法について説明しています。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Đóng gói chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Dong-goi-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Dong-goi-chuong-trinh-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Đóng gói chương trình python","slug":"Dong-goi-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Dong-goi-chuong-trinh-python/"}]},{"title":"SubprocessによるPythonから別のコマンドまたはアプリケーションを呼び出す","slug":"python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/goi-lenh-hoac-ung-dung-ben-ngoai-tu-python","date":"2022-11-16T09:10:47.000Z","updated":"2022-11-16T14:03:11.560Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/goi-lenh-hoac-ung-dung-ben-ngoai-tu-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/dong-goi-chuong-trinh-python/goi-lenh-hoac-ung-dung-ben-ngoai-tu-python/","excerpt":"Python でsubprocess モジュールを使用して、Pythonから別のコマンドまたはアプリケーションを呼び出す手順。このレッスンの後、Python での同期および非同期処理のために subprocess モジュールでsubprocess.run ()およびsubprocess.Popen( )を使用する方法も学びます。","text":"Python でsubprocess モジュールを使用して、Pythonから別のコマンドまたはアプリケーションを呼び出す手順。このレッスンの後、Python での同期および非同期処理のために subprocess モジュールでsubprocess.run ()およびsubprocess.Popen( )を使用する方法も学びます。 PythonのSubprocessとはPythonのSubprocessとはPython プログラムからコマンドやその他のアプリケーションを実行し、その実行結果を取得するのに役立つモジュールです。Subprocessは サブプロセスモジュールとも呼ばれ、Python 標準ライブラリに含まれています。 サブプロセスは、Python スクリプト内からコマンドまたは外部アプリケーションを呼び出すことができます。たとえば、サブプロセスを使用すると、次のことができます。 Python から CMD コマンドを実行する Python から 7z ファイル圧縮プログラムを呼び出す Python から AWS CLI コマンドを実行する Python から Web デプロイ コマンドを実行する Python でシェル コマンドを実行する Python の古いバージョンでは、call()、check_call()、check_output()、Popen() などの多くの関数で Python の subprocessを使用していました。ただし、Python 3.5 以降、Python のサブプロセスは作り直され、すべてのケースに共通の関数 subprocess.run() と、より柔軟なオプションを提供するクラスを使用するだけで済みます。開発者にとっては、subprocess.Popen() のみ使えば良いです。 . Python での Subprocess.run() と同期処理subprocess.run() 関数は、Python から別のコマンドまたはアプリケーションを呼び出すときに同期プロセスを作成するのに役立ちます。つまり、別のコマンドまたはアプリケーションが呼び出された場合、プログラムで次の python コマンドを実行する前に、それが終了するのを待つ必要があります。この同期処理については、次のセクションで説明します Python の subprocess.run() 関数の構文次の構文で subprocess.run() 関数を使用します。 import subprocesssubprocess.run ([“実行コマンド”], オプション) そこで： 実行コマンド: Pythonからのアプリケーション呼び出しまたはその他のステートメントです。たとえば、Python からの 7z ファイル圧縮プログラムの呼び出しは、 「C:/Program Files/7-Zip/ 7z.exe a test.7z」、または CMD コマンドを使用して、windows またはlsなどの Linux で。 オプション: サブプロセスを使用するときに追加できる指定子です。 Python で subprocess を使用する際に指定できる一般的なオプションは次のとおりです。 オプション 機能 サンプル 標準入力 標準入力。入力データを取得する必要がある場合に使用します stdin = subprocess.DEVNULL 標準出力 標準出力。コマンドの実行結果を取得する必要がある場合に使用します stdout = subprocess.PIPE 標準エラー 標準エラー。コマンドの実行結果を取得する必要がある場合に使用します。 stderr = subprocess.PIPE シェル シェルコマンドの実行時に使用 shell = True 入力 アプリケーションでの Python 変数の使用 input=input_text cwd 実行ディレクトリを指定 cwd=’data/user’ 関数の戻り値は、CompletedProcess クラスのインスタンスになります。returncode、stdout、argsなどのこのクラスに関連付けられたプロパティを使用して、結果から情報を抽出できます。 ここでは、 subprocess.run() を使用して Python から別のコマンドまたはアプリケーションを呼び出す具体的な例を示します。 subprocess.run() 関数を使用して Python から CMD コマンドを呼び出すたとえば、次のようなディレクトリがあります。 |test |--user | |--username | |--sample.py | |--test.py このディレクトリのファイル名とサブディレクトリのリストを取得するには、通常WindowsのdirまたはLinuxのlsで次のようにコマンドを実行します。 Copy(base) D:\\test\\user&gt;dirVolume in drive D is OSDirectory of D:\\test\\user2021/06/16 13:19 &lt;DIR&gt; .2021/06/16 13:19 &lt;DIR&gt; ..2021/05/10 08:28 3,059 sample.py2021/05/18 16:53 119 user.csv2021/05/14 10:31 &lt;DIR&gt; username サブプロセスを使用すると、Python から上記のdirコマンドを次のように実行することで、同じことができます。 Copyimport subprocessresult = subprocess.run(&quot;dir&quot;, shell=True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)print(result.stdout.decode(&quot;cp932&quot;)) さらに、結果に関連付けられたプロパティを使用して、次のように詳細情報を取得することもできます。 Copyprint(result.returncode) print(result.args) 結果： subprocess.run() 関数を使用して、Python から他のアプリケーションを呼び出す別の例として、cx_Freeze を使用して Python プログラムをEXE化という記事で、Python ファイルを exe に変換し、 Python でタイム テーブルを出力するプログラムを作成する例を通して Python プログラムをパッケージ化する方法を学びました。 例えば【かけ算九九表示】のプログラムをpyからexe化済みとします。サブプロセスを使用すると、次のようにこのexeファイルを Python から直接呼び出すことができます。 Copyimport subprocesscmd = &quot;D:/test/user/bang-cuu-chuong/sample.exe&quot;result = subprocess.run(cmd, shell=True) 結果： 私たちがパッケージ化したアプリケーションだけでなく、コンピューター上で実行される他のすべてのアプリケーションを Python から呼び出すこともできます。たとえば、次のように記述して、python からファイル圧縮プログラム7zを呼び出すことができます。 Copyimport subprocesscmd = [&quot;C:/Program Files/7-Zip/7z.exe&quot;, &#x27;a&#x27;, &#x27;Test.7z&#x27;, &#x27;Test&#x27;, &#x27;-mx9&#x27;]result = subprocess.run(cmd, shell=True) または、単純に、次のように記述して Python から Excel ファイルを開くことができます。 Copyimport subprocesscmd = &quot;sample.xlsx&quot;,result = subprocess.run(cmd, shell=True) subprocess.run() 関数を使用して、別のファイルから Python プログラムを呼び出しますsubprocess.run() 関数を使用してPython スクリプトから別 スクリプトのを呼び出すこともできます。 たとえば、Python でかけ算九九出力するsample.pyプログラムのソース コードは次のとおりです。 Copyfor i in range(9): i += 1 print(&quot;2 * &quot; + str(i) + &quot; = &quot; + str(2*i)) 次のように subprocess.run() を使用して、test.pyファイルからsample.pyファイルに記述されたプログラムを実行することができます。 Copyimport subprocesscmd = &#x27;python&#x27;, &quot;D:/test/user/sample.py&quot;result = subprocess.run(cmd, shell=True) Python での同期処理に subprocess.run() 関数を使用するPython での同期処理とは。ステートメントは順番に実行され、次のステートメントを実行する前に前のステートメントを終了する必要があります。subprocess.run() を使用すると、次の例のように Python で同期処理を行うことができます。 上記sample.pyファイルを利用します。 Copyimport subprocesscmd = &quot;sample.xlsx&quot;,result = subprocess.run(cmd, shell=True)print(&quot;end&quot;) 上記のソース コードでは、sample.pyファイルからサブプロセスを呼び出す部分と、コマンドを実行して画面に出力する部分の 2 つの部分で構成されます。 subprocess.run() は同期プロセスであるため、先陣のサブプロセスsample.pyが実行され、このサブプロセスが終了した後、画面表示コマンドが次のように処理されます。 ## クラス subprocess.Popen() と Python での非同期処理subprocess.Popen() クラスは、Python から別のコマンドまたはアプリケーションを呼び出すときに非同期プロセスを作成するのに役立ちます。つまり、別のコマンドまたはアプリケーションが呼び出された後でも、呼び出されたアプリケーションがまだ実行されている間に、他の python コマンドを処理したり、アプリケーションの一時的な結果を処理したりできます。 subprocess.Popen() クラスの構文は、subprocess.run() 関数の構文と似ています。また、subprocess.Popen() クラスはsubprocess.run() 関数と同様に、 Python から CMD コマンドを呼び出す、 Pythonから他のアプリケーションを呼び出す、またはPython プログラムを呼び出すために使用されます。 import subprocessresult = subprocess.Popen ([“実行コマンド”], オプション) Python での非同期処理に subprocess.Popen() クラスを使用Python での subprocess.Popen() による非同期処理を明確にするために、上記の例のsample.pyファイルに記述されたプログラムを、次の別のスクリプトに記述されたsubprocess.Popen() を使用してコールバックします。 Copyimport subprocesscmd = &quot;python&quot;,&quot;sample.py&quot;proc = subprocess.Popen(cmd, shell=True)print(&quot;end&quot;) subprocess.run() とは異なり、subprocess.Popen() は非同期処理であるため、sample.py ファイルのサブプロセスと画像出力コマンドは並行して処理されます。画像出力コマンドの処理速度がより速いため、最初に次のように出力を画面に出力します。 算九九出力の結果の前にendが先に出力されたことはっきりとわかりますよね? 上記の subprocess.run() 関数を使用した Pythonでの同期処理の結果と比較してください。 subprocess.Popen() クラスのメソッドの使用subprocess.Popen() を使用するための構文は subprocess.run() の構文と似ていますが、これら 2 つのメソッドによって返される結果はまったく異なることに注意してください。 CompletedProcessクラスのインスタンスを返す subprocess.run() 関数とは異なり、subprocess.Popen () クラスは、柔軟な処理メソッドがアタッチされたコンストラクターを返します。returncode、stdout、subprocess.run() 関数の argsなどのプロパティを使用できるだけでなく、Popen.poll()、Popen.terminate()、Popen.communicate()、または Popen.kill()を使用することも出来ます。 この機能により、subprocess.Popen() は、サブプロセスの実行をチェックする、サブプロセスを途中で停止する、プロセスが実行されるのを待つなど、開発者向けのコマンド処理のためのより多くのオプションを提供します。 たとえば、communication() メソッドを使用して、サブプロセスの実行が終了し、入力と出力を受け取るのを待ってから、次のようにメイン プログラムで次のコマンドを実行できます。 Copyimport subprocesscmd = &quot;python&quot;,&quot;sample.py&quot;proc = subprocess.Popen(cmd, shell=True)result = proc.communicate()print(result)print(&quot;end&quot;) その結果、sample.pyプログラムが実行されてから print コマンドが実行され、入出力データが結果変数に割り当てられ、次のようにsubprocess.run()関の数結果と同様に画面に出力されます。 subprocess.Popen() クラスのメソッドの詳細な使用法については、docs.python.org/で学習できます。 Python で Zip ファイルを圧縮するsubprocess.Popen()のcommunicate() メソッドの別の特定の使用法は、7z ファイル圧縮プログラムを呼び出し、python を使用して zip ファイルを作成することです。 Windows オペレーティング システムで、コンピューターに 7zソフトウェアがインストールされている場所がわかっている場合( 「C:/Program Files/7-Zip/7z.exe」など)、関数 zip を使用して、次のようにzip ファイルを自動的に圧縮できます。 Copydef sevenzip(filename, zipname): system = subprocess.Popen([&quot;C:/Program Files/7-Zip/7z.exe&quot;, &quot;a&quot;, zipname, filename]) return(system.communicate()) ここで、zipnameは作成された圧縮ファイルのパスと、filenameは圧縮されるフォルダーのパスがあります。 たとえば、上記の関数を呼び出してサンプルディレクトリを圧縮し、次のようにsample.zipを作成できます。 Copyzipname = &quot;D:/code/sample.zip&quot;filename = &quot;D:/code/sample&quot;sevenzip(filename, zipname) 同様に、コンピューターにインストールした後、次のように python の zip ファイル圧縮関数を使用して、Ubuntu オペレーティング システムで 7z ファイル圧縮ソフトウェアを呼び出すこともできます。 Copydef sevenzip(filename, zipname): system = subprocess.Popen([&quot;7z&quot;, &quot;a&quot;, zipname, filename]) return(system.communicate()) ここでの違いは、Windows では 7z プログラムの実行可能ファイルへのパスを指定する必要がありますが、Ubuntu では7zコマンドを直接記述するだけでよいということです。 subprocess.Popen() と subprocess.run() の違い上で Kiyoshi が分析したように、Python から別のコマンドまたはアプリケーションを呼び出す必要がある場合はすべて subprocess.run() を使用し、必要な場合は subprocess.Popen() を使用します。Subprocess.run() は単純な関数のみを必要とする平均的なユーザー向けに設計されており、subprocess.Popen() は開発者向けにより柔軟なオプションを提供します。 ただし、上記の柔軟性の違いとは別に、subprocess.Popen() と subprocess.run() の最大の根本的な違いは、pythonでは subprocess.run() が同期処理で、subprocess.Popen() が非同期処理であることです。 subprocess.run()は同期的であるため、subprocess.run() から呼び出されたアプリケーションまたはコマンドが終了していない場合、Python はプログラム内の次の命令を実行できません。プログラムの処理を続行するには、終了するまで待つ必要があります。 一方、subprocess.Popen()は非同期処理であるため、他のタスクを並行して実行したり、アプリケーションの終了を待っている間に受け取った結果を処理したりできます。 したがって、プログラムの要件に応じて、これら 2 つの方法のいずれかを合理的に選択して、Python からコマンドまたは別のアプリケーションを呼び出す必要があります。 まとめ上記 Kiyoshi は、Python で subprocess モジュールを使用して Python から別のコマンドまたはアプリケーションを呼び出す方法と、subprocess モジュールで subprocess.run() および subprocess.Popen() を使用して同期処理と Python での非同期処理を行う方法を示しました。 . レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Đóng gói chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Dong-goi-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Dong-goi-chuong-trinh-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Đóng gói chương trình python","slug":"Dong-goi-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Dong-goi-chuong-trinh-python/"}]},{"title":"Pythonでcsvファイルを書き込む","slug":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/ghi-file-csv-trong-python","date":"2022-11-16T08:58:20.000Z","updated":"2022-11-16T14:03:06.757Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/ghi-file-csv-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/ghi-file-csv-trong-python/","excerpt":"Python で CSV ファイルを処理する方法について説明します.csv.writer関数やcsv.DictWriter クラスなど使用しpython で csv ファイルを書き込む方法を学習します。また、CSV ファイルの挿入、引用符を含む CSV ファイルの作成、ヘッダーを含む CSV ファイルの作成など、Python で csv ファイルを作成する方法も学びます。","text":"Python で CSV ファイルを処理する方法について説明します.csv.writer関数やcsv.DictWriter クラスなど使用しpython で csv ファイルを書き込む方法を学習します。また、CSV ファイルの挿入、引用符を含む CSV ファイルの作成、ヘッダーを含む CSV ファイルの作成など、Python で csv ファイルを作成する方法も学びます。 Pythonでcsvファイルを書き込む | csv.writerPythonでcsvファイルにリストを書き込むPython で csv ファイルにリストを書き込むには、まずモードwでopen()関数またはのwithステートメントでファイルを開き、次にcsv.writer()関数で開いた csv ファイルを書き込む必要があります。 Copywith open(&#x27;./user/user.csv&#x27;,&#x27;w&#x27;) as f: writer = csv.writer(f) writer.writerow([0, 1, 2]) writer.writerow([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]) wモードでファイルを開くので、CSVファイルが既に存在する場合は古い内容を削除し、新しい内容をCSVファイルに上書きしますのでご注意ください。 open() 関数でファイルを開いた後、ファイル オブジェクトを取得し、それをf変数 に割り当てます。次に、f変数を csv.writer()関数の引数として指定します。結果は、コンテンツを書き込むことができるライター オブジェクト(writer object)が生成されます。 このライター オブジェクトを作成した後、このライター オブジェクトにwriterow() などのメソッドを使用して、Python でリストから csv ファイルにコンテンツを書き込むことができます。 上記の例では、2 行分のコンテンツを csv ファイルに書き込んでいます。次のコマンドで記録された内容を確認します。 Copywith open(&#x27;./user/user.csv&#x27;,&#x27;w&#x27;) as f: print(f.read())# 0,1,2# a,b,c 上記の writerow() メソッドの引数を多次元リストとして指定すると、多次元リスト内の各リストがcsv ファイルの各行としてに書き込まれます。 Copyl = [[11, 12, 13, 14], [21, 22, 23, 24], [31, 32, 33, 34]]print(l)# [[11, 12, 13, 14], [21, 22, 23, 24], [31, 32, 33, 34]]with open(&#x27;./user/user.csv&#x27;, &#x27;w&#x27;) as f: writer = csv.writer(f) writer.writerows(l)with open(&#x27;./user/user.csv&#x27;) as f: print(f.read())# 11,12,13,14# 21,22,23,24# 31,32,33,34 コンテンツを挿入 | mode a既存の csv ファイルにコンテンツを挿入するには、aモードで open()関数を使用して csv ファイルを開きます。csvファイルの書き方については、上記と同様にcsv.write関数やwriterow()やwriterows()などのメソッドを使ってPythonでcsvファイルを書き込んでいます。 Copywith open(&#x27;./user/user.csv&#x27;, &#x27;a&#x27;) as f: writer = csv.writer(f) writer.writerow([&#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;])with open(&#x27;./user/user.csv&#x27;) as f: print(f.read())# 0,1,2# a,b,c# X,Y,Z 区切り文字を指定デフォルトでは、csv ファイルの区切り文字はカンマになります。ただし、記録中のcsvファイルの区切り文字を変更したい場合は、csv.writer関数に区切り文字引数を指定してください。 たとえば、次のように区切り文字をタブ文字\\tとして指定します。 Copywith open(&#x27;./user/user.tsv&#x27;, &#x27;w&#x27;) as f: writer = csv.writer(f, delimiter=&#x27;\\t&#x27;) writer.writerows(l)with open(&#x27;./user/user.tsv&#x27;) as f: print(f.read())# 11 12 13 14# 21 22 23 24# 31 32 33 34 区切り文字をスペースに置き換えたい場合は、delimiter=&#39; &#39;で指定してください。 二重引用符の処理デフォルトでは、csv ファイルを書き込むときに、a,b,cなどコンマを含む文字列は、次のように二重引用符で囲まれてcsvファイルに書き込まれます。 Copyl = [[0, 1, 2], [&#x27;a,b,c&#x27;, &#x27;x&#x27;, &#x27;y&#x27;]]with open(&#x27;./user/user_quote.csv&#x27;, &#x27;w&#x27;) as f: writer = csv.writer(f) writer.writerows(l)with open(&#x27;./user/user_quote.csv&#x27;) as f: print(f.read())# 0,1,2# &quot;a,b,c&quot;,x,y Python で csv ファイルに書き込まれるすべての文字列リテラルに二重引用符を追加する場合は、次のように csv.writer 関数でquoting=csv.QUOTE_ALL引数を指定します。 Copywith open(&#x27;./user/user_quote_all.csv&#x27;, &#x27;w&#x27;) as f: writer = csv.writer(f, quoting=csv.QUOTE_ALL) writer.writerows(l)with open(&#x27;./user/user_quote_all.csv&#x27;) as f: print(f.read())# &quot;0&quot;,&quot;1&quot;,&quot;2&quot;# &quot;a,b,c&quot;,&quot;x&quot;,&quot;y&quot; また、数字以外のすべての文字列に二重引用符を追加したい場合、次のようにquoting=csv.QUOTE_NONNUMERIC引数で指定することもできます。 Copywith open(&#x27;./user/user_quote_nonnumeric.csv&#x27;, &#x27;w&#x27;) as f: writer = csv.writer(f, quoting=csv.QUOTE_NONNUMERIC) writer.writerows(l)with open(&#x27;./user/user_quote_nonnumeric.csv&#x27;) as f: print(f.read())# 0,1,2# &quot;a,b,c&quot;,&quot;x&quot;,&quot;y&quot; csv.QUOTE_NONEを指定すると、csv ファイルへの書き込み時にすべての文字列リテラルが二重引用符で囲まれなくなります。ただし文字列に含まれる区切り文字がある時にも対応できるため、escapechar引数指定する必要があります。 Copywith open(&#x27;./user/user_quote_none.csv&#x27;, &#x27;w&#x27;) as f: writer = csv.writer(f, quoting=csv.QUOTE_NONE, escapechar=&#x27;\\\\&#x27;) writer.writerows(l)with open(&#x27;./user/user_quote_none.csv&#x27;) as f: print(f.read())# 0,1,2# a\\,b\\,c,x,y 最後に、デフォルトでは二重引用符が使用されますが、次のように指定して別のものに変更することもできます。 Copywith open(&#x27;./user/user_quote_char.csv&#x27;, &#x27;w&#x27;) as f: writer = csv.writer(f, quotechar=&quot;&#x27;&quot;) writer.writerows(l)with open(&#x27;./user/user_quote_char.csv&#x27;) as f: print(f.read())# 0,1,2# &#x27;a,b,c&#x27;,x,y csvファイルに改行文字を書き込む場合によっては&#39;a\\nb&#39;など改行文字を含む文字列を csv ファイルに書き込む必要があります。 その場合、以下のように、その文字列を二重引用符で囲む必要があります。 Copyl = [[0, 1, 2], [&#x27;a\\nb&#x27;, &#x27;x&#x27;, &#x27;y&#x27;]]with open(&#x27;./user/user_linebreak.csv&#x27;, &#x27;w&#x27;, newline=&#x27;&#x27;) as f: writer = csv.writer(f) writer.writerows(l)with open(&#x27;./user/user_linebreak.csv&#x27;) as f: print(f.read())# 0,1,2# &quot;a# b&quot;,x,y ヘッダーを含むCSVファイルを処理Python でヘッダー付きの csv ファイルを書きたい場合は、 writerow() メソッドを使用して、ヘッダーの内容を csv ファイルに書き込みます。 Copyl = [[11, 12, 13, 14], [21, 22, 23, 24], [31, 32, 33, 34]]print(l)# [[11, 12, 13, 14], [21, 22, 23, 24], [31, 32, 33, 34]]header = [&#x27;&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]index = [&#x27;ONE&#x27;, &#x27;TWO&#x27;, &#x27;THREE&#x27;]with open(&#x27;./user/user_header_index.csv&#x27;, &#x27;w&#x27;) as f: writer = csv.writer(f) writer.writerow(header) for i, row in zip(index, l): writer.writerow([i] + row)with open(&#x27;./user/user_header_index.csv&#x27;) as f: print(f.read())# ,a,b,c,d# ONE,11,12,13,14# TWO,21,22,23,24# THREE,31,32,33,34 結果： Pythonでcsvファイルを書き込む | csv.DictWriter上記では、Python でリストを csv ファイルに書き込む方法を学びました。リストを使用する代わりに、次の構文で csv.DictWriter 関数を使用して、python で csv ファイルに辞書を書き込むこともできます。 csv.DictWriter ( f , fieldnames ) そこで、fはcsvファイルをopen()関数で開いたときに作成されるファイルオブジェクトであり、fieldnamesは辞書のキーの値をcsvファイルのヘッダー行として指定します。 例えば： Copy1 = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;d2 = &#123;&#x27;a&#x27;: 10, &#x27;c&#x27;: 30&#125;with open(&#x27;data/temp/sample_dictwriter.csv&#x27;, &#x27;w&#x27;) as f: writer = csv.DictWriter(f, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]) writer.writeheader() writer.writerow(d1) writer.writerow(d2)with open(&#x27;data/temp/sample_dictwriter.csv&#x27;) as f: print(f.read())# a,b,c# 1,2,3# 10,,30 上記の例でfieldnamesは、辞書に含まれるキーによって指定された [‘a’, ‘b’, ‘c’]によってしてされます。次に writeheader() メソッドを使用して、これらのキー値を csv ファイルのヘッダー行に書き込みます。 辞書内の各値はwriterow() メソッドを使用してそれらを取得し、csv ファイルの各行に書き込みます。また、特定のキーの値が存在しない場合は、10,,30のように空の値が追加されます。 次のように writerows() メソッドを使用して、一括で各行を csv ファイルのに書き込むこともできます。 Copywith open(&#x27;data/temp/sample_dictwriter_list.csv&#x27;, &#x27;w&#x27;) as f: writer = csv.DictWriter(f, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]) writer.writeheader() writer.writerows([d1, d2])with open(&#x27;data/temp/sample_dictwriter_list.csv&#x27;) as f: print(f.read())# a,b,c# 1,2,3# 10,,30 デフォルトでは、辞書に存在するすべてのキーをfieldnames引数に指定する必要があることに注意してください。そうしないと、エラーが発生します。 CopyValueError: dict contains fields not in fieldnames: &#x27;b&#x27; いくつかのキーのみCSVファイルみに書き込みたい場合は、値を書き込むキーを指定後、次のようにextrasaction=&#39;ignore&#39;引数を指定します。 Copywith open(&#x27;data/temp/sample_dictwriter_ignore.csv&#x27;, &#x27;w&#x27;) as f: writer = csv.DictWriter(f, [&#x27;a&#x27;, &#x27;c&#x27;], extrasaction=&#x27;ignore&#x27;) writer.writeheader() writer.writerows([d1, d2])with open(&#x27;data/temp/sample_dictwriter_ignore.csv&#x27;) as f: print(f.read())# a,c# 1,3# 10,30 まとめ上記 Kiyoshi は、Python で CSV ファイルを作成する方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/tags/CSV-EXCEL-JSON-XML-PDF/"}]},{"title":"Pythonでcsvファイルを読み込む","slug":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/doc-file-csv-trong-python","date":"2022-11-16T08:57:20.000Z","updated":"2022-11-16T14:03:06.269Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/doc-file-csv-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/doc-file-csv-trong-python/","excerpt":"Python で CSV ファイルを処理する方法について説明します。Python で csv ファイルをcsv.reader 関数を使用してリストとして、または csv.DictReader クラスを使用して辞書として読み込む方法を学習します。また、引用符を含む、ヘッダーを含む CSV ファイルを開くなどの特殊なケースで Python で csv ファイルを開く方法も学びます。これにより、Python csv ファイルの行、列、およびセルの値を取得できます。","text":"Python で CSV ファイルを処理する方法について説明します。Python で csv ファイルをcsv.reader 関数を使用してリストとして、または csv.DictReader クラスを使用して辞書として読み込む方法を学習します。また、引用符を含む、ヘッダーを含む CSV ファイルを開くなどの特殊なケースで Python で csv ファイルを開く方法も学びます。これにより、Python csv ファイルの行、列、およびセルの値を取得できます。 PythonでCSVファイルを読み込む前にPython で csv ファイルを読み込むには、Python でファイルを開いたり閉じたりするの記事で指示したように、まずは open() 関数を使用するか、 with ステートメントを使用してファイルを開く必要があります。 ファイルを開いてファイル オブジェクトを取得したら、read()メソッドを使用して、テキストファイルと同様に、csvファイルを読み込むことができます。 例えば、ディレクトリのuser.csvと、そこに格納された./user/user.csvのファイルが以下の内容があるとします。 この csv ファイルを開き、次のように txt 形式で csv ファイルの内容を含むオブジェクト ファイルを取得します。 Copywith open(&#x27;./user/user.csv&#x27;) as f: print(f.read())#Name,Old,Color,gender#Yamada,20,black,female#Kiyoshi,30,red,male#Suzuki,40,green,female#Ajinomoto,50,orange,male 上記の例では、csv ファイルの内容の値をカンマ区切りの txt として確認できます。 基本的にはこの段階でpythonでのcsvファイルの読み込みは完了しているのですが、読み込み結果がtxt形式しかないため操作が難しいため、この結果をcsv関数でリストに変換する必要があります。またはcsv.DictReaderクラスを介して辞書形式に変換して、csvファイルのコンテンツを処理する操作を簡単に実行できるようにします。 そのためには、csv モジュールで csv.reader() 関数を使用する必要があります。 Pythonでcsvファイルを読み込む | csv.reader()Python の csv.reader 関数csv.reader() 関数はcsv モジュールの組み込み関数であり、Pythonで CSV ファイルを読み込む専用の関数です。 PythonでCSVファイルを操作したい場合には必須の機能です。 csv.reader() 関数を使用できるようにするには、次のように csv モジュールをプログラムにインポートする必要があることに注意してください。 Copyimport csv csv.reader 関数を使用して Python でCSVファイルを読み込む構文は次のとおりです。 csv.reader(f) そこで、fはopen()関数またはwith ステートメントでファイルを正常に開いたときに返されるファイル オブジェクトです。 csv.reader() 関数はイテレータを返します。イテレータにはリストが含まれており、各リストは CSV ファイルから読み取られた 1 行の内容です。 具体的な例として、次のように csv.reader 関数を使用して CSV ファイルを読み取ります。 Copyimport csvwith open(&#x27;./user/user.csv&#x27;) as f: reader = csv.reader(f) csv ファイルを読み取り、csv.reader() 関数を使用して結果をリストとして保存上記のように、csv.reader() 関数はイテレータを返します。イテレータには、CSV ファイルから読み取られた行の内容である各リストを含むリストが含まれています。 このイテレータを取得したら、for ループを使用して、その反復子内から CSV ファイル内の行を含むリストを取得できます。次に、Python のリスト処理関数とメソッドを使用して、CSV ファイルのコンテンツを処理することができます。 具体的な例として、次の内容を持つファイル./user/user.csvがあるとします。 次のように、csv.reader() 関数を使用してこの csv ファイルを読み取り、反復子を取得して、CSV ファイルの行を含むリストを出力します。 Copyimport csvwith open(&#x27;./user/user.csv&#x27;) as f: reader = csv.reader(f) for row in reader: print(row)#[&#x27;Name&#x27;, &#x27;Old&#x27;, &#x27;Color&#x27;, &#x27;gender &#x27;]#[&#x27;Yamada&#x27;, &#x27;20&#x27;, &#x27;black&#x27;, &#x27;female&#x27;]#[&#x27;Kiyoshi&#x27;, &#x27;30&#x27;, &#x27;red&#x27;, &#x27;male&#x27;]#[&#x27;Suzuki&#x27;, &#x27;40&#x27;, &#x27;green&#x27;, &#x27;female&#x27;]#[&#x27;Ajinomoto&#x27;, &#x27;50&#x27;, &#x27;orange&#x27;, &#x27;male&#x27;] CSV ファイルの各行が読み込まれ、その行の各列の値は要素として結果リストに保存されることがわかります。 イテレータでは、結果は個別に存在するリストであるため、これらのリストを一般的に使用するには、次のように Python でリスト内包表記 を使用して、csv ファイルの内容全体を表す 2 次元リストにそれらを格納する必要があります。 Copywith open(&#x27;data/src/sample.csv&#x27;) as f: reader = csv.reader(f) l = [row for row in reader]print(l)#[[&#x27;Name&#x27;, &#x27;Old&#x27;, &#x27;Color&#x27;, &#x27;gender &#x27;], [&#x27;Yamada&#x27;, &#x27;20&#x27;, &#x27;black&#x27;, &#x27;female&#x27;], [&#x27;Kiyoshi&#x27;, &#x27;30&#x27;, &#x27;red&#x27;, &#x27;male&#x27;], [&#x27;Suzuki&#x27;, &#x27;40&#x27;, &#x27;green&#x27;, &#x27;female&#x27;], [&#x27;Ajinomoto&#x27;, &#x27;50&#x27;, &#x27;orange&#x27;, &#x27;male&#x27;]] csvファイルの指定した行、列、セルの値を取得上記で作成した二次元リストの要素にアクセスすることで、csv ファイルで指定された行、列、セルの値を取得できます。たとえば、次のように csv ファイルの 1 行目と 2 行目の値を取得します。 Copyprint(l[0])#&gt;[&#x27;Name&#x27;, &#x27;Old&#x27;, &#x27;Color&#x27;, &#x27;gender &#x27;]print(l[1])#&gt;[&#x27;Yamada&#x27;, &#x27;20&#x27;, &#x27;black&#x27;, &#x27;female&#x27;] 指定された行と列を持つセルを取得する場合は、次のように記述します。 Copyprint(l[0][0])#&gt;genderprint(l[1][2])#&gt;female CSV ファイルの指定された列の値を取得する場合は、Python でリストの行と列を入れ替えるコマンドを次のように記述して適用する必要があります。: Copyl_hoandoi = [list(x) for x in zip(*l)]print(l_hoandoi)#&gt;[[&#x27;Name&#x27;, &#x27;Yamada&#x27;, &#x27;Kiyoshi&#x27;, &#x27;Suzuki&#x27;, &#x27;Ajinomoto&#x27;], [&#x27;Old&#x27;, &#x27;20&#x27;, &#x27;30&#x27;, &#x27;40&#x27;, &#x27;50&#x27;], [&#x27;Color&#x27;, &#x27;black&#x27;, &#x27;red&#x27;, &#x27;green&#x27;, &#x27;orange&#x27;], [&#x27;gender &#x27;, &#x27;female&#x27;, &#x27;male&#x27;, &#x27;female&#x27;, &#x27;male&#x27;]]print(l_hoandoi[0])#[&#x27;Name&#x27;, &#x27;Yamada&#x27;, &#x27;Kiyoshi&#x27;, &#x27;Suzuki&#x27;, &#x27;Ajinomoto&#x27;]print(l_hoandoi[1])#[&#x27;Old&#x27;, &#x27;20&#x27;, &#x27;30&#x27;, &#x27;40&#x27;, &#x27;50&#x27;] 上記の値はすべて文字列形式であることに注意してください。したがって、上記の値を数値として使用する必要がある場合は、文字列を python で数値に変換する必要があります。 Copyprint(l[1][1])#&gt;20print(type(l[1][1]))#&gt;&lt;class &#x27;str&#x27;&gt;float(l[1][1])int(l[1][1]) delimiter を指定デフォルトで、csv.readerクラスを使用しPython で csv ファイルを読み込むときに、コンマを区切り文字として使用します。また、カンマは CSV ファイルのデフォルトの区切り文字とも見なされます。ただし、一部の CSV ファイルでは、別の記号を使用してカンマを区切り記号として使用されることができます。この場合、delimiter引数区切り記号を変更する必要があります。 たとえば、次のようにスペース区切り文字を含む CSV ファイルを読み込みます。 Copywith open(&#x27;./client/sample_space.txt&#x27;) as f: print(f.read())# 11 12 13# 21 22 23# 31 32 33 この CSV ファイルを読み込むには、次のようにdelimiter=&#39; &#39;で指定します。 Copywith open(&#x27;./client/sample_space.txt&#x27;) as f: reader = csv.reader(f, delimiter=&#x27; &#x27;) l = [row for row in reader]print(l)# [[&#x27;11&#x27;, &#x27;12&#x27;, &#x27;13&#x27;], [&#x27;21&#x27;, &#x27;22&#x27;, &#x27;23&#x27;], [&#x27;31&#x27;, &#x27;32&#x27;, &#x27;33&#x27;]] 同様に、タブ区切り形式の CSV ファイルに遭遇した場合は、delimiter=&#39;\\t&#39;で指定するだけで済みます 二重引用符の処理一部の CSV ファイルでは、次のように列の値が二重引用符で囲まれて保存されます。 Copywith open(&#x27;./client/sample_quote.txt&#x27;) as f: print(f.read())# 1,2,&quot;3&quot;# &quot;a,b,c&quot;,x,y この場合、デフォルトで Class csv.reader() が引用符を削除し、中間の値のみを保持するのに役立つため、特別な注意を払う必要はありません。 Copywith open(&#x27;./client/sample_quote.txt&#x27;) as f: reader = csv.reader(f) for row in reader: print(row)# [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]# [&#x27;a,b,c&#x27;, &#x27;x&#x27;, &#x27;y&#x27;] ただし、これらの引用符を結果に保持する必要がある場合はquoting=csv.QUOTE_NONEの引数を追加します。 Copywith open(&#x27;./client/sample_quote.txt&#x27;) as f: reader = csv.reader(f, quoting=csv.QUOTE_NONE) for row in reader: print(row)# [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;&quot;3&quot;&#x27;]# [&#x27;&quot;a&#x27;, &#x27;b&#x27;, &#x27;c&quot;&#x27;, &#x27;x&#x27;, &#x27;y&#x27;] Pythonでヘッダーを含むCSVファイルを処理する一部の CSV ファイルには、次のヘッダーが含まれています。: ファイルを txt として開いた後、結果は次のようになります。 Copycsv_path = &#x27;./user/sample_header.csv&#x27;with open(csv_path) as f: print(f.read())#,Old,Color,Gender#Yamada,20,black,female#Kiyoshi,30,red,male#Suzuki,40,green,female#Ajinomoto,50,orange,male ファイルのヘッダー行がカンマで始まることがわかります。Python でこの csv ファイルを読み込む方法は、上記のように特別なことは何も変更しません。 Copyimport csvcsv_path = &#x27;./user/sample_header.csv&#x27;with open(csv_path) as f: reader = csv.reader(f) for row in reader: print(row)#[&#x27;&#x27;, &#x27;Old&#x27;, &#x27;Color&#x27;, &#x27;Gender &#x27;]#[&#x27;Yamada&#x27;, &#x27;20&#x27;, &#x27;black&#x27;, &#x27;female&#x27;]#[&#x27;Kiyoshi&#x27;, &#x27;30&#x27;, &#x27;red&#x27;, &#x27;male&#x27;]#[&#x27;Suzuki&#x27;, &#x27;40&#x27;, &#x27;green&#x27;, &#x27;female&#x27;]#[&#x27;Ajinomoto&#x27;, &#x27;50&#x27;, &#x27;orange&#x27;, &#x27;male&#x27;] 結果の唯一の違いは、空白文字の&#39;&#39;が結果の先頭にのみ追加されることです。 PythonでCSVファイルを辞書として読み込む | csv.DictReaderadercsv ファイルを読み取り、結果を辞書として保存上記では、csv.reader() 関数を使用して CSV ファイルをリストとして読み込む方法を学びました。上記に加えて、次の記述で csv.DictReader クラスを使用して、Python で CSV ファイルを辞書として読み込むこともできます。 Copywith open(&#x27;./user/user.csv&#x27;) as f: reader = csv.DictReader(f) for row in reader: print(row) たとえば、次の内容の csv ファイルがあるとします。 Copywith open(&#x27;./user/user.csv&#x27;) as f: print(f.read())#Name,Old,Color,gender#Yamada,20,black,female#Kiyoshi,30,red,male#Suzuki,40,green,female#Ajinomoto,50,orange,male Pythonでcsv.DictReaderクラスを使ってCSVファイルを読み込むと、デフォルトではファイルの1行目の値が辞書のキーになります。 Copyimport csvimport pprintcsv_path = &#x27;./user/user.csv&#x27;with open(csv_path) as f: reader = csv.DictReader(f) l = [row for row in reader]pprint.pprint(l) その結果、辞書が返されます。 Copy[&#123;&#x27;Color&#x27;: &#x27;black&#x27;, &#x27;Name&#x27;: &#x27;Yamada&#x27;, &#x27;Old&#x27;: &#x27;20&#x27;, &#x27;gender &#x27;: &#x27;female&#x27;&#125;, &#123;&#x27;Color&#x27;: &#x27;red&#x27;, &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Old&#x27;: &#x27;30&#x27;, &#x27;gender &#x27;: &#x27;male&#x27;&#125;, &#123;&#x27;Color&#x27;: &#x27;green&#x27;, &#x27;Name&#x27;: &#x27;Suzuki&#x27;, &#x27;Old&#x27;: &#x27;40&#x27;, &#x27;gender &#x27;: &#x27;female&#x27;&#125;, &#123;&#x27;Color&#x27;: &#x27;orange&#x27;, &#x27;Name&#x27;: &#x27;Ajinomoto&#x27;, &#x27;Old&#x27;: &#x27;50&#x27;, &#x27;gender &#x27;: &#x27;male&#x27;&#125;] 次に、キーを指定して python 辞書で値を取得することにより、次のように行、列、およびセルの値を取得できます。 Copyprint(l[1])#&gt;&#123;&#x27;Name&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Old&#x27;: &#x27;30&#x27;, &#x27;Color&#x27;: &#x27;red&#x27;, &#x27;gender &#x27;: &#x27;male&#x27;&#125;print(l[1][&#x27;Name&#x27;])#&gt;Kiyoshi CSV ファイルにヘッダー行がない場合、または別のキー値を使用したい場合は、次のようにcsv.DictReaderクラスを使用して csvファイルを読み込むときにfieldnames引数を指定します。 Copyimport csvimport pprintcsv_path = &#x27;./user/user.csv&#x27;with open(csv_path) as f: reader = csv.DictReader(f, fieldnames=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], ) for row in reader: print(row) 結果： Copy&#123;&#x27;a&#x27;: &#x27;Name&#x27;, &#x27;b&#x27;: &#x27;Old&#x27;, &#x27;c&#x27;: &#x27;Color&#x27;, &#x27;d&#x27;: &#x27;gender &#x27;&#125;&#123;&#x27;a&#x27;: &#x27;Yamada&#x27;, &#x27;b&#x27;: &#x27;20&#x27;, &#x27;c&#x27;: &#x27;black&#x27;, &#x27;d&#x27;: &#x27;female&#x27;&#125;&#123;&#x27;a&#x27;: &#x27;Kiyoshi&#x27;, &#x27;b&#x27;: &#x27;30&#x27;, &#x27;c&#x27;: &#x27;red&#x27;, &#x27;d&#x27;: &#x27;male&#x27;&#125;&#123;&#x27;a&#x27;: &#x27;Suzuki&#x27;, &#x27;b&#x27;: &#x27;40&#x27;, &#x27;c&#x27;: &#x27;green&#x27;, &#x27;d&#x27;: &#x27;female&#x27;&#125;&#123;&#x27;a&#x27;: &#x27;Ajinomoto&#x27;, &#x27;b&#x27;: &#x27;50&#x27;, &#x27;c&#x27;: &#x27;orange&#x27;, &#x27;d&#x27;: &#x27;male&#x27;&#125; Pythonでヘッダーを含むCSVファイルを処理するCSV ファイルにヘッダーが含まれている場合、例: ファイルを txt として開いた後、結果は次のようになります。sau: Copycsv_path = &#x27;./user/sample_header.csv&#x27;with open(csv_path) as f: print(f.read())#,Old,Color,Gender#Yamada,20,black,female#Kiyoshi,30,red,male#Suzuki,40,green,female#Ajinomoto,50,orange,male この CSV ファイルを csv.DictReader クラスで開くと、次のように空白文字&#39; &#39;が出力のキーになります。 Copyimport csvimport pprintcsv_path = &#x27;./user/sample_header.csv&#x27;with open(csv_path) as f: reader = csv.DictReader(f) l = [row for row in reader]pprint.pprint(l) 結果： Copy[&#123;&#x27;&#x27;: &#x27;Yamada&#x27;, &#x27;Color&#x27;: &#x27;black&#x27;, &#x27;Gender &#x27;: &#x27;female&#x27;, &#x27;Old&#x27;: &#x27;20&#x27;&#125;, &#123;&#x27;&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Color&#x27;: &#x27;red&#x27;, &#x27;Gender &#x27;: &#x27;male&#x27;, &#x27;Old&#x27;: &#x27;30&#x27;&#125;, &#123;&#x27;&#x27;: &#x27;Suzuki&#x27;, &#x27;Color&#x27;: &#x27;green&#x27;, &#x27;Gender &#x27;: &#x27;female&#x27;, &#x27;Old&#x27;: &#x27;40&#x27;&#125;, &#123;&#x27;&#x27;: &#x27;Ajinomoto&#x27;, &#x27;Color&#x27;: &#x27;orange&#x27;, &#x27;Gender &#x27;: &#x27;male&#x27;, &#x27;Old&#x27;: &#x27;50&#x27;&#125;] 結果からこの空白を削除するには、次のように Python 辞書で要素の削除コマンドを使用します。 Copywith open(csv_path) as f: reader = csv.DictReader(f) l = [row for row in reader] l_pop=[od.pop(&#x27;&#x27;) for od in l] pprint.pprint(l_pop) 結果： Copy[&#123;&#x27;Color&#x27;: &#x27;black&#x27;, &#x27;Gender &#x27;: &#x27;female&#x27;, &#x27;Old&#x27;: &#x27;20&#x27;&#125;, &#123;&#x27;Color&#x27;: &#x27;red&#x27;, &#x27;Gender &#x27;: &#x27;male&#x27;, &#x27;Old&#x27;: &#x27;30&#x27;&#125;, &#123;&#x27;Color&#x27;: &#x27;green&#x27;, &#x27;Gender &#x27;: &#x27;female&#x27;, &#x27;Old&#x27;: &#x27;40&#x27;&#125;, &#123;&#x27;Color&#x27;: &#x27;orange&#x27;, &#x27;Gender &#x27;: &#x27;male&#x27;, &#x27;Old&#x27;: &#x27;50&#x27;&#125;] まとめ上記 Kiyoshi は、python で csv ファイルを読み込む方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。.","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/tags/CSV-EXCEL-JSON-XML-PDF/"}]},{"title":"PythonでExcelファイルにデータを書き込む","slug":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/ghi-du-lieu-vao-file-excel-trong-python","date":"2022-11-16T08:22:08.000Z","updated":"2022-11-16T14:03:07.012Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/ghi-du-lieu-vao-file-excel-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/ghi-du-lieu-vao-file-excel-trong-python/","excerpt":"Python でExcel ファイルを処理するトピックの次の記事では、 Python でExcel ファイルを作成する方法を学習します。新しい Excel ファイルを作成し、準備したデータを Excel ファイルに書き込む方法を学習します。また、セルの追加、セルの内容の編集、シートの追加、シートの削除とコピーなどの操作で、Python の openpyxl モジュールを使用して、既存の Excel ファイルを開き、編集し、データを書き込む方法も学習します。","text":"Python でExcel ファイルを処理するトピックの次の記事では、 Python でExcel ファイルを作成する方法を学習します。新しい Excel ファイルを作成し、準備したデータを Excel ファイルに書き込む方法を学習します。また、セルの追加、セルの内容の編集、シートの追加、シートの削除とコピーなどの操作で、Python の openpyxl モジュールを使用して、既存の Excel ファイルを開き、編集し、データを書き込む方法も学習します。 Python で Excel ファイルにデータを書き込むには、次の 2 つの方法があります。 新しいExcelファイルを作成し、データを書き込みます 既存のExcelファイルを開いてデータを書き込む Pythonで新しいExcelファイルを作成し、Excelファイルにデータを書き込みPython で Excel ファイルにデータを書き込むには、新しい Excel ファイルを作成し、そこにデータを書き込みます。 Kiyoshi が以下に用意したカスタム関数を使用します。関数で使用されるパラメーターは次のとおりです。 input_detail: Excel ファイルに記録される各行に対応するサブリストを含む 2 次元リスト (リスト内のリスト) として Excel ファイルに書き込まれる内容 output_excel_path: データの保存に使用される新しい Excel ファイルのパス。 Copyimport openpyxldef output_Excel(input_detail,output_excel_path): #作成するExcelファイルの最大行数と列数を決定 row = len(input_detail) column = len(input_detail[0]) #新しいワークブックを作成してアクティブ wb = openpyxl.Workbook() ws = wb.active #for ループを使用して、input_detail のコンテンツを Excel ファイルに書き込み for i in range(0,row): for j in range(0,column): v=input_detail[i][j] ws.cell(column=j+1, row=i+1, value=v) #Excelファイルを保存 wb.save(output_excel_path) 上記の関数を使用して記録内容を Excel ファイルに保存する必要がある場合は、ファイルに書き込む行の内容を含む 2 次元のリストを作成し、それを上記の関数に渡すだけです。例えば： Copyinput_detail =[[&#x27;Sản phẩm&#x27;, &#x27;Mã&#x27;, &#x27;Số lượng&#x27; , &#x27;Giá tiền&#x27;],[&#x27;Áo sơ mi&#x27;, &#x27;1S25H&#x27;, 1, 23000],[&#x27;Quần bò&#x27;, &#x27;3325H&#x27;, 7, 50000],[&#x27;Áo phông&#x27;, &#x27;16G5H&#x27;, 45, 70000]]output_excel_path= &#x27;./user.xlsx&#x27;output_Excel(input_detail,output_excel_path) その結果、次のように指定された 2 次元リストのコンテンツを含む新しいsample.xlsxのファイルが作成されます。 これは、Python を使用してデータベースにアクセスし((たとえば mysql.connector を使用)、そのデータベースに含まれるデータを抽出して、結果をExcel ファイルに保存する場合に特に便利です。次に、そのデータベースから 2 次元リストの形式でデータを取得し、上記の関数に渡すだけです。 また、Excelファイルに書き込む前のデータを取得する過程で、pprint()関数を使うことで、上記の2次元リストのデータをきれいにスマートに表示・確認することもできます。 Python で既存の Excel ファイルを開き、Excel ファイルにデータを書き込む新規にExcelファイルを作成してデータを記録するほか、既存のExcelファイルを開いて、行、列、シートなどの追加や削除などの処理を行い、内容を変更することもできます.元のファイルを編集してコンテンツを保存することもできます. Python で Excel ファイルにデータを書き込むには、まずその Excel ファイルを開いて読み取る必要があります。続行する前に、Python で Excel ファイルを読み取るの記事を参照してください。 それでは実際にやってみましょう。例えば以下のsample.xlsxがあります。 上記の Excel ファイルを開いて、 Sheet1の内容全体を読んだとします。 Copyimport openpyxlimport pprintwb = openpyxl.load_workbook(&#x27;./user/sample.xlsx&#x27;)sheet = wb[&#x27;Sheet1&#x27;] 下のように、Python で Excel ファイルにデータを書き込む操作を実行します。 Excel セルの内容を編集するl | cell()メソッドPython で Excel セルのコンテンツを編集するには、シート内のそのセルにアクセスし、セルの新しい値を置き換えます。 Copysheet[&#x27;C1&#x27;] = &#x27;abc&#x27;sheet[&#x27;D2&#x27;] = 14 cell() メソッドを使用して、編集するセルの位置を指定し、次のように新しい値に置き換えることもできます。 Copy#sửa dữ liệu ô C1sheet.cell(row=1, column=3, value=&#x27;abc&#x27;)#sửa dữ liệu ô D2sheet.cell(row=2, column=5, value=14) 上記の方法は両方とも、セル内のコンテンツを修正し、次のように同じ結果をもたらします。 Copypprint.pprint(list(sheet.values), width=40)# [(None, &#x27;A&#x27;, &#x27;abc&#x27;, &#x27;C&#x27;, None),# (&#x27;one&#x27;, 11, 12, 13, 14),# (&#x27;two&#x27;, 21, 22, 23, None),# (&#x27;three&#x27;, 31, 32, 33, None)] Excelファイルを編集すると、編集結果が画面に出力されることに注意してください。ただし、この結果を Excel ファイルに書き込んでいないため、Excel ファイル自体は変更されていません。 これらの変更を Python で Excel ファイルに記録して保存するには、この記事の最後を参照してください。 Excel セルにテキストを追加 | cell()メソッドセルにコンテンツがない場合は、次のように上記の 2 つの方法で Python を使用して Excel のセルにコンテンツを追加することもできます。 Copy#thêm dữ liệu ô E1sheet.cell(row=1, column=3, value=&#x27;E&#x27;)#thêm dữ liệu ô E2sheet.cell(row=2, column=3, value=15) その結果、E1とE2セルは次のようにデータが追加されます。 Copypprint.pprint(list(sheet.values), width=20)# [(None, &#x27;A&#x27;, &#x27;E&#x27;, &#x27;C&#x27;),# (&#x27;one&#x27;, 11, 15, 13),# (&#x27;two&#x27;, 21, 22, 23),# (&#x27;three&#x27;, 31, 32, 33)] PythonでExcelセルを一括編集次のカスタム関数を使用して、Python を使用して Excel セルを一括で追加または編集できます。 この関数では、編集するセルを含む行の内容を 2 次元リストとして宣言し、セルの編集を同時に開始する位置を指定します。 関数のstart_row, start_col引数は、この位置の行と列を指定するために使用されます。 Copydef write_list_to_Excel(sheet, list_2d, start_row, start_col): for y, row in enumerate(list_2d): for x, cell in enumerate(row): sheet.cell(row=start_row + y, column=start_col + x, value=list_2d[y][x]) 次の 2 つの行の値を持つ 2 つの行を Excel ファイルに追加するとします。 Copy A B C .................... four 41 42 43five 51 52 53 2 次元リストに追加する値を保存し、新しく作成した関数を使用して、A5次のように 5 行 1 列目の位置から Excel ファイルを書き込みます。 Copylist_2d = [[&#x27;four&#x27;, 41, 42, 43], [&#x27;five&#x27;, 51, 52, 53]]write_list_to_Excel(sheet, list_2d, 5, 1) その結果、2 次元リストの値が次のように Excel ファイルのセルに入力されます。 Copypprint.pprint(list(sheet.values), width=40)# [(None, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;new&#x27;),# (&#x27;one&#x27;, 11.0, 12.0, 13.0, 14),# (&#x27;two&#x27;, 21.0, 22.0, 23.0, None),# (&#x27;three&#x27;, 31.0, 32.0, 33.0, None),# (&#x27;four&#x27;, 41, 42, 43, None),# (&#x27;five&#x27;, 51, 52, 53, None)] PythonでExcelのシートを追加| create_sheet()PythonでExcel にシートを追加するには、次の構文で Workbook クラスの create_sheet() メソッドを使用します。 wb.create_sheet ( &#39;sheet_name&#39; ) そこで、sheet_nameはwbワークブックに追加するシート名です。 たとえば、次のようにSheet_newで名前を付けた新しいシートをwbワークブックに追加します。 Copywb = openpyxl.load_workbook(&#x27;./user/sample.xlsx&#x27;)print(wb.sheetnames)# [&#x27;Sheet1&#x27;, &#x27;Sheet2&#x27;]sheet_new = wb.create_sheet(&#x27;Sheet_new&#x27;)print(wb.sheetnames)# [&#x27;Sheet1&#x27;, &#x27;Sheet2&#x27; ,&#x27;Sheet_new&#x27;]] PythonでExcelシートをコピー | copy_worksheet()メソッドPythonでExcel でシートをコピーするには、次の構文で Workbook クラスの copy_worksheet() メソッドを使用します。 wb.copy_worksheet( wb [ &#39;sheet_name&#39; ] ) そこで、sheet_nameはwbワークブックにコピーするシート名です。 例えば： Copywb = openpyxl.load_workbook(&#x27;./user/sample.xlsx&#x27;)print(wb.sheetnames)# [&#x27;Sheet1&#x27;, &#x27;Sheet2&#x27;]sheet_copy = wb.copy_worksheet(wb[&#x27;Sheet1&#x27;])print(wb.sheetnames)# [&#x27;Sheet1&#x27;, &#x27;Sheet2&#x27;, &#x27;Sheet1 Copy&#x27;] Sheet1 Copyという名前の新しいシートが作成されていることがわかります。このシートの内容をチェックして、元のシートと同じかどうかを確認できます。 Copypprint.pprint(list(sheet_copy.values))# [(None, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;new&#x27;),# (&#x27;one&#x27;, 11.0, 12.0, 13.0, 14),# (&#x27;two&#x27;, 21.0, 22.0, 23.0, None),# (&#x27;three&#x27;, 31.0, 32.0, 33.0, None),# (&#x27;four&#x27;, 41, 42, 43, None),# (&#x27;five&#x27;, 51, 52, 53, None)] PythonでExcel シートを削除 | remove()メソッドPythonでExcel でシートを削除するには、次の構文で Workbook クラスの remove() メソッドを使用します。 wb.remove ( wb [ &#39;remove_sheet_name&#39; ] ) そこで、remove_sheet_nameはwbワークブックから削除するシート名です。 例えば Copywb = openpyxl.load_workbook(&#x27;./user/sample.xlsx&#x27;)print(wb.sheetnames)# [&#x27;Sheet1&#x27;, &#x27;Sheet2&#x27;]wb.remove(wb[&#x27;Sheet2&#x27;])print(wb.sheetnames)# [&#x27;Sheet1&#x27;] PythonでExcel シート名を編集 | title属性PythonでExcel でシート名を編集するには、次の構文で Workbook クラスのtitle属性を使用します。 sheet.title = &#39;new_sheet_name&#39; そこで、new_sheet_nameは新しいシート名です。 たとえば、次のように名前Sheet1をnewsheetに変更します。 Copywb = openpyxl.load_workbook(&#x27;./user/sample.xlsx&#x27;)print(wb.sheetnames)# [&#x27;Sheet1&#x27;, &#x27;Sheet2&#x27;]sheet = wb[&#x27;Sheet1&#x27;]sheet.title= &quot;newsheet&quot;print(wb.sheetnames)# [&#x27;Sheet1&#x27;, &#x27;newsheet&#x27;] PythonでExcel ファイル名を編集 | os.rename()Python で Excel ファイル名を編集するには、os モジュールの rename() 関数を使用して、Python の他のファイル タイプと同じようにファイル名を編集します。 例えば： Copyos.rename(&#x27;./user/sample.xlsx&#x27;,&#x27;./user/test.xlsx&#x27;) rename() 関数の使用方法の詳細についてはPython でファイルの名前を変更するの記事を参照してください。 Python で Excel ファイルを保存する | save()メソッド上記のメソッドを使用して Python で Excel ファイルにデータを書き込んだ後、次の構文で Workbook クラスの save() メソッドを使用して、これらの変更を Excel ファイルに保存する必要があります。 wb.save(file_path) 例えば： Copywb.save(&#x27;./user/sample.xlsx&#x27;) 次のように Excel ファイルの新しいパスを指定して、ファイルを新しい名前で保存することもできます Copywb.save(&#x27;./user/test.xlsx&#x27;) Python でExcel ファイルを保存するプロセスが完了すると、Pythonで Excel ファイルに書き込んだ編集内容と変更内容が保存され、後で使用できるようになります。 まとめ上記 Kiyoshi は、Python で Excel ファイルにデータを書き込む方法を案内しています。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/tags/CSV-EXCEL-JSON-XML-PDF/"}]},{"title":"PythonでExcelファイルを読み込む","slug":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/doc-file-excel-trong-python","date":"2022-11-16T08:09:08.000Z","updated":"2022-11-16T14:03:06.523Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/doc-file-excel-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/doc-file-excel-trong-python/","excerpt":"Python で Excel ファイルを処理する方法について説明します。このレッスンの後、 openpyxl をインストールし、このモジュールを使用して Python で Excel ファイルを読み込み、Python で Excel ファイルからデータを抽出する方法を学習します。","text":"Python で Excel ファイルを処理する方法について説明します。このレッスンの後、 openpyxl をインストールし、このモジュールを使用して Python で Excel ファイルを読み込み、Python で Excel ファイルからデータを抽出する方法を学習します。 関連記事: Python で Excel ファイルにデータを書き込む. Pythonにopenpyxlをインストールする方法pip install openpyxl で openpyxl をインストールします。Python で Excel ファイル処理を実行するには、次のように、Anaconda プロンプト画面でpipを使用してコンピューターに openpyxl モジュールをインストールする必要があります pip install openpyxl インストールされているopenpyxlのバージョンは、上の画像の赤枠部分のように確認できます。openpyxl をインストールすると、openpyxl を使用して Python で Excel ファイル処理を実行できます。 このモジュールをもう使用したくない場合は 、次のようにpipを使用してコンピューターから openpyxl を削除することもできます。 pip uninstall openpyxl openpyxlモジュールで Excel ファイルの処理をサポートするクラスExcel ファイルを処理するために、openpyxl モジュールは次の 3 つのクラスを統合します。 クラス名 定義 Workbook すべてのエクセルファイル Worksheet Excel ファイルのシート Cell シート内のセル 各クラスでは、Python で Excel ファイルを処理するのに役立つさまざまなメソッドをサポートします。 PythonでExcelファイルを読み込む | openpyxlPythonでExcelファイル全体を読み込む次の内容Excel ファイルがあるとします。 この exel ファイルを処理するには、まず openpyxl をプログラムにインポートする必要があります。さらに、結果を画面に表示して見やすくするには、次のように pprint モジュールをインポートしてください。 Copyimport openpyxlimport pprint 参照: pprint 関数と、Python で美しくスマートなリストと辞書を印刷する方法 次に、次のようにopenpyxl.load_workbook()を使用して、Excel ファイル全体を含むWorkbook クラスのオブジェクトを作成します。 Copywb = openpyxl.load_workbook(&#x27;./user/sample.xlsx&#x27;) ワークブック オブジェクトを作成した後、ワークブック クラスの組み込みメソッドを使用して、そのオブジェクトで Excel ファイルを処理できます。たとえば、Excel でシート名全体を取得できます。 Copyprint(wb.sheetnames)# [&#x27;Sheet1&#x27;, &#x27;Sheet2&#x27;] PythonでExcelファイルのシートを読み込むExcel ファイルのシートを処理するには、次のようにシート名を指定して、読み込むシートの内容を含むワークシート クラスのオブジェクトを作成します。 Copysheet = wb[&#x27;Sheet1&#x27;] ワークシート オブジェクトを作成した後、次のようにセルの内容を含むcell クラスのオブジェクトを作成することで、A2、B3 などのワークシート内のセルにアクセスできます。 CopycellA2 = sheet[&#x27;A2&#x27;]cellB3 = sheet[&#x27;B3&#x27;] PythonでExcelファイルのセルを読み込むcell オブジェクトを作成した後、 cell クラスの組み込みメソッドを使用して、新しく作成されたオブジェクトを処理できます。たとえば、そのセルの値を取得できます。 Copycell = sheet[&#x27;A2&#x27;]print(cell.value)# one 上記のセル名を指定することに加えて、次のようにそのセルの [row - column ] を介してシート内のそのセルの位置を指定することによって、セルの値を取得することもできます。 Copycell = sheet.cell(row=2, column=1)print(cell.value)# one Excelシートの指定範囲のセルを読み込むたとえば、Excel シートの指定された範囲のセルを読み込むには、上記で作成したワークシート オブジェクトA2:C4でこの範囲を指定し、ワークシートからその範囲内のすべてのセルをフォームとして取得する必要がありますu: Copycells_tuple = sheet[&#x27;A2:C4&#x27;]pprint.pprint(cells_tuple)#((&lt;Cell &#x27;Sheet1&#x27;.A2&gt;, &lt;Cell &#x27;Sheet1&#x27;.B2&gt;, &lt;Cell &#x27;Sheet1&#x27;.C2&gt;),# (&lt;Cell &#x27;Sheet1&#x27;.A3&gt;, &lt;Cell &#x27;Sheet1&#x27;.B3&gt;, &lt;Cell &#x27;Sheet1&#x27;.C3&gt;),# (&lt;Cell &#x27;Sheet1&#x27;.A4&gt;, &lt;Cell &#x27;Sheet1&#x27;.B4&gt;, &lt;Cell &#x27;Sheet1&#x27;.C4&gt;)) これらのセルをタプルとして読み取った後、タプル操作を使用してこれらのセルを処理できます。たとえば、次のようにタプルの要素にアクセスして、指定したセルの値を取得します。 Copyprint(cells_tuple[0][1].value)#11print(cells_tuple[0][0].value)#one タプルを処理するその他の方法については、Python でのタプル トピックを参照してください。 タプルを使用するだけでなく、クラス シートに組み込まれている iter_rows() メソッドを使用して、範囲内のすべてのセルをリストとして取得し、ジェネレータ (イテレータを生成するために使用される関数) を作成することもできます。次に、Python で list() 関数を使用して、上記のジェネレーターを以下のようにリストに変換します。 Copyg = sheet.iter_rows(min_row=2, max_row=4, min_col=1, max_col=3)print(type(g))# &lt;class &#x27;generator&#x27;&gt;cells_list=list(g)pprint.pprint(cells_list)#[(&lt;Cell &#x27;Sheet1&#x27;.A2&gt;, &lt;Cell &#x27;Sheet1&#x27;.B2&gt;, &lt;Cell &#x27;Sheet1&#x27;.C2&gt;),# (&lt;Cell &#x27;Sheet1&#x27;.A3&gt;, &lt;Cell &#x27;Sheet1&#x27;.B3&gt;, &lt;Cell &#x27;Sheet1&#x27;.C3&gt;),# (&lt;Cell &#x27;Sheet1&#x27;.A4&gt;, &lt;Cell &#x27;Sheet1&#x27;.B4&gt;, &lt;Cell &#x27;Sheet1&#x27;.C4&gt;)] これらのセルをリストとして読み取った後、リスト操作を使用してこれらのセルを処理できます。たとえば、次のようにリスト内の要素にアクセスして、指定したセルの値を取得します。 Copyprint(cells_list[0][1].value)#11print(cells_list[0][0].value)#one * PythonのListでリストを処理するその他の方法を参照してください。 Python を使用して Excel ファイルからデータを抽出PythonでExcelシートのすべてのセル値を抽出するWorksheet クラスのvaluesプロパティを使用することで、ジェネレーター(Python で反復子を作成するために使用される関数) を作成し、リスト クラスを使用して上記のジェネレーターを変数のすべての値を含むリストに変換できます。例えば： Copyg_all = sheet.valuespprint.pprint(list(g_all), width=40) 次のように Python でリスト内包表記を使用して、Excel シート内のセルの値全体を取得する関数を作成することもできます。 Copydef get_cell_value_list(sheet): return([[cell.value for cell in row] for row in sheet])all_cell_value = get_cell_value_list(sheet)pprint.pprint(all_cell_value, width=40) 上記の両方の方法で同じ結果が得られるため、シート内のすべてのセル値は、次のように python の 2 次元リストとして取得されます。 Copy[[None, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;], [&#x27;one&#x27;, 11, 12, 13], [&#x27;two&#x27;, 21, 22, 23], [&#x27;three&#x27;, 31, 32, 33]] Excelシートで指定された範囲のセルの値を取得Excel シートの指定された範囲のセル値を取得したい場合は、シート全体を読み取ってそのセルの値全体を取得するのではなく、特定の範囲のセルを読み込むだけで済みます。上記の指示に従って、その範囲に存在するセルの値を取得すれば完了です。 Copydef get_cell_value_list(sheet): return([[cell.value for cell in row] for row in sheet])all_cell_value_with_range = get_cell_value_list(sheet[&#x27;A2:C4&#x27;])pprint.pprint(all_cell_value_with_range, width=40) その結果、シート内の指定された範囲のすべてのセル値が、次のように 2 次元リストとして取得されます。 Copy[[&#x27;one&#x27;, 11, 12], [&#x27;two&#x27;, 21, 22], [&#x27;three&#x27;, 31, 32]] Pythonを使用してExcelでデータの行数を数えるPython を使用して Excel でデータの行数をカウントするには、次の構文で Workbook クラスのmax_row属性を使用します。 sheet.max_row たとえば、次のコードで python を使用して、Excel のデータを含む行数をカウントします。 Copywb = openpyxl.load_workbook(&#x27;./user/sample.xlsx&#x27;)sheet = wb[&#x27;Sheet1&#x27;]max = sheet.max_row print(max)#&gt; 3 sheet.max_row を使用すると、次のように、データを含む行の数をカウントし、ヘッダー行を除くすべてのデータを取得する関数を作成できます。 Copydef get_all_excel_infor(excel_filepath): wb = openpyxl.load_workbook(excel_filepath, data_only=True) sheet = wb[&#x27;Sheet1&#x27;] max = sheet.max_row return([[cell.value for cell in row] for row in sheet[2:max]]) この関数を使用する場合、処理する Excel ファイルのパスとして引数を指定するだけです。 Copyall_excel_infor = get_all_excel_infor(&#x27;./user/sample.xlsx&#x27;) Pythonを使用してExcelのデータで列の数を数えますPython を使用して Excel のデータを含む列の数をカウントするには、次の構文で Workbook クラスのmax_column属性を使用します。 sheet.max_column たとえば、次のコードで Python を使用して、Excel のデータを含む列の数をカウントします。 Copywb = openpyxl.load_workbook(&#x27;./user/sample.xlsx&#x27;)sheet = wb[&#x27;Sheet1&#x27;]max = sheet.max_column print(max)#&gt; 4 返される結果は、指定された Excel ファイル内のデータを含む列の最大数になります。 まとめ上記 Kiyoshi は、python で Excel ファイルを読み込む方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、 Python でのExcel ファイルへのデータの書き込みの記事に引き続き従い、 Python で Excel ファイルを処理する操作を完全にマスターしてください。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/tags/CSV-EXCEL-JSON-XML-PDF/"}]},{"title":"Pythonでストップウォッチを作成","slug":"python/nhap-mon-lap-trinh-python/datetime-trong-python/dong-ho-bam-gio-python","date":"2022-11-16T06:33:11.000Z","updated":"2022-11-16T12:06:08.204Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/datetime-trong-python/dong-ho-bam-gio-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/datetime-trong-python/dong-ho-bam-gio-python/","excerpt":"Pythonでストップウォッチの作り方のチュートリアル。このレッスンの後、timeモジュール、 datetimeモジュール、およびtkinterモジュール(GUI を操作する) を python に適用することにより、 pythonで作成された本当に優れた時計を作成できます。","text":"Pythonでストップウォッチの作り方のチュートリアル。このレッスンの後、timeモジュール、 datetimeモジュール、およびtkinterモジュール(GUI を操作する) を python に適用することにより、 pythonで作成された本当に優れた時計を作成できます。 Pythonでストップウォッチ作成 | デジタルPythonのtimeモジュールをpython tkinter モジュールと組み合わせて使用して、次のコード行で非常に優れたストップウォッチを作成できます。 clock.pyファイルを保存し、コンピューターで実行してストップウォッチのタイマーを表示するようにしましょう。 clock.py Copyfrom tkinter import *from datetime import datetimeimport timec = Canvas(width = 700, height = 300, background = &#x27;#00ffff&#x27;)c.pack()try: while True: now = datetime.now() s = &#x27;&#123;0:0&gt;2d&#125;:&#123;1:0&gt;2d&#125;:&#123;2:0&gt;2d&#125;&#x27;.format(now.hour, now.minute, now.second) c.create_rectangle(0, 0, 700, 300, outline = &#x27;#00ffff&#x27;, fill = &#x27;#00ffff&#x27;) c.create_text(350, 150, text = s, font = (&#x27;&#x27;, 100), fill = &#x27;blue&#x27;) c.update() time.sleep(0.1)except: pass 上記のclock.pyファイルを実行すると、次のような本物の時計が表示されます。 線の塗りつぶし値のc.creat_rectangleを変更することで、時計の色を変更することもできます。たとえば、次のようなオレンジ色の時計です。 コードの説明 まず、import コマンドを使用して、必要なモジュール tkinter と datetime を time モジュールと共にインポートします。コードの 4 行目で、Tinker Canvas を作成します。これは、画像やその他の複雑なレイアウトを描画するために使用される長方形の領域です。グラフィック、テキスト、ウィジェット、またはフレームをキャンバスに配置できます。 Copyc = Canvas(width = 700, height = 300, background = &#x27;#00ffff&#x27;) 上記のように幅700px、高さ300pxのフォトキャンバスを作成し、青い木製の棚を置いたら、時間を描いていきます。 クロックは無限に実行されるため、while True を使用して無限ループを作成します。各ループで: datetime.now() を使用して現在の時刻を取得します。 次のコード行を使用して、上記の瞬間を時:分:秒の形式に変換します。 Copys = &#x27;&#123;0:0&gt;2d&#125;:&#123;1:0&gt;2d&#125;:&#123;2:0&gt;2d&#125;&#x27;.format(now.hour, now.minute, now.second) 今回は create_rectagle() および create_text() メソッドを使用してフレームに入力します 現在の時刻を更新するため、0.1 秒待ってから次の時刻の入力に進みます。次のコード行を使用します。Copyc.update()time.sleep(0.1) 最後に、プログラムを実行して結果を楽しみます。 Pythonでストップウォッチ作成 | アナログ時計上記の長方形の電子時計に満足できない場合は、次のプログラムで美しいアナログ時計を作成してみましょう。 clock_analog.py Copyfrom tkinter import * ##GUI 操作用の tkinter。Python の実行時にウィンドウを作成しますfrom datetime import datetime #現在の時刻import time #0.1秒ごとに時刻を変更import math # 時計の文字盤として円を描くWINwidth = 800 #時計のサイズWINcolor = &#x27;#ffffff&#x27; #M時計の 色WINheight = WINwidth #ウィンドウの幅S_length = WINwidth / 2 * 0.75 #秒針の長さM_length = S_length * 0.95 #分針の長さH_length = S_length * 0.8 #時針の長さH_LINEwidth = 8 # 時針の総計M_LINEwidth = H_LINEwidth / 2 #分針 の総計S_LINEwidth = 1 #秒針 の総計#Create WindoClock = Tk()Clock.title(&quot;AnalogClock&quot;)w = Canvas(Clock, width = WINwidth, height = WINheight, background = WINcolor)w.pack()w.create_oval(WINwidth / 2 - 5, WINheight / 2 - 5, WINwidth / 2 + 5, WINheight / 2 + 5, fill=&quot;black&quot;) w.create_oval(5, 5, WINwidth-5, WINheight-5, width = 2) #時計の外側に円を描くFontSize = int(WINwidth / 14) #フォントのサイズFx = 0 #時間表示テキストの固定位置Fy = FontSize / 10R = S_length + FontSize * 0.9 #時間表示テキストの半径A = 0 #作成される角度の大きさの時間表示ワードfor i in range(1,13): #文字を 表示 A = A + 30 Tx = R * math.cos(A / 180 * math.pi) Ty = R * math.sin(A / 180 * math.pi) w.create_text(WINwidth / 2 + Ty - Fx, WINheight / 2 - Tx + Fy, text = i, font = (&quot;&quot;, FontSize))try: while True: #時間ループを開始 now = datetime.now() #現在時刻を取得i if now.hour &gt; 12: #時刻を 12h として表現 nowhour = now.hour - 12 else: nowhour = now.hour # the秒針が動き、分針も追従する nowhour = nowhour + now.minute / 60 + now.second / 3600 #時間形式の変更 nowminute = now.minute + now.second / 60 #時間形式の変更 H_A = nowhour / 12 * 360 * math.pi /180 #針で作った角度の大きさ M_A = nowminute / 60 * 360 * math.pi / 180 S_A = now.second / 60 * 360 * math.pi / 180 H_x = math.cos(H_A) * H_length #時計の中心に対する針の長さを H_y = math.sin(H_A) * H_length M_x = math.cos(M_A) * M_length M_y = math.sin(M_A) * M_length S_x = math.cos(S_A) * S_length S_y = math.sin(S_A) * S_length w.create_text(WINwidth / 2 , WINheight / 2 + WINwidth / 8, text = datetime.now().strftime(&#x27;%Y/%m/%d %H:%M:%S&#x27;), font = (&quot;&quot;, int(FontSize / 1.5)), tag=&quot;Y&quot;) #Show年 月 日 時 分 秒 w.create_line(WINwidth / 2, WINheight / 2, WINwidth / 2 + H_y, WINheight / 2 - H_x, width = H_LINEwidth, tag=&quot;H&quot;) #Kim giờ w.create_line(WINwidth / 2, WINheight / 2, WINwidth / 2 + M_y, WINheight / 2 - M_x, width = M_LINEwidth, tag=&quot;M&quot;) #Kim phút w.create_line(WINwidth / 2, WINheight / 2, WINwidth / 2 + S_y, WINheight / 2 - S_x, width = S_LINEwidth, tag=&quot;S&quot;) #Kim giây w.update() #新しい時刻を更新 w.delete(&quot;H&quot;) #古い時刻を削除 w.delete(&quot;M&quot;) w.delete(&quot;S&quot;) w.delete(&quot;Y&quot;) time.sleep(0.1) #0.1 秒ごとに時計を更新except: pass このプログラムには、sin、cos を使用して円を描くためのmath モジュールもあり、Python での Piの記事で詳細を確認できます。 上記のコード行をanalog.pyファイルに保存してプログラムを実行すると、本物のアナログ時計が表示されます。 まとめ上記 Kiyoshi は、 python ストップウォッチの作成方法を示しました。Python を使用して、よりユニークで奇妙な製品を作成します。é.","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"Datetime-trong-Python","permalink":"https://laptrinhcanban.com/tags/Datetime-trong-Python/"}]},{"title":"Python ランタイムの計算","slug":"python/nhap-mon-lap-trinh-python/datetime-trong-python/tinh-thoi-gian-chay-python","date":"2022-11-16T06:32:11.000Z","updated":"2022-11-16T14:03:10.544Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/datetime-trong-python/tinh-thoi-gian-chay-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/datetime-trong-python/tinh-thoi-gian-chay-python/","excerpt":"Python ランタイムの計算方法に関するチュートリアル。このレッスンの後、Python アルゴリズムの実行時間を計算する方法と、Pythonで時間をカウントダウンする方法について学習します。","text":"Python ランタイムの計算方法に関するチュートリアル。このレッスンの後、Python アルゴリズムの実行時間を計算する方法と、Pythonで時間をカウントダウンする方法について学習します。 Python アルゴリズムの実行時間を計算Python アルゴリズムの実行時間を計算するには、次の構文でtime モジュールの time() メソッドを使用する必要があります。 time.time() time.time()を使用すると、このステートメントを実行した時点の時間を取得できます。 これを使用して、アルゴリズムの開始時とアルゴリズムの終了時の時間を取得できます。そこから、それらの差分を計算、Python アルゴリズムの実行時間を算出できます。 たとえば、1 から 10 までを画面に出力するアルゴリズムがあり、このアルゴリズムの実行時間を計算する必要があるとします。次のプログラムを書きます。 Copyimport time# アルゴリズム初期化def thuat_toan(): for i in range(1,11): print i#アルゴリズム開始時刻を計算start_time = time.time()#アルゴリズムを実行thuat_toan()#アルゴリズム終了時刻を計算end_time = time.time()#Pythonアルゴリズムの実行時間を計算elapsed_time = end_time - start_timeprint (&quot;elapsed_time:&#123;0&#125;&quot;.format(elapsed_time) + &quot;[sec]&quot;) 結果：: Copy12345678910elapsed_time:8.58306884765625e-06[sec] 上記の例では、Python で文字列をフォーマットするために format メソッドを使用しました。 Pythonで時間をカウントダウンPython アルゴリズムの実行時間を計算するのとは対照的に、Python カウントダウン コードを生成し、プログラムのカウントダウン時間が 0 に戻ったときにそのプログラムの実行を開始することができます。 Copyimport timedef countdown(t): while t: mins, secs = divmod(t, 60) #tách phút và giây từ biến t timeformat = &#x27;&#123;:02d&#125;:&#123;:02d&#125;&#x27;.format(mins, secs) #định dạng thời gian hiển thị đếm ngược print(timeformat, end=&#x27;\\r&#x27;) #hiển thị thời gian đếm ngược time.sleep(1) # chờ 1s và update thời gian t -= 1 #đếm ngược từng giây cho tới 0 print(&#x27;Goodbye!\\n\\n\\n\\n\\n&#x27;) 使い方は簡単です。たとえば、10 から 0 までカウントダウンし、1 から 10 までを画面に出力するプログラムを実行するとします。 次のように記述します。 countdown.py Copyimport time#tạo hàm thuật toándef thuat_toan(): for i in range(1,11): print(i)def countdown(t): while t: mins, secs = divmod(t, 60) #tách phút và giây từ biến t timeformat = &#x27;&#123;:02d&#125;:&#123;:02d&#125;&#x27;.format(mins, secs) #định dạng thời gian hiển thị đếm ngược print(timeformat, end=&#x27;\\r&#x27;) #hiển thị thời gian đếm ngược time.sleep(1) # chờ 1s và update thời gian t -= 1 #đếm ngược từng giây cho tới 0 print(&#x27;Goodbye!\\n\\n\\n\\n\\n&#x27;)#nhập giá trị biến t từ màn hìnht=int(input(&quot;Nhap so giay bat dau dem nguoc : &quot;))countdown(t)thuat_toan() プログラムを実行すると、結果は次のようになります。 0 までカウントダウンした後、実行するアルゴリズムは次のように実行されます。u: 上記の例では、input() 関数を使用して画面から変数を入力しました。詳細なレクチャーは記事Import variables in pythonで見ることができます まとめ上記の Kiyoshi は、python runtime の計算方法を案内してくれました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"Datetime-trong-Python","permalink":"https://laptrinhcanban.com/tags/Datetime-trong-Python/"}]},{"title":"Pythonで日付を加算および減算し、時間を比較する","slug":"python/nhap-mon-lap-trinh-python/datetime-trong-python/cong-tru-ngay-thang-va-so-sanh-thoi-gian-trong-python","date":"2022-11-16T06:31:11.000Z","updated":"2022-11-16T14:03:10.262Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/datetime-trong-python/cong-tru-ngay-thang-va-so-sanh-thoi-gian-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/datetime-trong-python/cong-tru-ngay-thang-va-so-sanh-thoi-gian-trong-python/","excerpt":"Python で日付を加算および減算し、時刻を比較する方法について説明します。このレッスンの後、Python で日付と時刻を計算する方法と時間を比較する方法を学習します。","text":"Python で日付を加算および減算し、時刻を比較する方法について説明します。このレッスンの後、Python で日付と時刻を計算する方法と時間を比較する方法を学習します。 Pythonで日付を追加するdatetime または date クラスによって作成されたインスタンスである特定の時間値については、timedelta クラス (クラスは時差を表します) によって作成されたインスタンスにそれらを追加し、以下のようにインスタンスの新しい時間を生成できます。 dt_new = dt + td そこで： dt は特定の時間値です。クラス date またはクラス datetime によって作成されたインスタンスです。 td は特定の日付番号で、timedelta クラスによって作成されたインスタンスです。td の値が負であるか正であるかに応じて、未来に後方または前方に追加できます。 dt_new は、計算の結果である新しい時間値です。 これらのクラスの詳細については、What is Datetime in Pythonの記事を参照してください。 具体的には、次の例のように python で日付を加算および減算します。 Copyimport datetimedt2 = datetime.datetime(2020, 7, 21, 6, 12, 30, 551)print(dt1)&gt;&gt; 2020-07-21 06:12:30.000551dt2 = dt1 + datetime.timedelta(days=1)print(dt2)&gt;&gt; 2020-07-22 06:12:30.000551dt3 = dt1g + datetime.timedelta(days=-1)print(dt3)&gt;&gt; 2020-07-20 06:12:30.000551 timedelta メソッドの引数の値をdays負または正に指定することで、上記の例のように、過去 1 日を戻したり、将来 1 日を進めたりすることができます。 データが datetime ではなく単なる時間情報の文字列である場合は、Python でのstrptime を使用してデータを datetime に変換し、次の例のように Python で日付を追加します。 Copyimport datetimestr1= &quot;21/02/13&quot;d1 = datetime.datetime.strptime(str1, &quot;%y/%m/%d&quot;)print(d1)#&gt;&gt; 2021-02-13 00:00:00print(d1 + datetime.timedelta(days=31))#&gt;&gt; 2021-03-16 00:00:00print(d1 + datetime.timedelta(days=-2))#&gt;&gt; 2021-02-11 00:00:00 Pythonで日付を減算するPython で日付を減算し、Python で 2 つの時間値の日付差を計算するには、以下のように減算を使用します。 td = dt1 - dt2 そこで： dt1 と dt2 は時間固有の値です。クラス date またはクラス datetime によって作成されたインスタンスです。 td は、2 つの時間値 dt1 と dt2 の間の日付の差を表す時間値です。この値は、timedelta クラスのインスタンスとして扱われ、インスタンスの関連付けられたプロパティを呼び出すことができます。具体的には、次の例のように python で日付を減算します。 Copyimport datetimedt1 = datetime.datetime(2020, 7, 21, 6, 12, 30, 551)print(dt1)#&gt;&gt; 2020-07-21 06:12:30.000551dt2 = datetime.datetime(2020, 5, 12, 6, 45, 12, 7721)print(dt2)#&gt;&gt; 2020-05-12 06:45:12.007721td= dt1 -dt2print(td)#&gt;&gt; 69 days, 23:27:17.992830print(td.days)#&gt;&gt; 69print(td.seconds)#&gt;&gt; 84437 Python での日付減算の結果は timedelta クラスのインスタンスなので、上記の例のようにこのインスタンスのプロパティを呼び出すことができます。 データが datetime ではなく単なる時間情報の文字列である場合は、 Python でのstrptimeを使用して datetime に変換し、次の例のように Python で日付を減算します。 Copyimport datetimestr1= &quot;91/04/15&quot;str2= &quot;19/08/10&quot;dt1 = datetime.datetime.strptime(str1, &quot;%y/%m/%d&quot;)dt2 = datetime.datetime.strptime(str2, &quot;%y/%m/%d&quot;)print(dt2-dt1)#&gt;&gt; 10344 days, 0:00:00print((dt2-dt1).days/365)#&gt;&gt; 28.339726027397262 Pythonで時間を比較する「21/02/13」と「21/06/13」のように Python で時間を表す 2 つの文字列リテラルがあり、それらを比較したいとします。これを行うには、まずpython strptime メソッド を使用して、Python でそれらを datetime に変換する必要があります。次に、Python で時間減算を実行し、結果の値が負か正かを確認するか、直接比較することができます。 ここで清は、この問題を解決するための 2 つの解決策を次のように示します。 Pythonで時間減算を使用する Copyimport datetimestr1= &quot;21/02/13&quot;str2= &quot;21/06/13&quot;dt1 = datetime.datetime.strptime(str1, &quot;%y/%m/%d&quot;)dt2 = datetime.datetime.strptime(str2, &quot;%y/%m/%d&quot;)td_day= (dt1-dt2).daysif td_day &gt; 0: print(dt1,&quot; &gt; &quot;,dt2)elif td_day &lt; 0: print(dt1,&quot; &lt; &quot;,dt2)else: print(dt1, &quot; = &quot;,dt2) Python での時間減算の結果はインスタンスであるため、その符号を判断できないことに注意してください。代わりに、比較のために strptime.days プロパティを取得する必要があります。 Pythonでの時間の直接比較 Copyimport datetimestr1= &quot;21/02/13&quot;str2= &quot;21/06/13&quot;d1 = datetime.datetime.strptime(str1, &quot;%y/%m/%d&quot;)d2 = datetime.datetime.strptime(str2, &quot;%y/%m/%d&quot;)if d1 &gt; d2 : print(d1,&quot; &gt; &quot;,d2)elif d1 &lt; d2: print(d1,&quot; &lt; &quot;,d2)else: print(d1, &quot; = &quot;,d2) 上記の両方のソリューションで同じ結果が得られます。 Copy2021-02-13 00:00:00 &lt; 2021-06-13 00:00:00 まとめ上記 Kiyoshi はpython で日付を加算および減算し、時間を比較する方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"Datetime-trong-Python","permalink":"https://laptrinhcanban.com/tags/Datetime-trong-Python/"}]},{"title":"Pythonで文字列を日時に変換する","slug":"python/nhap-mon-lap-trinh-python/datetime-trong-python/chuyen-string-sang-datetime-trong-python","date":"2022-11-16T06:30:11.000Z","updated":"2022-11-16T14:03:09.998Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/datetime-trong-python/chuyen-string-sang-datetime-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/datetime-trong-python/chuyen-string-sang-datetime-trong-python/","excerpt":"Python で文字列を日時に変換する方法のチュートリアル。このレッスンの後、pythonで strptime() メソッドを使用して文字列を datetime に変換する方法と、python で datetime形式テーブルを使用して出力時刻をフォーマットする方法を学習します。","text":"Python で文字列を日時に変換する方法のチュートリアル。このレッスンの後、pythonで strptime() メソッドを使用して文字列を datetime に変換する方法と、python で datetime形式テーブルを使用して出力時刻をフォーマットする方法を学習します。 pythonの strptime() メソッドを使用して、Python で文字列を日時に変換できます。場合に応じて、日時出力を文字列の入力形式と同じ形式にすることも、まったく異なる形式にすることもできます。Python で文字列を datetime に変換した後、元の文字列に記録された時間を計算できます。たとえば、Python で日付を加算および減算したり、datetime から日付と時刻を取得したりできます。 尚、反対のことをしたい場合は、次の記事を参照してください: Pythonで日時を文字列に変換する. Pythonで文字列を日時に変換するPythonで文字列を日時に変換する構文Python datetime モジュールの strptime() メソッドを使用して、日付と時刻の値を含む文字列を解析し、次の構文でその文字列を Python datime に変換できます。 datetime.strptime(date_string, format) そこで： datetime.strptimeは、メソッド名を指定するために使用されます date_stringは、 format で指定された形式で記述された日付と時刻の値を含む文字列です。 formatは、date_string 文字列および出力の日付形式です 形式 format は、文字列で使用される時刻形式と一致する必要があることに注意してください。たとえば、文字列で2020/07/22 10:4:38” は、形式を として指定する必要があります”%Y/%m/%d %H:%M:%S”。そうしないと、プログラムの実行時にエラーが発生します。 Python 文字列の日付形式テーブルPython の日付形式は、以下の Python 文字列の日付形式表を使用して指定されます。 Format Ý nghĩa %y 2 桁の年 00, 01, …, 99 %Y 4 桁の月 0001, 0002, …, 9999 %b 月名の略称 Jan, Feb, …, Dec ※1 %B 月の名前 January, February, …, December ※1 %m 1月、2月、…、12 %d 1 日目、2 日目、…、31 日目 %H 時間 (24 時間) 00, 01, …, 23 %I 時（12 時間） 00, 01, …, 11 %p 午前または午後 ※1 %M 分 00, 01, …, 59 %S 秒 00, 01, …, 59 %f マイクロ秒 000000, 000001, …, 999999 %z タイムゾーン, +0000, -0400 etc %Z タイムゾーン UTC, EST ※1: 設定したローカルにより適宜値が変化します。ロケールの指定については、 python datetime でロケールを指定の記事を参照してください。 ここでは、次のように Python で文字列を日時に変換する方法の具体的な例を見ていきます。 同じ入力形式と出力形式で文字列をPythonで日時に変換しますPython 文字列の日付形式テーブルを介して、時間情報を含む文字列と、その文字列に時間を書き込む方法に対応する形式があるとします。次のように、この文字列を対応する時刻形式に変換します。 Copyimport datetimedate_str = &quot;2020/07/22 10:4:38&quot;date_format = &quot;%Y/%m/%d %H:%M:%S&quot;dt = datetime.datetime.strptime(date_str,date_format)print(type(dt))print(dt)#&gt;&gt; &lt;class &#x27;datetime.datetime&#x27;&gt;#&gt;&gt; 2020-07-22 10:04:38 その他の例: Copyimport datetimestr1 = &quot;2020/07/22 13:37:4:33217&quot;str2 = &quot;07/22/2020 PM 1:37:4:33217&quot;str3 = &quot;July 22,2020 13:37:4:33217+09:00&quot;dt1 = datetime.datetime.strptime(str1, &quot;%Y/%m/%d %H:%M:%S:%f&quot;)dt2 = datetime.datetime.strptime(str2, &quot;%m/%d/%Y %p %I:%M:%S:%f&quot;)dt3 = datetime.datetime.strptime(str3, &quot;%B %d,%Y %H:%M:%S:%f%z&quot;)print(dt1)#&gt;&gt; 2020-07-22 13:37:04.332170print(dt2)#&gt;&gt; 2020-07-22 13:37:04.332170print(dt3)#&gt;&gt; 2020-07-22 13:37:04.332170+09:00 その文字列に一致するように文字列文字列の形式を指定する必要があることに注意してください。文字列のフォーマットがフォーマットと異なる場合、ValueError が発生します。 Copyimport datetimedate_str = &quot;2020/15/22 10:4:38&quot;date_format = &quot;%Y/%m/%d %H:%M:%S&quot;dt = datetime.datetime.strptime(date_str, date_format) 戻りエラー: CopyValueError: time data &#x27;2020/15/22 10:4:38&#x27; does not match format &#x27;%Y/%m/%d %H:%M:%S&#x27; 異なる入力形式と出力形式で文字列をPythonで日時に変換します前のセクションで、元の文字列で使用されている時間形式と一致するように文字列の形式を指定する必要があることを学びました。 これにより、文字列の形式とはまったく異なる形式で日時を作成することが難しくなります。たとえば、元の文字列には の形式”Wednesday, May 04, 2021”がありますが、datetime には2020/15/22 10:4:38たとえばその形式が必要です。 この場合、元の文字列を datetime に変換した後、取得した datetime を別の形式の文字列に変換する処理を追加し、その別の形式の文字列を datetime に変換して最終結果を取得する必要があります。 strftime() メソッドを次の手順と組み合わせて使用します。ステップ 1: Python で文字列を日時に変換する Copyimport datetimedate_str = &#x27;Wednesday, May 04, 2021&#x27;date_format= &#x27;%A, %B %d, %Y&#x27;result_format= &#x27;%Y/%m/%d&#x27;date_dt = datetime.datetime.strptime(date_str, date_format)print(type(date_dt))print(date_dt)#&gt;&gt; &lt;class &#x27;datetime.datetime&#x27;&gt;#&gt;&gt; 2021-05-04 00:00:00 ステップ 2: 結果の日時を別の形式の文字列に変換する Copy#Thay đổi định dạng datetime trong pythondate_dt_str = date_dt.strftime(result_format)print(type(date_dt_str))print(date_dt_str)#&gt;&gt; &lt;class &#x27;str&#x27;&gt;#&gt;&gt; 2021/05/04 ステップ 3: 別の形式の文字列を datetime に変換し、最終結果を取得する Copydate_dt_result = datetime.datetime.strptime(date_dt_str, result_format)print(type(date_dt_result))print(date_dt_result)#&gt;&gt; &lt;class &#x27;datetime.datetime&#x27;&gt;#&gt;&gt; 2021-05-04 00:00:00 要約すると、次のコードを記述します。 Copyimport datetimedate_str = &#x27;Wednesday, May 04, 2021&#x27;date_format= &#x27;%A, %B %d, %Y&#x27;result_format= &#x27;%Y/%m/%d&#x27;date_dt = datetime.datetime.strptime(date_str, date_format)date_dt_str = date_dt.strftime(result_format)date_dt_result = datetime.datetime.strptime(date_dt_str, result_format)print(type(date_dt_result))print(date_dt_result)#&gt;&gt; &lt;class &#x27;datetime.datetime&#x27;&gt;#&gt;&gt; 2021-05-04 00:00:00 Pythonで文字列をdatetimeに変換した後に時間を計算するpython で string を datetime に変換した後、元の string の時刻情報は datetime 形式に変換されているので、この datetime で計算を実行できます。 たとえば、次のように datetime から日付と時刻を取得できます。 Copyimport datetimedt = datetime.datetime.strptime(&quot;2020/07/22 10:4:38&quot;,&quot;%Y/%m/%d %H:%M:%S&quot;)print(dt.year)#&gt;&gt; 2020print(dt.minute)#&gt;&gt; 4 次のように、結果の日時で日付を加算および減算することもできます。 Copyimport datetimedt = datetime.datetime.strptime(&quot;2020/07/22 10:4:38&quot;,&quot;%Y/%m/%d %H:%M:%S&quot;)dt2 = dt + datetime.timedelta(days=1)print(dt2)#&gt;&gt; 2020-07-23 10:04:38dt3 = dt - datetime.timedelta(days=8)print(dt3)#&gt;&gt; 2020-07-14 10:04:38 参照: Python で日付と時刻を取得する 参照: Python で日付を加算および減算し、時刻を比較する まとめ上記 Kiyoshi は、python で string を datetime に変換する方法を案内しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 文字列と日時を変換したい場合は、Python で日時を文字列に変換するの記事を参照してください。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"Datetime-trong-Python","permalink":"https://laptrinhcanban.com/tags/Datetime-trong-Python/"}]},{"title":"Pythonで日時を文字列に変換する","slug":"python/nhap-mon-lap-trinh-python/datetime-trong-python/chuyen-datetime-sang-string-trong-python","date":"2022-11-16T06:29:11.000Z","updated":"2022-11-16T12:05:56.738Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/datetime-trong-python/chuyen-datetime-sang-string-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/datetime-trong-python/chuyen-datetime-sang-string-trong-python/","excerpt":"Python で日時を文字列に変換する方法のチュートリアル。Python で strftime() メソッドを使用して日時情報を文字列に変換する方法と、オプションでその時間情報をさまざまな形式で表示する方法を学習します。また、このレッスンの後半で、python locale.setlocale(() 関数) を使用して、選択したタイム ゾーンに従ってその時間情報を表示する方法も学習します。","text":"Python で日時を文字列に変換する方法のチュートリアル。Python で strftime() メソッドを使用して日時情報を文字列に変換する方法と、オプションでその時間情報をさまざまな形式で表示する方法を学習します。また、このレッスンの後半で、python locale.setlocale(() 関数) を使用して、選択したタイム ゾーンに従ってその時間情報を表示する方法も学習します。 Python で datetime を文字列に変換し、その時間を Python でさまざまな型の文字列として表示できます。次に例を示します。 2021-05-04 12:29:11 2021/05/04 2021年5月4日水曜日 また、指定された日付が年の何日、つまり何週目かを計算することもできます。また、指定されたタイム ゾーンに基づいて、日付の表示スタイルを英語からベトナム語に変更することもできます (たとえば、「2021 年 5 月 4 日木曜日」など)。 これらはすべて、Python で strftime() メソッドを使用して Python で日時を文字列に変換するだけで解決できます。 繰り返しますが、反対のことをしたい場合は、次の記事を参照してください: Pythonで文字列を日時に変換する Pythonで日時を文字列に変換するPythonで日時を文字列に変換する構文Python で日時を文字列に変換するには、次の構文で Python の strftime() メソッドを使用します。 datetime.strftime(format) そこで： datetimeは、時刻情報を保持する datetime クラスの datetime インスタンスです。 strftimeはメソッド名です。 formatは文字列 string の出力形式です。 Python 文字列の日付形式テーブル文字列 string の出力形式は、次のpython string date format table を使用して指定されます。 フォーマット 意味 %y 2 桁の年 00, 01, …, 99 %Y 4 桁の月 0001, 0002, …, 9999 %b 月名の略称 Jan, Feb, …, Dec ※1 %B 月の名前 January, February, …, December ※1 %m 1月、2月、…、12 %d 1 日目、2 日目、…、31 日目 %H 時間 (24 時間) 00, 01, …, 23 %I 時（12 時間） 00, 01, …, 11 %p 午前または午後 1 ※1 %M 分 00, 01, …, 59 %S 秒 00, 01, …, 59 %f マイクロ秒 000000, 000001, …, 999999 %z タイムゾーン, +0000, -0400 etc %Z タイムゾーン UTC, EST %a Sun, Mon, …, Satの略 ※1 %A 平日 日曜日、月曜日、…、土曜日 ※1 %c 日付と時刻を適切に表示する ※1 %x 日付を適切に表示する ※1 %X 時刻を適切に表示する ※1 ※1: 設定したロケールに応じて値が適宜変化します。ロケールの指定方法については、以下を参照してください。 ここでは、次のように Python で日時を文字列に変換する方法の具体的な例を見ていきます。 Pythonで指定された時間を文字列に変換しますたとえば、次のような時間情報があります’2020/07/22 20:4:38’。 次のように、datetime.datetime() コンストラクターを使用して、上記の時刻情報を含む datetime インスタンスを作成します。 Copyimport datetimemydt = datetime.datetime(2020, 7, 22, 20, 4, 38)print(type(mydt))print(mydt)#&gt;&gt; &lt;class &#x27;datetime.datetime&#x27;&gt;#&gt;&gt; 2020-07-22 20:04:38 上記の mydtのdatetimeを作成した後、次のように Python で strftime() メソッドを使用して、この日時を Python の文字列に変換します。 Copydt_str = mydt.strftime(&quot;%Y/%m/%d %a %H:%M:%S&quot;)print(type(dt_str))print(dt_str)#&gt;&gt; &lt;class &#x27;str&#x27;&gt;#&gt;&gt; 2020/07/22 Wed 20:04:38 また、文字列の形式を変更して、日時を Python の文字列に変換すると、次の結果が得られます。 Copyprint(mydt.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;))#&gt;&gt; 2020-07-22 20:04:38print(mydt.strftime(&#x27;%y%m%d&#x27;))#&gt;&gt; 200722print(mydt.strftime(&#x27;%A, %B %d, %Y&#x27;))#&gt;&gt; Wednesday, July 22, 2020print (mydt.strftime( &#x27;日付 %d 月 %m 年 %Y&#x27; )) #&gt;&gt; 2020 年 7 月 22 日 繰り返しますが、次のように Python で strftime() メソッドを使用する場合、文字列 string の形式を変更することで、指定された日付の年の通算日、通算週の序数を計算することもできます。 Copy#年の日付の序数を計算するprint(&#x27;通算日の序数&#x27;,mydt.strftime(&#x27;|%j&#x27;))#&gt;&gt; 通算日の序数| 204#年の週の序数を計算 (週は日曜日から始まる) print(&#x27;通算週の序数&#x27;,mydt.strftime(&#x27;|%U&#x27;))#&gt;&gt; 通算週の序数| 29#年の週の序数を計算 (週は月曜日から始まります) print(&#x27;通算月の序数&#x27;,mydt.strftime(&#x27;|%W&#x27;))#&gt;&gt;通算月の序数| 29 Pythonで現在の時刻を文字列に変換するonPython で現在の日時を取得するには、datetime.now() 関数を使用します。位置情報を取得したい場合、たとえば、ハノイの現在の時刻を 7 番目のタイム ゾーンで取得したい場合は、次のように記述します Copyimport datetimehanoi_time = datetime.timezone(datetime.timedelta(hours=7))dt_now = datetime.datetime.now(hanoi_time)print(type(dt_now))print(dt_now)#&gt;&gt; &lt;class &#x27;datetime.datetime&#x27;&gt;#&gt;&gt; 2021-05-06 09:28:37.759004+07:00 関連項目: Python で now()、time()、timetz() を使用して現在の日付と時刻を取得する 上記の現在の時刻情報を含むdatetime インスタンスを作成した後、次のようにPython で strftime() メソッドを使用して、この datetime を Python の文字列に変換します。 Copydt_str = dt_now.strftime(&quot;%Y/%m/%d %a %H:%M:%S&quot;)print(type(dt_str))print(dt_str)#&gt;&gt; &lt;class &#x27;str&#x27;&gt;#&gt;&gt; 2021/05/06 Thu 09:28:37 また、文字列の形式を変更して、日時を Python の文字列に変換すると、次の結果が得られます。 Copyprint(dt_now.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;))#&gt;&gt; 2021-05-06 09:28:37print(dt_now.strftime(&#x27;%y%m%d&#x27;))#&gt;&gt; 210506print(dt_now.strftime(&#x27;%A, %B %d, %Y&#x27;))#&gt;&gt; Thu, May 06, 2021print(dt_now.strftime( &#x27;日 %d 月 %m 年 %Y&#x27; )) #&gt;&gt; 2021 年 5 月 6 日 Lại nữa, chúng ta cũng có thể tính số thứ tự của ngày trong năm, tuần trong năm của ngày hiện tại bằng cách thay đổi format của chuỗi string khi sử dụng phương thức strftime() trong python như sau: Copy#年間の日の序数を計算するprint(&#x27;通算日の序数&#x27;,dt_now.strftime(&#x27;|%j&#x27;))#&gt;&gt; 通算日の序数| 126#年間通算週数（日曜日から始まる週）を計算print(&#x27;通算週の序数&#x27;,dt_now.strftime(&#x27;|%U&#x27;))#&gt;&gt; 通算週の序数| 18#年間通算週数（月曜から始まる週）を計算print(&#x27;通算週の序数&#x27;,dt_now.strftime(&#x27;|%W&#x27;))#&gt;&gt; 通算週の序数| 18 datetime モジュールに加えて、strftime メソッド も time または date モジュールに組み込まれていることに注意してください 。 Python datetime でロケールを指定する上記の形式の表では、※1のアクセント付きの列の日付値が指定されたロケールに応じて変化することが既にわかっています。たとえば、ベトナムでロケールを指定すると、値Mondayは に変更されThứ hai、日本でロケールを指定すると、値は次のように変更され月曜日ます。Python の datetime でロケールを指定するには、次のように記述します。 import localelocale.setlocale(locale.LC_ALL, ‘locale_value‘) 指定されたロケールのlocale_valueを決定します。たとえば、日本のロケールは次のように指定します。 Copyimport localelocale.setlocale(locale.LC_ALL, &#x27;ja_JP.UTF-8&#x27;) またはベトナムでは： Copyimport localelocale.setlocale(locale.LC_ALL, &#x27;vi_VN.UTF-8&#x27;) 次のように、第 7 タイム ゾーンのベトナムで指定されたロケールで現在の時刻を表示する例を見てみましょう。 Copyimport datetimeimport localelocale.setlocale(locale.LC_ALL, &#x27;vi_VN.utf8&#x27;)hanoi_tz = datetime.timezone(datetime.timedelta(hours=7))dt = datetime.datetime.now(hanoi_tz)print(dt.strftime(&quot;|%Y/|%m/|%d |%a |%H:|%M:|%S&quot;))#&gt;&gt; 2021/05/06 T5 07:00:17print(dt.strftime(&quot;|%B |%d,|%Y |%p |%I:|%M:|%S:|%f|%z&quot;))#&gt;&gt; Tháng 5 06,2021,SA 07:00:17:777669+0900 9 番目のタイム ゾーンで日本のロケールを指定する場合の現在の時刻を示す別の例: Copyimport datetimeimport localelocale.setlocale(locale.LC_ALL, &#x27;ja_JP.UTF-8&#x27;)tokyo_tz = datetime.timezone(datetime.timedelta(hours=9))dt = datetime.datetime.now(tokyo_tz)print(dt.strftime(&quot;|%y/|%m/|%d |%A |%H:|%M:|%S&quot;))#&gt;&gt; 21/05/06 木曜日 09:00:17print(dt.strftime(&quot;|%B |%d,|%Y |%p |%I:|%M:|%S|%z&quot;))#&gt;&gt; 05月 06,2021 午前 09:00:17+0900print(dt.strftime(&quot;|%c&quot;))#&gt;&gt; 21/05/06 209:00:17 上記のコードは、マシンに既にインストールされている Python または Anaconda ソフトウェアで実行する必要があることに注意してください。このモジュールは、オペレーティング システムのクロックに設定した情報を取得する必要があるためです。たとえば、Paiza.io などのオンライン プラットフォームで上記のコードを実行すると、エラーが発生します。 まとめ上記 Kiyoshi は、Python で datetime を string に変換する方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 文字列と日時の間で変換したい場合は、 Python で文字列を日時に変換するの記事を参照してください。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"Datetime-trong-Python","permalink":"https://laptrinhcanban.com/tags/Datetime-trong-Python/"}]},{"title":"Pythonで日付と時刻を取得する","slug":"python/nhap-mon-lap-trinh-python/datetime-trong-python/lay-ngay-thang-nam-va-gio-trong-python","date":"2022-11-16T06:28:11.000Z","updated":"2022-11-16T12:06:10.685Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/datetime-trong-python/lay-ngay-thang-nam-va-gio-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/datetime-trong-python/lay-ngay-thang-nam-va-gio-trong-python/","excerpt":"Python で日付と時刻を取得する方法のチュートリアル。この情報は、datetime モジュールのクラスによって作成された時間インスタンスに格納されます。この記事の後半で、それらを完全に取得する方法を学習します。","text":"Python で日付と時刻を取得する方法のチュートリアル。この情報は、datetime モジュールのクラスによって作成された時間インスタンスに格納されます。この記事の後半で、それらを完全に取得する方法を学習します。 Python で日付と時刻を取得する | datetimeクラスdatetime クラスから時間情報を含むインスタンスを作成した後、そのインスタンスから日付、年、時間、タイムゾーン、マイクロ秒などの値を取得できます。 datetime クラスから datetime インスタンスを作成する方法については Python で Datetime モジュール の記事を参照してください。 これらの時間値を取得する方法は、以下の表のとおりです。 datetime.year : 年datetime.month : 月datetime.day : 日付datetime.hour : 時datetime.minute : 分datetime.second : 秒datetime.microsecond : マイクロ秒datetime.tzinfo : タイムゾーンdatetime.fold : 0 h 0 または 1 具体例は以下のとおりです。 Copyimport datetimedt = datetime.datetime.now()print(dt)#&gt;&gt; 2021-05-06 04:30:03.472193print(dt.year)#&gt;&gt; 2021print(dt.minute)#&gt;&gt; 3print(dt.tzinfo)#&gt;&gt; None タイムゾーンの値のみを含むインスタンスでのみタイムゾーンの値を取得できることに注意してください。上記の例では、dtインスタンスにタイム ゾーン情報が含まれていなかったため、結果Noneが返されました。 次の例では、作成されたインスタンスにタイム ゾーンの情報が含まれているため、結果として、次の方法でタイム ゾーンのtzinfo値を取得できます。 Copyimport datetimetz_hanoi = datetime.timezone(datetime.timedelta(hours=7))dt2 = datetime.datetime.now(tz_hanoi)print(dt2.tzinfo)#&gt;&gt;UTC+07:00 Python で日付と時刻を取得する| dateクラスとtimeクラスdatetime クラスに加えて、次のように time クラスまたは date クラスで作成されたインスタンスからPython で時間値を取得することもできます。 dateクラス date.year : 年date.month : 月date.day : 日 timeクラス time.hour : 時間time.minute : 分time.second : 秒time.microsecond : マイクロ秒time.tzinfo : タイムゾーンtime.fold : 0 または 1 クラスの日付とクラスの時間からインスタンスを作成する方法はWhat is Datetime in pythonの記事を参照してください。 具体例は以下のとおりです。 Copyimport datetimet1 = datetime.time(6, 12, 30, 551)print(t1)#&gt;&gt; 06:12:30.000551print(t1.hour)#&gt;&gt; 6print(t1.minute)#&gt;&gt; 12 サンプルコードここでは、次の例で練習します。 Copyimport datetimehanoi_tz = datetime.timezone(datetime.timedelta(hours=7))dt = datetime.datetime.now(hanoi_tz)print(dt)#&gt;&gt; 2021-05-06 11:41:03.643939+07:00print(&quot;year : &quot; + str(dt.year))#&gt;&gt; year : 2021print(&quot;month : &quot; + str(dt.month))#&gt;&gt; month : 5print(&quot;day : &quot; + str(dt.day))#&gt;&gt; day : 6print(&quot;hour : &quot; + str(dt.hour))#&gt;&gt; hour : 11print(&quot;minute : &quot; + str(dt.minute))#&gt;&gt; minute : 41print(&quot;second : &quot; + str(dt.second))#&gt;&gt; second : 3print(&quot;microsecond : &quot; + str(dt.microsecond))#&gt;&gt; microsecond : 464917print(&quot;tzinfo : &quot; + str(dt.tzinfo))#&gt;&gt; tzinfo : UTC+07:00 まとめ上記 Kiyoshi は、python で日付と時刻を取得する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"Datetime-trong-Python","permalink":"https://laptrinhcanban.com/tags/Datetime-trong-Python/"}]},{"title":"Pythonで現在の日付と時刻を取得 (now,time,timetz)","slug":"python/nhap-mon-lap-trinh-python/datetime-trong-python/lay-thoi-gian-hien-tai-trong-python","date":"2022-11-16T06:27:11.000Z","updated":"2022-11-16T12:06:13.203Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/datetime-trong-python/lay-thoi-gian-hien-tai-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/datetime-trong-python/lay-thoi-gian-hien-tai-trong-python/","excerpt":"Python で現在の日付と時刻を取得する方法のチュートリアル。このレッスンの後、Python でnow()またはtoday() メソッドを使用して現在の日付と時刻を取得する方法がわかります。","text":"Python で現在の日付と時刻を取得する方法のチュートリアル。このレッスンの後、Python でnow()またはtoday() メソッドを使用して現在の日付と時刻を取得する方法がわかります。 Pythonで現在の日付と時刻を取得now() メソッドを使用して Python で現在の日付と時刻を取得するPython で現在の日付を取得するには、datetime クラスに含まれる now() メソッドを次の構文で使用します。 datetime.now(timezone) timezone引数は、 PythonのTimezoneレッスンで学んだtimezoneクラスによって指定されます。 通常、timezone引数を省略し、次の短縮構文を使用して Python で現在の日付と時刻を取得します。 datetime.now() timezoneを省略した場合、返される結果はコンピュータの時計の現在の日付と時刻になります。 次の例のように、Python で現在の日付と時刻を取得します。 Copyimport datetime#パソコンで現在の日時を取得hdt1 = datetime.datetime.now()print(dt1)#&gt;&gt; 2021-05-06 05:34:09.960169#第 7 タイム ゾーン (ハノイ) で現在の日時をtz_hanoi = datetime.timezone(datetime.timedelta(hours=7))dt2 = datetime.datetime.now(tz_hanoi)print(dt2)#&gt;&gt; 2021-05-06 03:34:09.977525+07:00 now() メソッドを使用して現在の日付と時刻を取得すると、結果は datetime 型のインスタンスになります。 このインスタンスを処理できるようにするには、次の例のように、Converting datetime to string in pythonの記事のように、この datime を文字列型に変換できます。 Copyimport datetimedt_now = datetime.datetime.now()print(dt_now.strftime(&#x27;%YYear%MMonth%dday %H:%M:%S&#x27;))# 2021Year25Month06day 03:25:31print(type(dt_now.strftime(&#x27;%Y年Year%MMonth%dDay %H:%M:%S&#x27;)))# &lt;class &#x27;str&#x27;&gt;print(dt_now.isoformat())# 2021-05-06T03:25:31.052855print(type(dt_now.isoformat()))# &lt;class &#x27;str&#x27;&gt; さらに、次の例のように、datetime クラスのプロパティを使用して、上記のインスタンスから現在の日付、時刻、秒、および分の情報を取得することもできます。u: Copyimport datetimedt_now = datetime.datetime.now()print(dt_now.year)# 2021print(dt_now.month)# 5print(dt_now.day)# 6print(dt_now.hour)# 3print(dt_now.minute)# 29print(dt_now.second)# 51print(dt_now.microsecond)# 866748 タイムゾーン情報のみを含む tzinfo 属性の場合、次の例のように、タイムゾーン引数を指定するかどうかによって結果が異なることに注意してください。 Copyimport datetimedt1 = datetime.datetime.now()print(dt1.tzinfo)#&gt;&gt; Nonetz_hanoi = datetime.timezone(datetime.timedelta(hours=7))dt2 = datetime.datetime.now(tz_hanoi)print(dt2.tzinfo)#&gt;&gt; UTC+07:00 today()メソッドを使用してPythonで現在の日付と時刻を取得次の構文でtoday()メソッドを使用して、Pythonで現在の日付と時刻を取得することもできます。: datetime.today() now() メソッドとは異なり、today() メソッドでは timezone引数を指定できないことに注意してください。 次の例のように、today()メソッドを使用して Python で現在の日付と時刻を取得する方法: Copyimport datetimedt = datetime.datetime.today()print(dt)#&gt;&gt; 2021-05-06 05:35:17.438046 Python で現在の日付を取得today() メソッドを使用して Python で現在の日付を取得Python で現在の日付を取得するだけの場合は、次の構文で date クラスの today() メソッドを使用できます。 date.today() 次の例のように、返される結果は現在の日付になります。 Copyimport datetimedt = datetime.date.today()print(dt)##&gt; 2021-05-06 utcnow() メソッドを使用して Python で現在の日付を取得today メソッドの使用に加えて、次の例のように utcnow() メソッドを使用することもできます。 Copyimport datetimed_today_utc = datetime.datetime.utcnow().date()print(d_today_utc)# 2021-05-06print(type(d_today_utc))# &lt;class &#x27;datetime.date&#x27;&gt; 上記の例では、today() メソッドと結果は変わりませんが、utcnow() メソッドでは、UTC タイム ゾーンと比較した現在の日付が 0 であるため、タイム ゾーンの違いにより結果が異なる場合があります。 Python で現在の時刻を取得ontime() メソッドを使用して Python で現在の時刻を取得Python で現在の時刻を取得するには、前のセクションで学習した now() メソッドと、Python の time()メソッドを次の構文で使用します。 datetime.now(timezone).time() 上記のように、timezone 引数を指定または省略できます。 Copyimport datetime# タイムゾーン省略t_now = datetime.datetime.now().time()print(t_now)#&gt;&gt; 13:04:01.922740# タイムゾーン指定tz_hanoi = datetime.timezone(datetime.timedelta(hours=7))t2_now = datetime.datetime.now(tz_hanoi).time()print(t2_now)#&gt;&gt; 11:04:55.803209# タイムゾーンをでデフォルト値で指定t_now_utc = datetime.datetime.now(datetime.timezone.utc).time()print(t_now_utc)#&gt;&gt; 04:04:37.653467 timetz() メソッドを使用して Python で現在の時刻を取得尚、timezone 引数を指定する場合、次のように python timetz() メソッドを使用して、現在の時刻にタイムゾーン情報を含めることができます。 Copyimport datetimetz_hanoi = datetime.timezone(datetime.timedelta(hours=7))t2_now = datetime.datetime.now(tz_hanoi).timetz()print(t2_now)#&gt;&gt; 11:11:48.477226+07:00t_now_utc = datetime.datetime.now(datetime.timezone.utc).timetz()print(t_now_utc)#&gt;&gt; 04:11:48.477255+00:00 まとめ上記 Kiyoshi は、python で現在の日付と時刻を取得する方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"Datetime-trong-Python","permalink":"https://laptrinhcanban.com/tags/Datetime-trong-Python/"}]},{"title":"Python Datetime モジュールを使用","slug":"python/nhap-mon-lap-trinh-python/datetime-trong-python/datetime-trong-python-la-gi","date":"2022-11-16T06:26:11.000Z","updated":"2022-11-16T12:06:05.697Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/datetime-trong-python/datetime-trong-python-la-gi/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/datetime-trong-python/datetime-trong-python-la-gi/","excerpt":"Python で Date Time モジュールを使用するための手順。このレッスンの後、Python の datime モジュールとは何か、概念、および datetime モジュールに含まれるclass datetime、class date、class time、class timezoneなどのクラスの使用方法を理解できます。","text":"Python で Date Time モジュールを使用するための手順。このレッスンの後、Python の datime モジュールとは何か、概念、および datetime モジュールに含まれるclass datetime、class date、class time、class timezoneなどのクラスの使用方法を理解できます。 PythonのDatetimeとはPython の Datetime は、時間操作を実行するための特殊なモジュールです。Datetime モジュールには、さまざまな時間オブジェクトを操作するための多くのクラスが含まれています。次に例を示します。 class datetime日付と時刻の操作に使用されます。 class date日付の操作に使用 class time時間を操作するために使用 class timezoneタイムゾーンの操作に使用 上記のクラスでコンストラクターを使用してインスタンスを作成します。これは、タイミング情報を含む、クラスから作成された具体的なオブジェクトです。 pythoなどオブジェクト指向プログラミング言語では、クラスが家の設計図と見なされる場合、その設計図に基づいて構築されたすべての家はクラスのオブジェクトであり、特定の家はインスタンスと呼ばれます。土台を流したり、壁を作ったりするなど、家を建てる全工程をコンストラクターと呼びます。 datetime モジュールのクラスでは、コンストラクターでインスタンスを作成した後、クラスの組み込みメソッドとプロパティをこれらのインスタンスで直接使用して時間を計算します。 Python のDatetimeクラス Datetime クラスは、Python で日付と時刻の両方を操作するために使用されます。このクラスの一般的なコンストラクタは次のとおりです。一般式には多くのパラメーターがありますが、それらを使用するときにそれらのほとんどを省略できることに注意してください。 class datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0) そこで： 年 : 年 (1 &lt;= 年 &lt;= 9999) month : 月 (1 &lt;= 月 &lt;= 12) day : day (1 &lt;= 日 &lt;= 月の日数 hour : 時間 (0 &lt;= 時間 &lt; 24) 分 : 分 (0 &lt;= 分 &lt; 60) second : 秒 (0 &lt;= 秒 &lt; 60) microsecond : マイクロ秒 (0 &lt;= マイクロ秒 &lt; 1000000) tzinfo : timezone クラスによって作成された、タイムゾーンを指定するために使用されるサブクラス。 fold : サマータイムを計算する場合は fold = 1、カウントしない場合は fold = 0。 デフォルトでは、作成されたインスタンスにはタイムゾーン情報が含まれていないことに注意してください。コンストラクターで tzinfo の値を指定した場合にのみ、タイム ゾーン情報がインスタンスに追加されます。 インスタンスがタイム ゾーンの値を持たない場合、それはnaiveオブジェクと呼ばれ、インスタンスがタイム ゾーン情報を持たない場合、それはawareオブジェクトと呼ばれます。 次の例のように日時クラスを使用する方法: Copyimport datetime#日付を含むインスタンスを作成dt1 = datetime.datetime(2020, 7, 21)print(dt1)#&gt;&gt; 2020-07-21 00:00:00#年、月、日、時、分、秒、マイクロ秒のインスタンスを作成 dt2 = datetime.datetime(2020, 7, 21, 6, 12, 30, 551)print(dt2)#&gt;&gt; 2020-07-21 06:12:30.000551#タイムゾーンを指定してサブクラスを作成hanoi_tz = datetime.timezone(datetime.timedelta(hours=7))#上記のサブクラスを使用して、タイム ゾーンを含むインスタンスを作成dt3 = datetime.datetime(2020, 7, 21, 6, 12, 30, 551, hanoi_tz)print(dt3)#&gt;&gt; 2020-07-21 06:12:30.000551+09:00 上記の dt1、dt2、dt3 の 3 つのインスタンスで、どれがnaiveオブジェクトでどれがawareオブジェクトか分かりますか? Python のタイムゾーンPythonのtimezone クラスは、上記のように、datetime クラスを使用してインスタンスを作成するときにタイム ゾーンを指定するために使用される tzinfo クラスのサブクラスです。Python のタイムゾーンは UTC (協定世界時) に従って指定され、次のコンストラクターがあります。 class datetime.timezone(offset, name=None) そこで、offset引数はタイム ゾーンを表すオブジェクトであり、timedelta クラスから作成されたインスタンスです。 Python の timedelta クラスは、タイムゾーン間の時差を表すクラスです。timedelta クラスには、次のコンストラクターがあります。 class datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0) 引数は、日 (日)、秒 (秒)、マイクロ秒 (マイクロ秒)、分 (分)、時間 (時間)、週 (週) を意味します。 timedelta を使用するときにタイム ゾーンを指定するにhoursは、timezone の値と等しい値を指定します。たとえば、ベトナムではhours=7、日本ではhours=9、ニューヨークではとなりhours=-5ます。次の例のようにタイムゾーンを指定します。 Copyimport datetimehanoi_tz = datetime.timezone(datetime.timedelta(hours=7))print(hanoi_tz)#&gt;&gt; UTC+07:00tokyo_tz = datetime.timezone(datetime.timedelta(hours=9))print(tokyo_tz)#&gt;&gt; UTC+09:00ny_tz = datetime.timezone(datetime.timedelta(hours=-4))print(ny_tz)#&gt;&gt; UTC-04:00 尚、UTC タイム ゾーンを0(軽度0、グリニッジ王立天文台グリニッジ、グリニッジ、ロンドン、イギリスを通過する時間) として指定する場合、次の例のようhours=0に指定するかtimezone.utc属性を使用するかです。 Copyimport datetimeutc_tz1 = datetime.timezone(datetime.timedelta(0))print(utc_tz1)#&gt;&gt; UTCny_tz2 = datetime.timezone.utcprint(utc_tz1)#&gt;&gt; UTC Python の日付Python のDateクラスは、次のコンストラクターを使用して日付を操作するために使用されるクラスです。 class datetime.date(year, month, day) そこで： 年 : 年 ( 1 &lt;= 年 &lt;= 9999 月: 月 (1&lt;= 月&lt;= 12) day : day (1&lt;= day &lt;= その月の日数) 具体的には、次の例のように Python で日付を使用する方法: Copyimport datetimed = datetime.date(2020, 7, 21)print(d)#&gt;&gt; 2020-07-21print(type(d))#&gt;&gt;# &lt;class &#x27;datetime.date&#x27;&gt;d_today = datetime.date.today()print(d_today)#&gt;&gt; 2021-05-06 日付クラスにはタイム ゾーン情報が含まれていないため、クラスから作成されたインスタンスは常にnaiveオブジェクトです。 Python での時間Python のdatetimeクラスは、次のコンストラクターを使用して時間を操作するために使用されるクラスです。 class datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0) そこで： hour : 時間 (0 &lt;= 時間 &lt; 24) 分 : 分 (0 &lt;= 分 &lt; 60) second : 秒 (0 &lt;= 秒 &lt; 60) microsecond : マイクロ秒 (0 &lt;= マイクロ秒 &lt; 1000000) tzinfo : timezone クラスによって作成された、タイムゾーンを指定するために使用されるサブクラス。 fold : サマータイムを計算する場合は fold = 1、カウントしない場合は fold = 0。 tzinfo (タイム ゾーン) 引数を指定または省略できます。インスタンスが単純なオブジェクトとして作成されるか、認識されているオブジェクトとして作成されるかは、これにも依存します。 Python で授業時間を使用する方法の具体例は次のとおりです。 Copyimport datetimet1 = datetime.time(6, 12, 30, 551)print(t1)#&gt;&gt; 06:12:30.000551hanoi_tz = datetime.timezone(datetime.timedelta(hours=7))t2 = datetime.time(6, 12, 30, 551, hanoi_tz)print(t2)#&gt;&gt; 06:12:30.000551+07:00 まとめ上記 Kiyoshi は、Python で datetime モジュールを使用する方法と、このモジュールに含まれるクラスの概念と使用法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Datetime trong Python","slug":"Datetime-trong-Python","permalink":"https://laptrinhcanban.com/tags/Datetime-trong-Python/"}]},{"title":"Python の float() 関数","slug":"python/nhap-mon-lap-trinh-python/ham-trong-python/float-trong-python","date":"2022-11-16T05:04:51.000Z","updated":"2022-11-17T10:21:10.443Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/ham-trong-python/float-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/ham-trong-python/float-trong-python/","excerpt":"Python で Float() 関数を使用する手順。このレッスンの後、float() 関数を使用して、Python で型を浮動小数点実数にキャストする方法を学習します。","text":"Python で Float() 関数を使用する手順。このレッスンの後、float() 関数を使用して、Python で型を浮動小数点実数にキャストする方法を学習します。 Pythonのfloat()関数とはPythonのfloat()関数とは指定された値を浮動小数点実数にキャストするために使用されるPythonの組み込み関数です。 Python で float() 関数を使用して、指定された値を浮動小数点実数に変換し、次の構文で新しい数値を生成します。 Python での float() 関数の構文 float(x) そこで： floatは関数名です xは浮動小数点実数にキャストする値です。xは数値または数字を指定できます。 得られた結果は、浮動小数点数の形式の数値になります。 Python で float() 関数を使用したサンプル プログラムPython の float() 関数のデータ型に応じて、次のように異なる結果が得られます。 xを省略した場合、結果は実数0.0になります。 Copyfloat()&gt;&gt; 0.0 xは整数の場合、戻り値はxの実数です。 Copyfloat(15)&gt;&gt; 15.0 xは実数の場合、戻り値は x そのものです。 Copyfloat(3.14)&gt;&gt; 3.14 英数字の文字列の場合、結果は文字列から変換した実際の数値になります。 Copyfloat(&#x27;28&#x27;)&gt;&gt; 28.0float(&quot;5.755&quot;)&gt;&gt; 5.755 または、次のように式で内部指数を指定できます。 Copyfloat(&quot;8.5e+5&quot;)&gt;&gt; 850000.0float(&quot;2.34e-4&quot;)&gt;&gt; 0.000234 Python で float() を使用する場合の注意float() 関数を使用して、数値形式に変換できるデータである数値、数字、または英数字の文字列である値を使用して、指定された値の型を Python の浮動小数点実数にキャストするだけです。 指定された文字列が floatable でない場合、次の例に示すように、ValueErrorが発生します。 Copyfloat(&quot;bigcityboy&quot;) ValueError の戻り値: CopyTraceback (most recent call last): File &quot;Main.py&quot;, line 1, in &lt;module&gt; float(&quot;bigcityboy&quot;)ValueError: could not convert string to float: &#x27;bigcityboy&#x27; 文字列”bigcityboyはfloatに変換できないため、エラーが発生しました。 まとめ上記 Kiyoshi は、float() 関数を使用して Python でデータ型を浮動小数点数にキャストする方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで python の基礎を学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"Ham-trong-python","permalink":"https://laptrinhcanban.com/tags/Ham-trong-python/"}]},{"title":"Python リストの重複要素をチェックして取得","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/kiem-tra-va-lay-phan-tu-trung-nhau-trong-list-python","date":"2022-11-16T01:58:33.000Z","updated":"2022-11-16T12:04:44.055Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/kiem-tra-va-lay-phan-tu-trung-nhau-trong-list-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/kiem-tra-va-lay-phan-tu-trung-nhau-trong-list-python/","excerpt":"Python リストの重複要素をチェックして取得するすべての方法に関するチュートリアル。このレッスンの後、Python リストで重複をチェックする方法と、リストに重複がある場合に Python リストで重複を取得する方法を学習します。","text":"Python リストの重複要素をチェックして取得するすべての方法に関するチュートリアル。このレッスンの後、Python リストで重複をチェックする方法と、リストに重複がある場合に Python リストで重複を取得する方法を学習します。 参照 Python リストの重複要素を削除する Python リストの重複要素をチェック通常のリストで重複をチェックpython リストに重複する要素があるかどうかを確認するには、 python set() 関数を使用します。 Python リストの重複要素の削除の記事では、 set 関数を使用してリスト内の重複要素を削除する方法を既に知っていますよね? ここでの考え方は、元のリストから重複する要素を削除してセットを取得し、セット内と元のリスト内の要素の数を互いに比較するというものです。2 つの値が等しい場合、重複は削除されないため、元のリストに重複はありません。 逆に、これら 2 つの値が異なる場合は、元のリストに重複した要素があることを意味します。 具体的には、python リスト内の重複をチェックする関数を作成し、以下を使用します。 Copydef check_duplicate_list(mylist): if len(mylist) != len(set(mylist)): return &quot;リストに重複要素はあります。&quot; else: return &quot;リストに重複要素はありません。&quot; l = [0, 1, 2]print(check_duplicate_list(l))##&gt; リストに重複要素はありません。l = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;]print(check_duplicate_list(l))##&gt; リストに重複要素はあります。 リスト内の重複要素のチェックに加えて、上記の組み込み関数check_duplicate_list()を使用して、次のようにタプル内の重複要素をチェックすることもできます。 Copyt = (0, 1, 2)print(check_duplicate_list(t))##&gt; リストに重複要素はありません。t = (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;)print(check_duplicate_list(t))#&gt;&gt; リストに重複要素はあります。 2 次元リストには hasable 値ではない要素が含まれているため、リスト関数を使用してセットに変換できないため、このメソッドを使用して python の 2 次元リストの重複をチェックできないことに注意してください。以下のエラーが発生します。 Copyl_2d = [[0, 1], [1, 1], [0, 1], [1, 0]]&gt;&gt;&gt; print(has_duplicates(l_2d))&gt;&gt;&gt; TypeError: unhashable type: &#x27;list&#x27; 代わりに、以下の方法を使用します。 Pythonの2次元リストで重複要素をチェックPython で 2 次元リストの重複をチェックするには、リスト内の要素をチェックする通常の方法と同じ考え方を共有します。これは [2 次元リスト内の重複を削除]する前と後のリスト内の数値要素を比較し、重複有無を確認します。 ただし、set() 関数は 2 次元リストでは使用できないため、新しい関数を作成し、次のように Python で 2 次元リスト内の重複要素をチェックする関数を使用します。 Copydef check_duplicate_list_all(l_2d): kiemtra = [] unique_list = [x for x in l_2d if x not in kiemtra and not kiemtra.append(x)] if len(l_2d) != len(unique_list): return &quot;リストに重複要素はあります。&quot; else: return &quot;リストに重複要素はありません。&quot;l_2d1 = [[0, 0], [0, 1], [1, 1], [1, 0]]print(check_duplicate_list_all(l_2d1))#&gt;&gt; リストに重複要素はありません。l_2d2 = [[&#x27;a&#x27;, &#x27;b&#x27;], [&#x27;a&#x27;, &#x27;b&#x27;], [1, 1], [1, 1]]print(check_duplicate_list_all(l_2d2))#&gt;&gt; リストに重複要素はありません。 python リストで重複をチェックする一般的な 方法上記で、set() 関数を使用して Python リストの重複をチェックすることは、Python の 2 次元リストには使用できないこと、および2 次元リストをチェックする別の関数を作成する方法を学びました。 ただし、ここで特別なことは、実際、上でのcheck_duplicate_list_all()関数は通常のリストにも使用できることです。 例えば： Copydef check_duplicate_list_all(l_2d): kiemtra = [] unique_list = [x for x in l_2d if x not in kiemtra and not kiemtra.append(x)] if len(l_2d) != len(unique_list): return &quot;リストに重複要素はあります。&quot; else: return &quot;リストに重複要素はありません。&quot;l = [0, 1, 2]print(check_duplicate_list_all(l))##&gt; リストに重複要素はありません。l = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;]print(check_duplicate_list_all(l))##&gt; リストに重複要素はあります。 上記の関数を使用して、Python タプルの重複をチェックすることもできます。 Copyt = (0, 1, 2)print(check_duplicate_list_all(t))##&gt; リストに重複要素はありません。t = (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;)print(check_duplicate_list_all(t))#&gt;&gt; リストに重複要素はあります。 したがって、一般的にすべてのケースで、次のカスタム関数を使用して、リスト内の重複または python のタプルをチェックします。 Copydef check_duplicate_list_all(l_2d): kiemtra = [] unique_list = [x for x in l_2d if x not in kiemtra and not kiemtra.append(x)] if len(l_2d) != len(unique_list): return &quot;リストに重複要素はあります。 hoặc tuple python&quot; else: return &quot;リストに重複要素はありません。 hoặc tuple python&quot; Python で関数を作成する方法については、Python defで関数を作成する記事を参照してください。 リストで重複要素を取得するリストの重複要素を取得する | collections.Counter()Python list で重複する要素を取得するには、 collectionモジュールでのCounter()関数を次の構文で使用します。 import collections collections.Counter( l ) そのでlとは、重複する要素を取り出したい元のリスト。collections.Counter() 関数の結果は、キーと値のペアが要素であり、元のリストでのその出現回数を持つ辞書です。 例えば： Copyimport collectionsl = [1, 2, 1, 2, 5, 3, 4, 2, 3]c = collections.Counter(l)print(c)#&gt;&gt; Counter(&#123;2: 3, 1: 2, 3: 2, 5: 1, 4: 1&#125;) Counter() 関数の結果を取得した後、pythonでのitem()関数を使用して、元のリストの同一の要素である 1 より大きい値を持つキーを取得できます。 具体的には、リスト内包表記と組み合わせて、次のコマンドを記述します。 Copyprint([k for k, v in collections.Counter(l).items() if v &gt; 1])# [1, 2, 3] 参照: Python でのリスト内包表記の使用 リストの重複要素を取得する | sorted() 関数collections.Counter() 関数は Python3.7 から使用されたばかりなので、Pythonで sorted() 関数を使用してPython リストで重複を取得する古い方法があります。 たとえば、上記のリストでは、次のように sorted() で一致する要素を取得します。 Copyimport collectionsl = [1, 2, 1, 2, 5, 3, 4, 2, 3]c = collections.Counter(l)print(sorted([k for k, v in collections.Counter(l).items() if v &gt; 1], key=l.index))#&gt;&gt; [1, 2, 3] 尚、これらの要素を重複して取得したい場合は、次のようにコードを少し変更できます。 Copyimport collectionsl = [1, 2, 1, 2, 5, 3, 4, 2, 3]c = collections.Counter(l)print([x for x in l if cc[x] &gt; 1])#&gt;&gt; [1, 2, 1, 2, 3, 2, 3] Pythonで2次元リストの重複要素を取得するPython で 2 次元リストの重複要素を取得するには、Couter() または sorted() を使用できないため、この問題を解決するために自己作成関数を作成する必要があります。 たとえば、次のような 2 次元リストがあります。 Copyl = [[1, 2], [0, 1], [0, 1], [0, 0], [1, 0], [1, 2], [1, 2]] 上記の 2 次元リストで重複要素を取得する関数を次のように作成します。 元の順序を維持せずに python で 2 次元リストで重複要素を取得 Copydef get_duplicate_list(l): seen = [] return [x for x in l if not seen.append(x) and seen.count(x) == 2]l = [[1, 2], [0, 1], [0, 1], [0, 0], [1, 0], [1, 2], [1, 2]]print(get_duplicate_list(l))#&gt;&gt; [[0, 1], [1, 2]] 元の順序を維持して、Pythonの2次元リストで重複要素を取得。 Copy seen = [] return [x for x in l if l.count(x) &gt; 1 and not seen.append(x) and seen.count(x) == 1]l = [[1, 2], [0, 1], [0, 1], [0, 0], [1, 0], [1, 2], [1, 2]]print(get_duplicate_list_order(l))#&gt;&gt; [[1, 2], [0, 1]] まとめ上記 Kiyoshi は、既にPython リスト内の重複要素をチェックして取得する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python で文字列をリストに変換する","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/chuyen-string-sang-list-trong-python","date":"2022-11-16T01:55:43.000Z","updated":"2022-11-16T12:04:29.932Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/chuyen-string-sang-list-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/chuyen-string-sang-list-trong-python/","excerpt":"Pythonで文字列をリストに変換する方法のチュートリアル。このレッスンの後、Python で文字列をリストに変換するすべての方法を学習します。","text":"Pythonで文字列をリストに変換する方法のチュートリアル。このレッスンの後、Python で文字列をリストに変換するすべての方法を学習します。 Python で文字列をリストに変換するには、次の 3 つの方法があります。 list() 関数: Python で文字列をリストに変換する split() メソッド: 文字列を分割し、文字列をリストに変換します Python の正規表現: 文字列内の数字と文字を分割し、文字列を Python のリストに変換する 尚、反対のことをしたい場合は、次の記事を参照してください: Converting list to string in Python. Pythonで文字列をリストに変換 | list関数Python の list() 関数は List クラスのコンストラクタであり、指定された値からリストを作成するために使用されます。list() 関数の引数を文字列として指定することで、次の例のようにPython で文字列をリストに変換できます。 Copymystring = &#x27;cityboy&#x27;mylist= list(mystring)print(mylist)#&gt;&gt; [&#x27;c&#x27;, &#x27;i&#x27;, &#x27;t&#x27;, &#x27;y&#x27;, &#x27;b&#x27;, &#x27;o&#x27;, &#x27;y&#x27;] 次のように、数字を含む文字列でも同じことができます。 Copymystring = &#x27;cityboy1968&#x27;mylist= list(mystring)print(mylist)#&gt;&gt; [&#x27;c&#x27;, &#x27;i&#x27;, &#x27;t&#x27;, &#x27;y&#x27;, &#x27;b&#x27;, &#x27;o&#x27;, &#x27;y&#x27;, &#x27;1&#x27;, &#x27;9&#x27;, &#x27;6&#x27;, &#x27;8&#x27;] 参照: Python の List() 関数と iterable からリストを作成する方法 指定した文字列を分割して文字列をリストに変換する | split()メソッド文字が区切り記号または指定された文字で区切られている文字列の場合、その区切り記号または指定された文字で文字列を分割し、Pythonのsplit() メソッドを使用して、結果をリストとして取得できます。 たとえば、次のように、split() を使用して、文字列を Python のリストに変換し、スペースで区切られた最初の文字列を使用できます。 Copymystring = &#x27;Thứ 6 ngày 25 tháng 6 năm 2021&#x27;mylist = mystring.split()print(mylist)#&gt;&gt; [&#x27;Thứ&#x27;, &#x27;6&#x27;, &#x27;ngày&#x27;, &#x27;25&#x27;, &#x27;tháng&#x27;, &#x27;6&#x27;, &#x27;năm&#x27;, &#x27;2021&#x27;] または、任意の文字列で区切られた文字を含む文字列の場合、元の文字列をその文字列で分割し、次のように split() メソッドを使用して文字列を Python のリストに変換できます Copymystring = &#x27;Đỏ và đen và nâu và trắng&#x27;mylist = mystring.split(&#x27; và &#x27;)print(mylist)#&gt;&gt; [&#x27;Đỏ&#x27;, &#x27;đen&#x27;, &#x27;nâu&#x27;, &#x27;trắng&#x27;] これは、上記のような要素の配列からリストを作成する場合に特に便利です。 参照: Python で文字列を分割する Python で文字列内の数字と文字を分割し、文字列をリストに変換する | Python での正規表現数字と文字の両方を含む文字列の場合、数字と文字を Python リスト内の要素に分割する必要があります。たとえば、2021年を [&#39;年&#39;, 2021]に分割できるため、Python で RegEx を使用し、文字列内の数字と文字を分離し、結果を連結し返ることが出来ます。 Copyimport remystring = &#x27;2021 年 6 月 25 日金曜日&#x27;m = re.findall(r&#x27;\\d+&#x27;, mystring) m1 = re.sub(r&#x27;\\d&#x27;,&#x27;&#x27;, mystring).split()mylist = m + m1print(m)print(m1)print(mylist)#&gt;&gt; [&#x27;2021&#x27;, &#x27;6&#x27;, &#x27;25&#x27;]#&gt;&gt; [&#x27;年&#x27;, &#x27;月&#x27;, &#x27;日金曜日&#x27;]#&gt;&gt; [&#x27;2021&#x27;, &#x27;6&#x27;, &#x27;25&#x27;, &#x27;年&#x27;, &#x27;月&#x27;, &#x27;日金曜日&#x27;] もう一つの例： Copyimport remystring = &#x27;a12b34c1991&#x27;m = re.findall(r&#x27;\\d+&#x27;, mystring) m1 = re.sub(r&#x27;\\d&#x27;,&#x27;&#x27;, mystring).split()mylist = m + m1print(m)print(m1)print(mylist)#&gt;&gt; [&#x27;12&#x27;, &#x27;34&#x27;, &#x27;1991&#x27;]#&gt;&gt; [&#x27;abc&#x27;]#&gt;&gt; [&#x27;12&#x27;, &#x27;34&#x27;, &#x27;1991&#x27;, &#x27;abc&#x27;] このメソッドは、たとえば、パスコード内の一連の数字を取得する必要がある場合や、交絡文字を含む文字列で個人の Facebook ID を取得する必要がある場合に特に役立ちます。 参照: Python 文字列で数値を分割する 参照: Python でのリストへの要素の追加とリストの結合 まとめ上記 Kiyoshi は、Python で文字列をリストに変換する方法を案内しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python リストの重複要素を削除","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/xoa-phan-tu-trung-nhau-trong-list-python","date":"2022-11-16T01:55:26.000Z","updated":"2022-11-16T12:05:13.263Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/xoa-phan-tu-trung-nhau-trong-list-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/xoa-phan-tu-trung-nhau-trong-list-python/","excerpt":"python list で重複する要素を削除するすべての方法の説明。set()関数、dict.fromkeys()関数、またはsorted() 関数を使用して、元のリストの順序を維持する必要がない、または維持したくない場合に備えて、python リストから要素を削除する方法を学習します。このレッスンの後、カスタム関数を使用して 2 次元リストから重複を削除する方法も学びます。","text":"python list で重複する要素を削除するすべての方法の説明。set()関数、dict.fromkeys()関数、またはsorted() 関数を使用して、元のリストの順序を維持する必要がない、または維持したくない場合に備えて、python リストから要素を削除する方法を学習します。このレッスンの後、カスタム関数を使用して 2 次元リストから重複を削除する方法も学びます。 次のように、Python リストで重複する要素を削除する3 つの方法があり ます。 set() 関数: 元のリストの順序を維持せずに重複する要素を削除します dict.fromkeys()関数 およびsorted()関数: 重複する要素を削除し、元のリストの順序を維持します リスト内包表記を使用した自己作成関数: 2 次元リスト内の重複要素を削除します 尚、通常の方法でPython リストから要素を削除したいだけの場合は、Python リストから要素を削除する の記事を参照してください。 元のリストの順序を維持せずに重複する要素を削除 | set()関数元のリストの順序を維持せずに python リストの重複要素を削除したい場合は、pythonで set() 関数を使用します。 set() 関数はリストを python のセットに変換します。セット型では要素が一意で複製できないため、元のリストの重複要素は削除されます。 最後に、 python の list() 関数を使用して、上記の要素を含むセットをリスト型に変換します。 セット型にはインデックスがないため、元のリストの順序は保持されないことに注意してください。 具体例: Copyl = [1, 2, 3, 1, 2, 4, 4, 2, 3]# Chuyển list sang set và xóa phần tử trùng nhaus = set(l)print(s)#&gt;&gt; &#123;1, 2, 3, 4&#125;# Chuyển lại set về listunique_l = list(s)print(unique_l)#&gt;&gt; [1, 2, 3, 4] 次のように set() 関数を使用して、Python リスト内の文字列型の重複要素を削除することもできます。: Copyl = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27; , &#x27;red&#x27;]unique_l=list(set(l))print(unique_l)#&gt;&gt; [&#x27;blue&#x27;, &#x27;black&#x27;, &#x27;yellow&#x27;, &#x27;red&#x27;] Python リスト内のリストまたはPython リスト内のタプルでは、TypeError が発生するため、 set() 関数を使用して重複する要素を削除できないことに注意してください。 Copyl = [ 1, 2, [3, 4] , [3,4]]unique_l=list(set(l))&gt;&gt;&gt; TypeError: unhashable type: &#x27;list&#x27; このような 2 次元リストから重複を削除する方法については、以下で説明します。 重複する要素を削除し、元のリストの順序を維持しますset 型には要素のインデックスがないため、 set を使用してリスト内の重複要素を削除する方法は、元のリストの順序を維持できません。 Python リストで重複する要素を削除し、元のリストの順序を維持したい場合は、 set() の代わりにdict.fromkeys() 関数または python の sorted() 関数を使用します。 dict.fromkeys() 関数の使用関数 dict.fromkeys() は、リストまたはタプルを Python 辞書型で使用されるキーに変換するために使用されます。set 型と同様に、辞書型のキーも一意であり、複製できないため、これを適用して python list の重複要素を削除できます。尚、辞書内のキーは順序付けられているため、dict.fromkeys() を使用すると、返されるリストは元のリストと同じ順序になります。 参照 : Python で dict() 関数を使用して辞書を作成する 具体例:: Copyl = [1, 2, 3, 1, 2, 4, 4, 2, 3]# リストを辞書に変換して重複を削除d = dict.fromkeys(l)print(d)#&gt;&gt; 1: None, 2: None, 3: None, 4: None&#125;# 辞書をリストに変換するunique_l = list(d)print(unique_l)#&gt;&gt; [1, 2, 3, 4] string要素を含むリストも同様。 Copyl = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27; , &#x27;red&#x27;]unique_l=list(dict.fromkeys(l))print(unique_l)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;] sorted() 関数の使用新しい dict.fromkeys() 関数は Python3.7 から適用されているため、関数 dict.fromkeys()やsorted()など を使用して、元のリストの順序を維持しながらPython リストから重複を削除する古い方法があります。 具体例: Copyl = [1, 2, 3, 1, 2, 4, 4, 2, 3]print(sorted(set(l), key=l.index))#&gt; [1, 2, 3, 4]ll = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27; , &#x27;red&#x27;]print(sorted(set(ll), key=ll.index))#&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;] sorted() 関数の使用方法については、リスト python の要素の並べ替えの記事を参照することもできます。 2 次元リストの重複要素を削除する2 次元リストから重複する要素を削除する場合、TypeError が発生するため、上記のメソッドは使用できません。 Copyl = [ 1, 2, [3, 4] , [3,4]]unique_l=list(set(l))&gt;&gt;&gt; TypeError: unhashable type: &#x27;list&#x27;l_2d = [[1, 1], [0, 1], [0, 1], [0, 0]]dict.fromkeys(l_2d)&gt;&gt;&gt; TypeError: unhashable type: &#x27;list&#x27; 理由は、上記のような 2 次元リストはハッシュ可能な値ではなく、セット内の要素または辞書内のキーはハッシュ可能な値でしか作成できないため、エラーが発生したためです。 2 次元リストから重複を削除する組み込み関数やメソッドがないため、この問題を解決するには自分で関数を作成する必要があります。 たとえば、リスト内包表記を使用して、次のような削除関数を記述できます。 Copydef unique_list(l_2d): kiemtra = [] return [x for x in l_2d if x not in kiemtra and not kiemtra.append(x)] 次のように、関数を呼び出して、2 次元リスト内の重複要素を削除します。 Copyl_2d = [[1, 1], [0, 1], [0, 1], [0, 0]]l_2d_unique = unique_list(l)print(l_unique)#&gt;&gt; [[1, 1], [0, 1], [0, 0]] 上記の組み込み関数を使用して、異なるデータ型の要素を持つ 2 次元リスト内の重複要素を削除することもできます。 たとえば、 number 型と list 型の要素を持つ 2 次元リストで重複する要素を削除します。 Copyl_2d = [ 1, 2, [3, 4] , [3,4]]print(unique_list(l_2d_2))#&gt;&gt; [1, 2, [3, 4]] またはさらに良いことに、tuple() にも要素を含む 2 次元リストを使用します。: Copyl_2d_mix = [ 1, 2, [3, 4] , [3,4] , (&#x27;a&#x27;, &#x27;b&#x27;) , (&#x27;a&#x27;, &#x27;b&#x27;) ]print(unique_list(l_2d_mix))#&gt;&gt; [1, 2, [3, 4], (&#x27;a&#x27;, &#x27;b&#x27;)] 参照 : Python の Def と関数を作成するための構文 参照m : Python でのリスト内包表記の使用 まとめ上記 Kiyoshi はpython list で重複した要素を削除する方法を示しました。レッスンの内容をよりよく理解するために、今日の例でもう一度練習してください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python リストの最大値または最小値を取得","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/tim-max-min-trong-list-python","date":"2022-11-16T01:51:28.000Z","updated":"2022-11-16T12:05:04.734Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/tim-max-min-trong-list-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/tim-max-min-trong-list-python/","excerpt":"Python リストの最大値と最小値を取得する方法と、Python リスト内の要素を合計する方法についての説明。python list でmax() を見つける方法、python listでmin()を見つける方法、およびpython list で上位 n 個の最大または最小の要素を見つける方法を学習します。このレッスンの後、Python リストの要素を合計し、それを適用してリストを Python の文字列に変換する方法も学習します。","text":"Python リストの最大値と最小値を取得する方法と、Python リスト内の要素を合計する方法についての説明。python list でmax() を見つける方法、python listでmin()を見つける方法、およびpython list で上位 n 個の最大または最小の要素を見つける方法を学習します。このレッスンの後、Python リストの要素を合計し、それを適用してリストを Python の文字列に変換する方法も学習します。 Python リストの最大値検索 | Python の max() 関数Python リストの最大値を見つけるには、pythonで maxという組み込み関数を次の構文で使用します。 max ( org_list ) org_list は、その中で最大の要素を見つけるためのリストです。メソッドの結果は、指定された Python リスト内の最大の要素の値です。 たとえば、次のように max()関数を使用して、Python リスト内の最大の要素を見つけます。 Copynumlist = [3, 6, 9, -1, 0, -10, 18]print(max(numlist))#&gt;&gt; 18 次のように、Python で max 関数を使用して、要素が文字列であるリスト内の最大の要素を見つけることもできます。au: Copyl = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27; , &#x27;red&#x27;]print(max(l ))#&gt;&gt; yellow リスト内の要素が数値型であるリスト内に max() が見つかると、理解しやすいでしょう。ただし、python リスト内の文字列型の要素の中で最大の要素を見つける場合、max() 関数は文字列の値を直接比較することはできませんので、Unicode コード ポイント (unicode code point) を介して比較する必要があります。 参照 : 2 つの文字列の比較 python 尚、python リストで常にリストの最大値を見つけることができるとは限りません。たとえば、文字列や数値など、さまざまなデータ型の要素を含むリストでは、文字列と数値の大小を比較できないため、リスト内の最大の要素を見つけることができません。例えば： Copyl = [1, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27; , &#x27;red&#x27;]print(max(l ))#Traceback (most recent call last):# File &quot;Main.py&quot;, line 3, in &lt;module&gt;# print(min(l ))#TypeError: &#x27;&lt;&#x27; not supported between instances of &#x27;str&#x27; and &#x27;int&#x27; Python リストの最小値検索 | Python の min() 関数Python リストの最小値を見つけるには、組み込みのmin()関数 を次の構文で使用します。 min ( org_list ) org_list は、その中で最小の要素を見つけるためのリストです。メソッドの結果は、指定された Python リストの最小要素の値です。 たとえば、次のように Python で min() 関数を使用して、リスト内の最小の要素を見つけます。 Copynumlist = [3, 6, 9, -1, 0, -10, 18]print(min(numlist))#&gt;&gt; -10 次のように、Python で min 関数を使用して、要素が文字列であるリスト内の最小要素を見つけることもできます。 Copyl = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27; , &#x27;red&#x27;]print(min(l ))#&gt;&gt; black リスト内の要素が数値型であるリスト内に min() が見つかると、理解しやすいでしょう。ただし、python リスト内の文字列型の要素の中で最小の要素を見つける場合、min() 関数は文字列の値を直接比較することはできませんので、Unicode コード ポイント (unicode code point) を介して比較する必要があります。 参照 : 2 つの文字列の比較 python 尚、python リストで常にリストの最小値を見つけることができるとは限りません。たとえば、文字列や数値など、さまざまなデータ型の要素を含むリストでは、文字列と数値の大小を比較できないため、リスト内の最小の要素を見つけることができません。例えば： Copyl = [1, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27; , &#x27;red&#x27;]print(min(l ))#Traceback (most recent call last):# File &quot;Main.py&quot;, line 3, in &lt;module&gt;# print(min(l ))#TypeError: &#x27;&lt;&#x27; not supported between instances of &#x27;str&#x27; and &#x27;int&#x27; Python リストの上位 n 個の最大または最小要素を取得するPython list で n 個の最大または最小の要素を取得するには、まずリストを昇順または降順で並べ替える必要があります。次に、スライス リスト関数を使用して、並べ替えられた Python リストで最大または最小の n 個の要素を簡単に取得できます。 参照: Python リスト内の要素の並べ替え. 参照: Python のスライス リスト. 上位 n 個の最大最小要素を取得し、元のリストの順序を維持しますPython リストの上位 n 個の最大または最小の要素を取得し、元のリストの順序を維持するには、sorted() 関数を使用して元のリストをソートし、新しいリストを作成してから、この新しいリストから上位 n 個の要素を取得します。リスト。 たとえば、次の python リストで上位 3 つの最大数を取得できます Copynumlist = [3, 6, 9, -1, 0, -10, 18]numlist_sort = sorted(numlist , reverse=True)top3 = numlist_sort[:3]print(top3) 次のように 1 行でより簡潔に記述できます。 Copynumlist = [3, 6, 9, -1, 0, -10, 18]print(sorted(numlist, reverse=True)[:3])#&gt;&gt; [18, 9, 6] 上記のリストの上位 3 つの最小値を取得する場合は、reverse = True引数を省略するか、reverse = Falseで指定します。 Copynumlist = [3, 6, 9, -1, 0, -10, 18]print(sorted(numlist)[:3])print(sorted(numlist, reverse=False)[:3])#&gt;&gt; [-10, -1, 0]#&gt;&gt; [-10, -1, 0] 上位 n 個の最大最小要素を取得し、元のリストの順序を変更します元のリストの順序を維持せずに Python リストの上位 n 個の最大または最小の要素を取得するには、上位 n 個の要素を取得する前に、sort() メソッドを使用して初期リストをソートします。 たとえば、元のリストを並べ替えて、次のように上位 3 つの最大要素を取得します。 Copynumlist = [3, 6, 9, -1, 0, -10, 18]numlist.sort(reverse=True)print(numlist[:3])#&gt;&gt; [18, 9, 6] 上記のリストの上位 3 つの最小値を取得する場合は、reverse = True引数を省略するか、reverse = Falseで指定します。 Copynumlist = [3, 6, 9, -1, 0, -10, 18]numlist.sort() # numlist.sort(reverse=False)print(numlist[:3])#&gt;&gt; [-10, -1, 0] Python リストの要素を合計するPython リストの要素である合計数リスト内の要素が一連の数値である場合に Python リスト内の要素を合計するには、Pythonで for ループを使用して各要素の値を取得し、それを合計に追加します。 たとえば、Python で1 から n までの数値の合計を計算するアルゴリズムを次のように記述します。: Copyn = 4numlist = range(1, n +1)total = 0for i in numlist: print(i) total += iprint(&quot;SUM:&quot;, total)#&gt;&gt; 1#&gt;&gt; 2#&gt;&gt; 3#&gt;&gt; 4#&gt;&gt; SUM: 10 Python でリストを文字列に変換するリスト内の要素が文字列型の場合に Python でリストを文字列に変換するには、次のようにその Python リスト内の要素を合計します Copystr_list = [&#x27;b&#x27;,&#x27;ig&#x27;,&#x27;b&#x27;,&#x27;o&#x27;,&#x27;y&#x27;]total = &quot;&quot;for i in str_list: total += iprint(total)#&gt;&gt; bigboy 多くの異なるデータ型の要素を含むリストでは、要素を合計できないことに注意してください。例として TypeError が発生します。 Copymix_list = [&#x27;b&#x27;,&#x27;ig&#x27;,&#x27;b&#x27;,&#x27;o&#x27;,&#x27;y&#x27;, 1]total = &quot;&quot;for i in mix_list: total += iprint(total)# Traceback (most recent call last):# File &quot;Main.py&quot;, line 4, in &lt;module&gt;# total += i#TypeError: can only concatenate str (not &quot;int&quot;) to str リストに多くの異なるデータ型の要素が含まれているPython でリストを文字列に変換する場合は、次のように Python で str() 関数を使用します。 Copymix_list = [&#x27;b&#x27;,&#x27;ig&#x27;,&#x27;b&#x27;,&#x27;o&#x27;,&#x27;y&#x27;, 1]total = &quot;&quot;for i in mix_list: total += str(i)print(total)#&gt;&gt; bigboy1 参照: Python の str() 関数. まとめ上記 Kiyoshi は リストの最大値または最小値を取得方法、およびPython でリスト内の要素を合計し、それを適用してPython でリストを文字列に変換する方法を案内しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"PythonのインデックスとリストPythonの要素にアクセスする方法","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/truy-cap-phan-tu-trong-list-python","date":"2022-11-16T01:50:07.000Z","updated":"2022-11-16T12:05:07.660Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/truy-cap-phan-tu-trong-list-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/truy-cap-phan-tu-trong-list-python/","excerpt":"Python のインデックスと、インデックスを介して Python リストの要素にアクセスする方法を学びましょう。このレッスンの後、Python のインデックスの概念と、その要素のインデックスを介してPython リスト内の要素を取得する方法を学習します。","text":"Python のインデックスと、インデックスを介して Python リストの要素にアクセスする方法を学びましょう。このレッスンの後、Python のインデックスの概念と、その要素のインデックスを介してPython リスト内の要素を取得する方法を学習します。 Pythonのインデックスとは Python のインデックスは、それを含むイテラブル (リスト、文字列..) 内の要素の位置またはシーケンス番号を表す値です。Python には、正のインデックスと負のインデックスの 2 種類のインデックスがあります。 Python では、iterable の各要素は、その位置を表す一意の正と負のインデックス ペアで表されます。要素のインデックスを使用することで、その要素の値にアクセスして取得したり、その値を変更したりできます。 Pythonの正のインデックスn Pythonの正のインデックスは、 iterable で要素のインデックスを左から右へ昇順で指定する方法です。要素の正のインデックスは、0 から増加して 1 ずつ加算される一連の正の数で指定します。 つまり、 iterable の最初の要素は のインデックスを持ち0、その後逆方向にインクリメント1, 2, 3…にします。 たとえば、リスト内の要素の正のインデックスは次のとおりです。 [\"Thanh Hóa\", \"Hà Nội\", \"Sài Gòn\", \"Đà Nẵng\"] ----------------------------------------- 0 1 2 3 Pythonの負のインデックス正のインデックスに対して、Python の負のインデックスは iterable で右から左方向に降順で要素のインデックスを指定する方法です。要素の負のインデックスは、-1 から減少して 1 を減算する一連の負の数によって指定されます。 つまり、右側の最後の要素のインデックスはになり、左上-1に向かって-1, -2,-3…のように減少します。 たとえば、リスト内の要素のインデックスは次のようになります。 [\"Thanh Hóa\", \"Hà Nội\", \"Sài Gòn\", \"Đà Nẵng\"] --------------------------------------------- -4 -3 -2 -1 インデックスを使用して Python リスト内の要素にアクセスして取得するPython リスト内の任意の要素にアクセスして取得するための構文次の構文を使用して、インデックスで Python リストの要素にアクセスして取得します。 list [index] そこで： listは、要素にアクセスする必要があるリストです indexは、アクセスする必要があるリスト内の要素のインデックスです。 たとえば、次のように python リストの要素を取得します。 Copyprovince = [&quot;Thanh Hóa&quot;, &quot;Hà Nội&quot;, &quot;Sài Gòn&quot;, &quot;Đà Nẵng&quot;]print(province[1])#&gt; Hà Nộiprint(province[2])#&gt;Sài Gònprint(province[-1])#&gt;Đà Nẵng Python でリスト (リスト) の最後の要素にアクセスして取得する最後の要素のインデックスを指定することで、Python でリスト (リスト) の最後の要素にアクセスして取得できます。 リスト内の最後の要素のインデックスを見つけるには、次の 2 つの方法があります。 len()関数を使用して、最後の要素の正のインデックスを見つけます。 たとえば、次のようにリストの最後の要素にアクセスして取得します。 Copyprovin = [&quot;Hà Nội&quot;, &quot;Sài Gòn&quot;, &quot;Đà Nẵng&quot;]last_item_index = len(provin) - 1last_item = provin[last_item_index]print(last_item)#&gt;&gt; Đà Nẵng リストの最後の要素の負のインデックスを使用します 非常に簡単に言えば、リストの最後の要素の負のインデックスは常に に等しく-1、次のようにその値を取得できます。 Copyprovin = [&quot;Hà Nội&quot;, &quot;Sài Gòn&quot;, &quot;Đà Nẵng&quot;]last_item=provin[-1]print(last_item)#&gt;&gt; Đà Nẵng IndexErrorエラーなお、Python のリスト内の要素にインデックスでアクセスして取得する場合、リストに存在しないインデックスを指定すると、以下のIndexErrorエラーが発生します。 Copytỉnh = [&quot;Hà Nội&quot;, &quot;Sài Gòn&quot;, &quot;Đà Nẵng&quot;]print(tỉnh[3])#&gt;&gt;Traceback (most recent call last):#&gt;&gt; File &quot;&quot;, line 2, in &lt;module&gt;#&gt;&gt; print(tỉnh[3])#&gt;&gt;IndexError: list index out of range このエラーが発生します。財布にお金が残っていないのに財布からお金を出したい時ですね。このエラーを回避するには、リストに存在するインデックスのみを指定する必要があります。 まとめ上記 Kiyoshi は、インデックスを介してPython リスト内の要素にアクセスして取得する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python リストに要素を挿入する(insert, slice)","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/chen-phan-tu-vao-list-trong-python","date":"2022-11-16T01:47:36.000Z","updated":"2022-11-16T12:04:27.049Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/chen-phan-tu-vao-list-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/chen-phan-tu-vao-list-trong-python/","excerpt":"python list に要素を挿入するすべての方法に関するチュートリアル。元のリストの指定された位置に要素を挿入する方法、元のリストの指定された位置に複数の要素を挿入する方法、複数の部分を挿入および置換する方法など、Python リストに要素を挿入する方法を学習します。","text":"python list に要素を挿入するすべての方法に関するチュートリアル。元のリストの指定された位置に要素を挿入する方法、元のリストの指定された位置に複数の要素を挿入する方法、複数の部分を挿入および置換する方法など、Python リストに要素を挿入する方法を学習します。 次のように、Python リストに要素を挿入する 3 つの方法があります insert() メソッド: 元のリストの指定された位置に要素を挿入します。 スライス リスト : 元のリストの指定された位置に複数の要素を挿入します スライスリスト : 元のリストの指定された範囲に複数の要素を置き換えて挿入します 尚、python list の最後に要素挿入したい、場合は、append() や extend() などの他のメソッドを使用して、リストに要素を追加し、python でリストを結合してください。 元のリストの指定された位置に要素を挿入します | insert() メソッドPython の insert() メソッドはPython リストの指定された位置に要素を挿入するために使用されます。次の構文で insert() メソッドを使用します。 org_list.insert (index, value) そこで： org_listは元のリストです indexは、元のリストに要素を挿入する位置です valueは、リストに挿入される要素の値です。この値は文字列または数値です。 insert() メソッドは、元のリストの指定されたindexの前にvalueを挿入します。 関連記事: Python のインデックスと Python list の要素にアクセスする方法。. 具体的な例として、次のように文字列を Python リストに挿入します。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.insert(1, &quot;Z&quot;)print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;Z&quot;, &quot;B&quot;, &quot;C&quot;] 上記の通り、Z文字は B の前に挿入されました。 挿入された値を文字列として指定する場合、文字列自体が新しい要素として扱われ、次のように元のリストに挿入されます。 Copymylist = [&quot;Blue&quot;, &quot;Red&quot;, &quot;Green&quot;]# インデックスが 2 の要素の前に文字列 &#x27;White&#x27; を挿入mylist.insert(2, &quot;White&quot;)print(mylist)#&gt;&gt; [&#x27;Blue&#x27;, &#x27;Red&#x27;, &#x27;White&#x27;, &#x27;Green&#x27;]# リストの先頭に文字列 &#x27;Black&#x27; を挿入mylist.insert(0, &quot;Black&quot;)print(mylist)#&gt;&gt; [&#x27;Black&#x27;, &#x27;Blue&#x27;, &#x27;Red&#x27;, &#x27;White&#x27;, &#x27;Green&#x27;] 指定した文字列の各文字を取得して元のリストに挿入する場合は、以下を参照してください。 文字列と同様に、次のように insert() メソッドを使用して数値を Python リストに挿入することもできます。 Copymynum = [1, 2, 3, 4, 5]mynum.insert(3, 6)print(mynum)#&gt;&gt; [1, 2, 3, 6, 4, 5]mylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.insert(1, 3)print(mylist)#&gt;&gt; [&#x27;A&#x27;, 3, &#x27;B&#x27;, &#x27;C&#x27;] insert() メソッドでは、1つの要素のみを python list に挿入できることに注意してください。 元のリストの指定された位置に複数の要素を挿入スライス リスト関数を適用すると、リスト、タプル、または文字列を介して、元のリストの指定された位置に多くの要素を挿入できます。 ここでの考え方は、挿入するすべての要素をタプル、文字列、またはリストに格納し、スライス リストを使用して元のリストの空の範囲をスライスし、指定されたタプルの要素を挿入するというものです。文字列、またはリスト。 使用する構文は次のとおりです。 org_list [index : index ] = tuple,string,list org_list は最初のリスト、index は挿入する位置、タプル、文字列、またはリストを使用して、元のリストに追加する要素を指定します。 参照 : Python のカット (スライス) リスト 具体的な例として、次のように、リストを介して元のリストの指定された位置に多くの要素を挿入します。 Copymynum = list(range(3))print(mynum)#&gt;&gt; [0, 1, 2]mynum[1:1] = [4, 5, 6]print(mynum)#&gt;&gt; [0, 4, 5, 6, 1, 2] タプルを使用して、元のリストの指定された位置に複数の要素を挿入する別の例。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist[2:2] = (&#x27;E&#x27;, &#x27;F&#x27;)print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;C&#x27;] 文字列を使用して、スライス リストによって元のリストの指定された位置に複数の要素を挿入する場合、文字列全体が新しい要素として追加されるのではなく、文字列内の各文字が削除され、リストに追加されることに注意してください。例えば： Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist[2:2] = &#x27;EFG&#x27;print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;C&#x27;] リストをスライスすることで、次のように pythonの リストの最後の位置に要素を挿入することもできます。 Copymylist = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]length = len(mylist)mylist[length:length] = [&quot;4&quot;, &quot;5&quot;]print(mylist)#&gt;&gt; [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;] 元のリストで指定された範囲に複数の要素を置換して挿入スライス リストの別の使い方として、リスト、タプル、または文字列を使用して、元のリストの指定された範囲に複数の要素を挿入および置換できます。 ここでの考え方は、元のリストの範囲内のすべての要素を切り取ってから、指定されたタプル、文字列、リストに既に含まれている新しい要素をそこに挿入するというものです。 使用する構文は次のとおりです。 org_list [start_index : end_index ] = tuple,string,list org_list は初期リストで、start_index と end_index は元のリストに新しい要素を切り出して挿入する範囲です。タプル、文字列、リストには、挿入する新しい要素が含まれます。 たとえば、次のように、元のリストの範囲インデックス [1:3] に新しい要素を置き換えて挿入します。 Copymynum = list(range(5))print(mynum)#&gt;&gt; [0, 1, 2, 3, 4]mynum[1:3] = [7, 8, 9]print(mynum)#&gt;&gt; [0, 7, 8, 9, 3, 4] 次のようにタプルまたは文字列で使用することもできます。 Copymynum = list(range(5))print(mynum)#&gt;&gt; [0, 1, 2, 3, 4]mynum[1:3] = (7, 8, 9)print(mynum)#&gt;&gt; [0, 7, 8, 9, 3, 4]mynum[1:2] = &quot;ABC&quot;print(mynum)#&gt;&gt; [0, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 8, 9, 3, 4] 参照 : Python のカット (スライス) リスト まとめ上記 Kiyoshi は、insert メソッドまたはリストスライス機能を使用して要素を python リストに挿入する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Pythonのextendメソッド","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/extend-trong-python","date":"2022-11-16T01:46:07.000Z","updated":"2022-11-16T12:04:38.299Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/extend-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/extend-trong-python/","excerpt":"Pythonのextendメソッドの使い方。このレッスンの後、python でextendメソッドを使用してリストに要素を追加する方法を学習します。","text":"Pythonのextendメソッドの使い方。このレッスンの後、python でextendメソッドを使用してリストに要素を追加する方法を学習します。 PythonのextendメソッドPythonのextendメソッドは、リスト、タプル、文字列などの iterable (多くの要素を含むオブジェクト) の要素を python のリストの末尾に追加し、そのリストを展開するために使用されるメソッドです。 次の構文を使用して、 Pythonのextendメソッドを使用します。 list.extend(iterable) そこで、 listは元のリスト、iterableは元のリストに追加する要素を含むオブジェクトです。 指定されたリスト、タプル、またはシーケンスのすべての要素が削除され、そのリストの要素として元のリストの最後に追加されます。 たとえば、 Pythonのextendメソッドを使用して、次の例のように、あるリストの要素を別のリストに追加します。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.extend([&quot;D&quot;, &quot;E&quot;])print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;] 上記のように、Python で拡張されたリストがリスト [&#39;D&#39;,&#39;E&#39;] の各要素を取得し、リスト [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]の最後に追加されていることがわかります。 同様に、文字列内の各文字を取得してリストの最後に追加し、そのリストを次のように展開することもできます。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.extend(&quot;GKH&quot;)print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;G&#x27;, &#x27;K&#x27;, &#x27;H&#x27;] または、次のようにタプルから要素を追加して、Python でリストを拡張します。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.extend((1,2,3))print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3] Pythonのextendメソッドを使用する場合、リストの要素として追加されるのはイテラブル自体ではなく、そのイテラブル内の要素が 1 つずつ取得され、リストの最後に追加されることに注意してください。 元のリストにイテラベルを要素として追加する場合は、extend メソッドを使用する代わりに、append メソッドを使用します。 参照: Python の append メソッド まとめ上記 Kiyoshi はPython で extends() メソッドを使用する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで python の基礎を学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Pythonのappendメソッド","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/append-trong-python","date":"2022-11-16T01:45:07.000Z","updated":"2022-11-16T12:04:21.746Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/append-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/append-trong-python/","excerpt":"Pythonのappendメソッドのチュートリアル。このレッスンの後、append を使用して Python のリストに要素を追加する方法を学習します。","text":"Pythonのappendメソッドのチュートリアル。このレッスンの後、append を使用して Python のリストに要素を追加する方法を学習します。 PythonのappendメソッドPythonのappendメソッドは、pythonでリストの末尾に要素を追加するために使用されるメソッドです。append を使用して、数値、リスト、文字列、またはタプルを要素として Python リストの末尾に追加します。 Python では、次の構文で append() を使用します。 list.append(要素) そこで、元のlistに要素を追加するようになります。 この新しい要素は、元のリストの最後に追加されます。この要素は、文字列、数値、リスト、タプルなど、リストに追加できる任意のデータ型で指定できます。 たとえば、次の例のように、文字の要素を元のリストの最後に追加します。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.append(&quot;D&quot;)print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;] または、次のようにリストの最後に番号を追加できます。 Copymynum = list(range(5))print(mynum)#&gt;&gt; [0, 1, 2, 3, 4]mynum.append(6)print(mynum)#&gt;&gt; [0, 1, 2, 3, 4, 6]mynum.append(10)print(mynum)#&gt;&gt; [0, 1, 2, 3, 4, 6, 10] Pythonのappendメソッドを使用して、リストの最後にイテラブルを追加上記のようにリストの末尾に数字または文字を追加するだけでなく、python で append を使用して、タプル、文字列、またはリストなどのイテラブルを別のリストの末尾に追加することもできます。 リストの最後に iterable を指定すると、要素として追加される iterable の各要素ではなく、オブジェクト自体が要素として扱われ、元のリストに追加されることに注意してください。 たとえば、次の例のように、文字列である要素を元のリストに追加します。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.append(&quot;KHG&quot;)print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;KHG&#x27;] または、リストを要素として元のリストに追加すると、次のようになります。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]addlist = [&quot;D&quot;, &quot;E&quot;]mylist.append(addlist)print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, [&#x27;D&#x27;, &#x27;E&#x27;]] タプルをリストに追加するのと似ています。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]addtuple = (1, 2)mylist.append(addtuple)print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, (1, 2)] iterabel の各要素を元のリストに追加するには、append メソッドを使用する代わりに、extend メソッドを使用します。 参照: Python の Extend メソッド まとめ上記 Kiyoshi は、Python で append() メソッドを使用する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで python の基礎を学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"リストに要素を追加し、Pythonでリストを結合する(append, extend, slice)","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/them-phan-tu-vao-list-ket-hop-cac-list-voi-nhau-trong-python","date":"2022-11-16T01:44:07.000Z","updated":"2022-11-16T12:04:59.712Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/them-phan-tu-vao-list-ket-hop-cac-list-voi-nhau-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/them-phan-tu-vao-list-ket-hop-cac-list-voi-nhau-trong-python/","excerpt":"リストに要素を追加し、Python でリストを結合する方法。このレッスンの後、Python でappend()やlist extendsなどのメソッドを使用して 1 つ以上の要素を list の最後に追加する方法と、加算演算子を使用してそれらを連結してリストを結合する方法を学習します。","text":"リストに要素を追加し、Python でリストを結合する方法。このレッスンの後、Python でappend()やlist extendsなどのメソッドを使用して 1 つ以上の要素を list の最後に追加する方法と、加算演算子を使用してそれらを連結してリストを結合する方法を学習します。 次のように、リストに要素を追加する 3 つのメソッドと、Python でリストを連結する 1 つのメソッドがあります。 append() メソッド: 要素 (数値、リスト、タプルなど) を Python リストの最後に追加します。 extend() メソッド: iterable (多数の要素を持つオブジェクト) の要素をリストの末尾に追加する python スライス リスト : リストの末尾に 1 つ以上の要素を追加する python +演算子 : Python でリストを連結および結合する 尚、上記のメソッドは、Python のリストの最後に 1 つ以上の要素を追加するために使用されます。元のリストの指定した位置に要素を追加したい場合は、Python リストに要素を挿入する (挿入、スライス)の記事を参照してください。 Python リストの末尾に要素を追加する | append() メソッド次の構文でpython の append() メソッドを使用して、初期リストの最後に要素を追加します。 list.append(element) そこで、listは元のリストであり、elementは追加したい要素です。 この新しい要素は、元のリストの最後に追加されます。この要素は、文字列、数値、リスト、タプルなど、リストに追加できる任意のデータ型で指定できます。 たとえば、次の例のように、文字の要素を元のリストの最後に追加します。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.append(&quot;D&quot;)print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;] または、次のようにリストの最後に番号を追加できます。 Copymynum = list(range(5))print(mynum)#&gt;&gt; [0, 1, 2, 3, 4]mynum.append(6)print(mynum)#&gt;&gt; [0, 1, 2, 3, 4, 6]mynum.append(10)print(mynum)#&gt;&gt; [0, 1, 2, 3, 4, 6, 10] 元のリストに追加する要素をリスト、文字列、タプルなどの iterable として指定すると、オブジェクト自体が要素として扱われ、元のリストに追加されることに注意してください。 たとえば、次の例のように、文字列である要素を元のリストに追加します。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.append(&quot;KHG&quot;)print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;KHG&#x27;] または、リストを要素として元のリストに追加すると、次のようになります。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]addlist = [&quot;D&quot;, &quot;E&quot;]mylist.append(addlist)print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, [&#x27;D&#x27;, &#x27;E&#x27;]] タプルをリストに追加するのと似ています。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]addtuple = (1, 2)mylist.append(addtuple)print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, (1, 2)] append メソッドは、指定されたオブジェクトをリストの要素としてリストの末尾に追加します。これは、Kiyoshi が以下で説明する拡張方法とは大きく異なります。 リストの最後に iterable の要素を追加 | Python の extendPython の extendメソッドは、リスト、タプル、文字列などの iterable (多くの要素を含むオブジェクト) の要素をリストの末尾に追加し、そのリストを拡張するために使用されるメソッドです。 指定されたリスト、タプル、またはシーケンスのすべての要素が削除され、元のリストの末尾にそのリストの要素として順番に追加されます。これは上で Kiyoshi が紹介した append メソッドとは異なります。 次の構文で Python の extends() メソッドを使用します。 list.extend(iterable) たとえば、Python で list extendsを使用して、次の例のように、あるリストの要素を別のリストに追加します。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.extend([&quot;D&quot;, &quot;E&quot;])print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;] 上記のように、Python の extends() メソッドが [“D”, “E”]の各要素を取得し、 [“A”, “B”, “C”]の最後に追加されていることがわかります。 同様に、文字列内の各文字を取得してリストの最後に追加し、そのリストを次のように展開することもできます。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.extend(&quot;GKH&quot;)print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;G&#x27;, &#x27;K&#x27;, &#x27;H&#x27;] または、次のようにタプルから要素を追加して、Python でリストを拡張します。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.extend((1,2,3))print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3] Pythonのappend（）メソッドとextend（）メソッドの違いPython の append() メソッドと extend() メソッドの違いは、次のように要約されます。 append() メソッド extend() メソッド リストの最後に要素を 1 つだけ追加する リストの最後に複数の要素を追加できる 元のリストに引数を追加する 引数の要素を元のリストに追加する 元のリストの長さは 1 増加する 初期リストの長さは、引数の要素数を増やす append() と extend() の最大の違いは、append() は元のリストに引数自体を要素として追加するのに対し、extend() は引数の要素を元のリストに追加することです。 たとえば、これら 2 つの方法を使用してリストを別のリストに追加する場合、結果は次のように完全に異なります。 append メソッドは、新しいリストを要素として古いリストに追加します。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.append([&quot;D&quot;, &quot;E&quot;])print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, [&quot;D&quot;, &quot;E&quot;]]print(len(mylist))#&gt;&gt; 4 extend メソッドは、新しいリストの各要素を古いリストに追加します Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist.extend([&quot;D&quot;, &quot;E&quot;])print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;]print(len(mylist))#&gt;&gt; 5 リストの末尾に 1 つ以上の要素を追加する python | スライスリストappend メソッドに加えて、python リストのスライス機能を使用して、要素を python リストの末尾に追加することもできます。 Python リストのスライス機能は、Python リスト内の複数の要素の値を同時に変更するために使用されます。この関数を使用して、 python のリストの最後に 1 つ以上の要素を追加することもできます。ここでの考え方は、元のリストの最後の位置を、追加する要素を含む新しいリストに置き換え、元のリストの最後の位置に要素を追加することです。 また、スライス リストを使用して要素をリストに追加する構文は次のようになります。 list[len(list) : len(list)] = other_list ここで、 list [len (list) : len (list)] は元のリストの最後の位置を指定します。 たとえば、次のように Python でリストの末尾に要素を追加します Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist[len(mylist):len(mylist)] = [&quot;D&quot;]print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;] 同様に、次のように Python でリストの最後に複数の要素を追加することもできます。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]mylist[len(mylist):len(mylist)] = [&quot;D&quot;, &quot;E&quot;,&quot;F&quot;]print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;] Pythonでリストを結合するPython でリストを結合するには、+演算子を使用してそれらを連結し、次のように新しいリストを作成します。 list A + list B + list C + … たとえば、次のように python で 2 つのリストを連結できます。 Copylist1 = [&quot;A&quot;, &quot;B&quot;]list2 = [&quot;C&quot;, &quot;D&quot;]mylist = list1 + list2print(mylist)#&gt;&gt;[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;] +演算子を使用して複数のリストを連結することで、複数のリストを結合することもできます。 Copylist1 = [&quot;A&quot;, &quot;B&quot;]list2 = [&quot;C&quot;, &quot;D&quot;]list3 = [&quot;E&quot;, &quot;F&quot;]list4 = list1 + list2 + list3print(list4)#&gt;&gt;[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;] まとめ上記 Kiyoshi は、リストに要素を追加する方法と python でリストを結合する方法を示しました。レッスンの内容をよりよく理解するために、次の例で練習してください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Pythonでリストをスライス","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/cat-lat-list-trong-python","date":"2022-11-16T01:40:39.000Z","updated":"2022-11-16T14:03:08.330Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/cat-lat-list-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/cat-lat-list-trong-python/","excerpt":"Python でリストをスライスする方法のチュートリアル。このレッスンの後、Python でのスライス リストの概念と、インデックスを使用して Python でリストをスライスする方法を学習します。","text":"Python でリストをスライスする方法のチュートリアル。このレッスンの後、Python でのスライス リストの概念と、インデックスを使用して Python でリストをスライスする方法を学習します。 関連記事 : Python でのインデックスと、Python でリスト内の要素にアクセスする方法 Pythonのスライスリストとは何ですか?Python のスライス リストとも呼ばれる Python のスライス リストは、元のリストの範囲内の要素を取得して新しいリストを作成する操作です。クリッピング範囲は、Python の要素のインデックスを介して指定されます。 Python でのスライス リストの構文は次のとおりです。 org_list [ start_index : end_index : step] そこで、 org_listは元のリストです start_index : 切り取り開始位置の要素のインデックス end_index: クリッピング位置の最後にある要素のインデックス スライス リスト python の結果には、スライスの最初の要素が含まれますが、カットの最後の要素は含まれないことに注意してください。切り取り終了位置の要素全体を取得したい場合は、切り取り結果にその要素を含めることができるように、 end_index を 1 だけ指定する必要があります。 Python でのスライス リストの具体例は次のとおりです。 Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(nums)#&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]cut_list= nums[0:5]print(cut_list)#&gt;&gt; [0, 1, 2, 3, 4]cut_list2 = nums[3:7]print(cut_list2)#&gt;&gt; [3, 4, 5, 6] Pythonの スライス リストは元のリストを変更せず、元のリストの範囲内の要素をコピーして新しいリストを作成するだけであることに注意してください。 Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]#Trước khi cắtprint(nums)#&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]nums_cut = nums[2:7]print(nums_cut)#&gt;&gt;[2, 3, 4, 5, 6]#カット後、元のリストは変わりません。print(nums)#&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Python でスライス方法の一覧元のリストから範囲を切り取るクリッピングの開始位置と終了位置をそれらの位置にある要素のインデックスで指定することにより、次の例のようにpython リストから範囲を切り捨てることができます。 Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(nums[2:5]) #&gt;&gt; [2, 3, 4]print(nums[-5: -2])#&gt;&gt; [5, 6, 7] 同様に、次のように、要素が文字列であるリストから範囲を切り取ることができます。: Copyl = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]print(l[2:4])#&gt;&gt; [&#x27;c&#x27;, &#x27;d&#x27;]print(l[1:5])#&gt;&gt; [&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;] 元のリストのインデックス範囲外のインデックス値でスライスの開始位置または終了位置を指定した場合、スライス リスト機能は元のリストのみから可能な最大範囲のみをスライスできます。例えば： Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(len(nums))#&gt;&gt; 10newlist = nums[2:100]print(newlist)#&gt;&gt; [2, 3, 4, 5, 6, 7, 8, 9]newlist2 = nums[-80:-3]print(newlist2)#&gt;&gt; [0, 1, 2, 3, 4, 5, 6] リストpythonの前から真ん中までの範囲を切り取るPython リストの先頭から途中までを切り出すにはリスト スライス構文を記述するときにstart_indexを省略します。たとえば、[:5] を書きます。すると、[0:5] と同じく、Python は暗黙のうちに 0 から始まる位置を理解し、同様にリストを切り出します。 Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]newlist1= nums[0:5]newlist2= nums[:5]print(newlist1)print(newlist2) 結果： Copy[0, 1, 2, 3, 4][0, 1, 2, 3, 4] リストpythonの途中から最後までの範囲を切り取るリストの途中からリストの最後までPythonでリストをスライス（スライス）するには、リストのスライス構文を書くときにend_indexを省略します。たとえば、 [5:]を書きます。すると、Python は次の例のようにリストの要素数 (len()関数で計算できます) で末尾の位置を暗黙のうちに理解します。 Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]newlist3= nums[5:]newlist4= nums[5:10]newlist5= nums[5:len(nums)]print(newlist3)print(newlist4)print(newlist5) Kết quả: Copy[5, 6, 7, 8, 9][5, 6, 7, 8, 9][5, 6, 7, 8, 9] Python のリストを逆スライス負のインデックスで開始位置と終了位置を指定すると、Python でリストを逆方向にスライス (スライス) できます。このメソッドを使用して、python でリストを逆にすることができます。 例えば： Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(nums[::-1])#&gt;&gt; [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] 次のように、元のリストをカットバックするときに、いくつかの要素をスキップしてスキップすることもできます。 Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(nums[::-3])#&gt;&gt; [9, 6, 3, 0] 次のように、元のリストの範囲内で Python のリストを逆スライスすることもできます。 Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(nums[8:2:-1]) #&gt;&gt; [8, 7, 6, 5, 4, 3]print(nums[-2:-9:-2])#&gt;&gt; [8, 6, 4, 2] 参照 : python でリストを逆にする(reverse, reversed). 元のリストを指定された位置で 2 つの部分に分割しますPythonのスライスリストを使用することにより、元のリストを指定された場所で 2 つの小さな部分に分割できます。次の例では、次のように元のリストをインデックス位置 4 で 2 つの小さなリストに分割します。 Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]nums1 = nums[:4]nums2 = nums[4:]print(nums1)print(nums2) 結果： Copy[0, 1, 2, 3][4, 5, 6, 7, 8, 9] Pythonでリストを切り取るときに要素をジャンプしてスキップする | ステップ引数Python でのリストスライスの徳技は、リストをスライスするときにいくつかの要素をジャンプおよびスキップできることです。 Python でリストをスライスするときに追加の step 引数を使用することで、次の例のように、インデックスを 1 ステップ離して要素を飛び越えてスライスすることができます。 Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(nums[::1]) print(nums[::2]) print(nums[::3]) 結果： Copy[0, 1, 2, 3, 4, 5, 6, 7, 8, 9][0, 2, 4, 6, 8][0, 3, 6, 9] 次のように python リストをスライスするときに、範囲内の要素をスキップしてスキップすることもできます。 Copynums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(nums[2:7:1]) print(nums[2:7:2]) print(nums[-7:-2:3]) 結果： Copy[2, 3, 4, 5, 6][2, 4, 6][3, 6] まとめ上記 Kiyoshiはpython でリストをスライス する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python リストの要素を削除 (del, pop, remove, clear)","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/xoa-phan-tu-trong-list-python","date":"2022-11-16T01:34:12.000Z","updated":"2022-11-16T12:05:10.245Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/xoa-phan-tu-trong-list-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/xoa-phan-tu-trong-list-python/","excerpt":"Pythonリストの要素を削除するすべての方法のチュートリアル。インデックスによってリストから要素を削除する、指定された値を持つ要素を削除する、範囲で Python リストから要素を削除する、またはリスト内の要素全体を削除するなど、Python リストから要素を削除するすべての方法を学習します。このレッスンの後に、 del ステートメント、pop() メソッド、remove()メソッド、およびclear()メソッドを使用したメソッドを使用します。","text":"Pythonリストの要素を削除するすべての方法のチュートリアル。インデックスによってリストから要素を削除する、指定された値を持つ要素を削除する、範囲で Python リストから要素を削除する、またはリスト内の要素全体を削除するなど、Python リストから要素を削除するすべての方法を学習します。このレッスンの後に、 del ステートメント、pop() メソッド、remove()メソッド、およびclear()メソッドを使用したメソッドを使用します。 Python リストの要素を削除するには、次の 5 つの方法があります。 pop() メソッド: インデックスによるリストの要素の取得と削除 list remove in python: 指定された値と同じリスト内の最初の要素を削除します del ステートメント: 指定された範囲内の要素を削除します clear() メソッド: すべての要素を削除します Pythonでのリスト内包表記:条件によって要素を削除する 尚、Python リストから重複した要素を削除したい場合は、Python リストから重複を削除するの記事を参照してください。 インデックスによってリストの要素を取得および削除 | pop() メソッドpop() メソッドは要素を削除し、指定されたインデックス位置のリストから削除します 削除する要素のインデックスを pop() メソッドの引数として指定し、次の構文を使用してリストから要素を削除します。 list. pop( index ) ここで、listは要素を削除したいリストで、 indexは削除する要素のインデックスです。 例えば： Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]popped1 = mylist.pop(2)print(popped1)#&gt;&gt; yellowprint(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;black&#x27;] インデックスを-1で指定すると、次のようにリストの最後の要素を削除することもできます。 Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]popped1 = mylist.pop(-1)print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;] 次のように pop() 関数で index 引数を省略して、リストの最後の要素を削除することもできます。 Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]popped1 = mylist.pop()print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;] pop() メソッドを使用する場合、指定されたインデックス引数がリストに存在しない場合、IndexError が発生することに注意してください。 Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]popped1 = mylist.pop(5)#&gt;&gt; IndexError: pop index out of range 指定された範囲内の要素を削除します | delステートメントdel ステートメントは、リスト内の指定された範囲内の要素を削除するのに役立ちます。この範囲はPythonのスライスリスト機能の使い方で指定します。 参照 : Python のスライス リスト 次の 2 種類の構文で、python で del ステートメントを使用し、pythonで リストから要素を削除できます。 指定したインデックスでリストから要素を削除: del list [ index ] 指定した範囲内の複数の要素を削除: del list [ start : end] たとえば、次のように del ステートメントを使用して、python リストから要素を削除できます。 Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]del mylist[2]print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;black&#x27;]del mylist[3]print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;black&#x27;] または、次のように del ステートメントを使用して、Pythonで指定された範囲内の要素を削除できます。 Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]del mylist[1:3]print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;black&#x27;] 次のように、del ステートメントを使用して、Python リスト内のすべての要素を削除することもできます。 Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]del mylist[:]print(mylist)#&gt;&gt; [] 尚、python スライス リストで step を使用すると、次のように del ステートメントでpython リスト内の要素をジャンプして削除できます。 Copyl = list(range(10))del l[2:8:2]print(l)# [0, 1, 3, 5, 7, 8, 9]l = list(range(10))del l[::3]print(l)# [1, 2, 4, 5, 7, 8] 指定された値と同じリスト内の最初の要素を削除します | remove()メソッドPython の remove()メソッドは指定された引数と同じ値を持つリスト内の最初の要素を見つけて、リストから削除するために使用されるメソッドです。 次の構文で Python の remove() メソッドを使用します。 list.remove(value) そこで、listは要素を削除するリストであり、valueはリストから削除する要素の値です。 たとえば、Python で list remove を使用して、次のようにリストから要素を削除します。 Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27; , &#x27;blue&#x27;]print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;, &#x27;blue&#x27;]mylist.remove(&#x27;yellow&#x27;)print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;black&#x27;, &#x27;blue&#x27;] remove() メソッドは、最初の要素が存在する場合にのみ、リスト内の左から右に最初の要素を削除することに注意してください。例えば： Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27; , &#x27;blue&#x27;]print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;, &#x27;blue&#x27;]mylist.remove(&#x27;blue&#x27;)print(mylist)#&gt;&gt; [&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;, &#x27;blue&#x27;] ここでも、指定された値がリストに存在しない場合、ValueError が発生します。 Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]mylist.remove(&#x27;gray&#x27;)#&gt;&gt; ValueError: list.remove(x): x not in list Pythonリストのすべての要素を削除 | clear()メソッドclear() メソッドは、リスト内のすべての要素を削除し、リストを空にします。次の構文で、Python で clear() メソッドを使用します。 list.clear() リスト内のすべての要素が削除されますが、リスト オブジェクト自体は削除されず、空になるだけであることに注意してください。 例えば： Copymylist = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]mylist.clear()print(mylist)#&gt;&gt; [] 条件によってPythonリストの要素を削除Pythonのリスト内包表記を適用して、Python リストから要素を削除できます。条件に応じて要素を削除すると言われていますが、実際には古いリストを削除するのではなく、古いリストから与えられた条件に応じた要素を取得し、削除する要素を含まない新しいリストを作成します。 . たとえば、数列の奇数を削除したい場合、次のようにリスト内包表記を使用します。 Copymynum = list(range(10))print(mynum)#&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]delete_odd = [num for num in mynum if num % 2 = 0]print(delete_odd)#&gt;&gt; [0, 2, 4, 6, 8]delete_even = [num for num in mynum if num % 2 = 1]print(delete_even)#&gt;&gt; [1, 3, 5, 7, 9] 文字列でも同じことができます。 Copyl = [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, &#x27;Bob&#x27;, &#x27;David&#x27;]print(l)# [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, &#x27;Bob&#x27;, &#x27;David&#x27;]print([s for s in l if s != &#x27;Bob&#x27;])# [&#x27;Alice&#x27;, &#x27;Charlie&#x27;, &#x27;David&#x27;]print([s for s in l if s.endswith(&#x27;e&#x27;)])# [&#x27;Alice&#x27;, &#x27;Charlie&#x27;] 参照 :Python でのリスト内包表記 リストの重複要素を削除 | set() 関数通常、次の例で set() 関数を使用して、python list で重複する要素を削除する方法がたくさんあります。 Copymylist = [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27; , &#x27;blue&#x27;]unique_list=list(set(mylist))print(unique_list)#&gt;&gt; [&#x27;blue&#x27;, &#x27;red&#x27;, &#x27;black&#x27;, &#x27;yellow&#x27;] set() 関数やその他の方法を使用して Python リストから重複した要素を削除する方法の詳細については、Python リストから重複した要素を削除の記事を参照してください。 まとめ上記 Kiyoshi は、すでにPython リストの要素を削除する方法をすべて示しています。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python でのリスト内包表記の使用","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/list-comprehension-trong-python","date":"2022-11-16T01:29:37.000Z","updated":"2022-11-16T11:58:46.658Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/list-comprehension-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/list-comprehension-trong-python/","excerpt":"Python でリスト内包表記を使用する方法。このレッスンの後、Pythonでのリスト内包表記の概念と、リスト内包表記を使用してリストを作成する方法を学習します。","text":"Python でリスト内包表記を使用する方法。このレッスンの後、Pythonでのリスト内包表記の概念と、リスト内包表記を使用してリストを作成する方法を学習します。 Python のリスト内包表記とは内部記述方法としても知られるPython のリスト内包表記は、他の言語では使用できない python でのみ使用できる特別な方法であり、非常に簡単な方法で python でリストを作成するのに役立ちます。 リストを操作していると、複雑な構造のリストを操作する必要がある場合がありますが、通常のリスト作成方法では、リストを初期化するために多くのコードが必要になります。 しかし、単純なものは複雑なものよりも優れているというpythonの原則を持つpython の創設者は、リスト内包表記を作成しました。これは、python だけが持つことができる特別な方法です。、必要なコード行を短縮し、瞬く間に複雑なリストを作成するのに役立ちます。 書くコードの行数を短くできることに加えて、Pythonのリスト内包法は処理速度が他の方法より速いとも言われています。 リスト内包表記を使用して Python でリストを作成するPythonで内包構文をリストする上記のように、Python のリスト内包表記は主に Python でリストを作成するために使用します。 リストの理解は単純なリストを作成するのに役立つだけでなく、複雑な多次元リストを作成することもできますが、従来のリスト作成方法では、それを完成させるために多くの処理が必要です。. Python でリスト内包表記を使用して、次の構文でリストを作成します [expression for variable in iterable] そこで： iterable: リスト、タプル、範囲、セットなど、Python の多くの要素を含むオブジェクト variable: iterableから取得した要素の値を割り当てる変数 expression: variable変数で計算する式 処理プロセスについて: for ステートメントを使用して iterableの要素を順番に取得し、その要素の値をvariable変数に割り当てます。 expression式を使用して、 variable 変数で計算を行い、結果を出力します。 上記の結果は、新しいリストに要素を作成するために使用されます。 リスト内包表記を使用して Python でリストを作成する方法の例をいくつか見てみましょう。 Python でのリスト内包表記の具体的な使用例1から5までの数字のリストを作る 通常の方法 Copyold_list = list(range(0,6))comprehension_list = []for phantu in old_list: comprehension_list.append(phantu) Python でリスト内包表記を使用する Copycomprehension_list = [number for number in range(0,6)] どちらも同じ結果になります。 Copyprint(comprehension_list)#&gt;&gt;[0, 1, 2, 3, 4, 5] ご覧のとおり、結果は同じですが、リスト内包表記を使用すると、コードを短くして、必要な労力を減らすことができます。 1 から 5 までの数字の 2 乗を要素とするリストを作成する 通常の方法 Copyold_list = list(range(0,6))comprehension_list = []for phantu in old_list: phantu_moi = phantu**2 comprehension_list.append(phantu_moi) Python でリスト内包表記を使用する Copycomprehension_list = [number**2 for number in range(0,6)] どちらも同じ結果になります。 Copyprint(comprehension_list)#&gt;&gt; [0, 1, 4, 9, 16, 25] 異なる文字列のリストを指定して、LOWER (小文字) 形式の文字列で新しいリストを作成します。 この問題を解決するには、lower() メソッドを組み合わせて、python 文字列の大文字を小文字に変換する必要があります。 次のように、Python でリスト内包表記を使用します。 Copylist_thanhpho = [&#x27;Long An&#x27;, &#x27;Ha Noi&#x27;,&#x27;Nam Dinh&#x27;]list_thanhpho_thuong = [thanhpho.lower() for thanhpho in list_thanhpho]print(list_thanhpho_thuong)#&gt;&gt; [&#x27;long an&#x27;, &#x27;ha noi&#x27;, &#x27;nam dinh&#x27;] 通常の記述では、式が複雑になればなるほど、コーディングする必要がある行数が増えることがわかります。しかし、リスト内包表記を使用すると、問題を解決するために必要なコードは 1 行だけです。IT’S SO COOL リスト内包表記 python での自己生成関数の使用上記ではlower、upper、足し算、引き算、掛け算、割り算などの python の組み込み関数を計算式で使用しました。組み込み関数を使用するだけでなく、カスタム関数を使用して、次の例のようにリスト内包表記 python で計算式を指定することもできます。 与えられた整数のリストがあります。各整数の累乗を要素として新しいリストを作成しましょう Copylist_số = list(range(11))#独自の累乗関数を作成します。def tim_luy_thua(số): return số ** 2# 新しく作成した関数でリスト内包表記を使用します。list_mới = [tim_luy_thua(số) for số in list_số]print(list_mới)#&gt;[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 動物の名前のリストを指定して、4 本足の動物の名前を含む新しいリストを作成します。. Copylist_animal = [&#x27;犬&#x27;, &#x27;猫&#x27;, &#x27;蛇&#x27;, &#x27;象&#x27;, &#x27;魚&#x27;]##Tự tạo một hàm tìm thú bốn chân def tim_thu_bon_chan (animal): if animal in [&#x27;犬&#x27;, &#x27;猫&#x27;,&#x27;象&#x27;]: return animal # 新しく作成した関数でリスト内包表記を使用します。thu_bon_chan = [animal for animal in list_animal if tim_thu_bon_chan(animal)]print(thu_bon_chan)#&gt;[&#x27;犬&#x27;, &#x27;猫&#x27;, &#x27;象&#x27;] IF関数を使用した Python でのリスト内包表記の使用Python で条件付き関数のIFを使用してリスト内包表記を使用することもできます。これで、IF関数の条件式が true の場合のみ、for ループが実行されて新しいリストの要素が作成されます。書き込み構文は次のようになります。 [expression for variable in iterable if if_expression] そこで： iterable:リスト、タプル、範囲、セットなど、Python の多くの要素を含むオブジェクト。 variable:iterableから取得した要素の値を割り当てる変数です。 if_expression: forループの実行を継続するかどうかを検討する条件式です expression: variable変数で計算する式です: 処理プロセスについて: for ステートメントを使用してiterableの要素を順番に取得し、その要素の値をvariable変数に割り当てます if_expression条件式を判定。 True の場合、for ループに進み、逆の場合はループをスキップ if_expressionがtrue の場合、expression式を使用し、variable変数を計算、結果を返します 上記の結果は、新しいリストに要素を作成するために使用されます。 次の具体例を見てみましょう。 元の数のリストから新しい偶数のリストを作成する Copynumbers = [0,1,2,3,4,5,6,7,8]even_numbers = [num for num in numbers if num % 2 ==0] リストの作成と range 関数を組み合わせて、上記の例を次のように非常に短く書くことができます。 Copyeven_numbers = [num for num in list(range(9)) if num % 2 ==0] どちらも同じ結果になります。: Copyprint(even_numbers)#&gt;&gt; [0, 2, 4, 6, 8] ここでは、表記法を使用%して除算の剰余を取得します。詳細はPython の算術演算子でをご覧ください。 範囲関数を使用して新しいリストを作成する方法の詳細についてはPython で iterable からリストを作成するの記事を参照してください。 まとめPython でのリスト内包表記は、Pythonを記述する特殊な方法であるため、この記述に慣れていない場合は、理解するのが難しいことがあります。しかし、一度慣れると、中毒になり、通常の方法で書く必要がなくなることを保証します.処理能力とコードを削減できるという利点があるため、Python で書かれたプロジェクトでは、このような書き方に多く遭遇する機会があります。今日もう一度例を練習して、Python でのリストの理解をマスターしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python リストを逆にする (reverse, reversed)","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/dao-nguoc-list-python","date":"2022-11-16T01:29:08.000Z","updated":"2022-11-16T12:04:32.536Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/dao-nguoc-list-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/dao-nguoc-list-python/","excerpt":"Pythonでリストを逆にする方法をすべてチュートリアルします。このレッスンの後、 reverse() メソッドおよびスライス python リストを使用して、python でリストを逆にする方法をすべて学習します。","text":"Pythonでリストを逆にする方法をすべてチュートリアルします。このレッスンの後、 reverse() メソッドおよびスライス python リストを使用して、python でリストを逆にする方法をすべて学習します。 次のように、Pythonでリストを逆にする3つの方法があります。 reverse() メソッド: Python で元のリストを逆にする リストスライス: リストを逆にして、新しいリストを作成します Pythonの逆関数 : リストを逆にしてイテレータを作成する これらの方法については、以下で説明します。 Pythonでリストを逆にする | reverse() メソッドPython の reverse() メソッドは、元のリストの要素の順序を逆にします。これは破壊的な処理であり、要素を逆順にして元のリストを再構築します。 次の構文で Python の reverse() メソッドを使用します。 orinary_list . reverse () orinary_list は元のリストで、元に戻す必要があります。 たとえば、reverse() メソッドを使用して、Python で一連の数字を次のように逆にします。 Copyorinary_list = [1, 2, 3, 4, 5]orinary_list.reverse()print(orinary_list)#&gt;&gt; [5, 4, 3, 2, 1] 同様に、Python でリストを逆にするために reverse() を使用します。要素は次のように文字列です。 Copymylist = [&#x27;Ali&#x27; , &#x27;Bob&#x27; , &#x27;Eva&#x27; , &#x27;Adam&#x27;]mylist.reverse()print(mylist)#&gt;&gt; [&#x27;Adam&#x27;, &#x27;Eva&#x27;, &#x27;Bob&#x27;, &#x27;Ali&#x27;] reverse() メソッドを実行した後、元のリストは変更されますが、reverse() メソッド自体は次のように None を返します。 Copyprint(org_list.reverse())# None return() メソッドの戻り値が None であることを知らない場合、プログラムで論理的な間違いを犯す可能性が非常に高くなります。たとえば、 pythonで反転したリストを出力する場合、reverse() で反転したリストを出力する代わりに、reverse() メソッドの結果を次のように出力します。 Copyl = [&#x27;a&#x27; , &#x27;b&#x27;, &#x27;c&#x27;]# Cách in sai:print(l.reverse())#&gt;&gt; None.# Cách in đúng:l.reverse()print(l)#&gt;&gt; [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;] Pythonでリストを逆にして新しいリストを作成するPythonでは、リストのスライス関数を使用してリストを逆にすることもできます。pythonでリストをスライスする際に引数のstep = -1を指定すると、スライスされるリストは元のリストとは逆順になります。このプロパティを利用して、次の例のようにPythonでリストを逆にすることができます。 Copyorinary_list = [1, 2, 3, 4, 5]new_list = orinary_list[::-1]print(org_list)print(new_list)# [1, 2, 3, 4, 5]# [5, 4, 3, 2, 1] 上記の reverse() メソッドとは異なり、リストをスライスすると、元のリストと反対の要素を持つ新しいリストが作成され、元のリスト自体は変更されないことに注意してください。 Python でリストを逆にしてイテレータを作成する | Pythonのreversed関数Pythonのreversed 関数は、指定されたリスト内の要素を取り、元のリストとは逆の要素の順序でイテレータを作成する組み込みの Python関数です。 Python で list() 関数を使用して組み合わせると、イテレータ (reversed() 関数の結果) を新しいリストに変換できます。要素の順序は元のリストから逆になります。 次の構文で Python の reversed() 関数を使用します。 list_iterator = reversed ( orginary_list ) ここで、orginary_list は反転される初期リストであり、list_iterator は生成される反復子です。 具体例: Copyorginary_list = [&#x27;a&#x27; , &#x27;b&#x27;, &#x27;c&#x27; , &#x27;d&#x27; , &#x27;e&#x27;]print(orginary_list)#&gt;&gt; [&#x27;a&#x27; , &#x27;b&#x27;, &#x27;c&#x27; , &#x27;d&#x27; , &#x27;e&#x27;]list_iterator = reversed(orginary_list)print(list_iterator)#&gt;&gt; &lt;list_reverseiterator object at 0x14d5e9b41340&gt; reversed() は、リストではなくイテレータを返すことに注意してください。したがって、イテレータを出力すると、結果は上記のようになります。イテレータ内の要素を取得して出力するには、次のように for ループを使用する必要があります。 Copyfor i in list_iterator: print(i)#&gt;&gt; e#&gt;&gt; d#&gt;&gt; c#&gt;&gt; b#&gt;&gt; a python の list() 関数と組み合わせると、次のように、上記のイテレータを元のリストと逆の要素順序を持つ新しいリストに変換できます。 Copynew_list = list(list_iterator)print(new_list)#&gt;&gt;[&#x27;e&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;] 一般に、次のように記述された reversed() 関数を使用して、Python でリストを反転します。 Copyorginary_list = [&#x27;a&#x27; , &#x27;b&#x27;, &#x27;c&#x27; , &#x27;d&#x27; , &#x27;e&#x27;]new_list = list(reversed(orginary_list))print(orginary_list)print(new_list)#&gt;&gt; [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]#&gt;&gt; [&#x27;e&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;] まとめ上記 Kiyoshi はpython でリストを反転する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python でリストを作成する","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/khoi-tao-list-trong-python","date":"2022-11-16T01:26:37.000Z","updated":"2022-11-16T12:04:40.688Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/khoi-tao-list-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/khoi-tao-list-trong-python/","excerpt":"Python でリストを作成する方法のチュートリアル。このレッスンの後、Python でリストを作成するすべての方法を学習します。","text":"Python でリストを作成する方法のチュートリアル。このレッスンの後、Python でリストを作成するすべての方法を学習します。 Python でリストを作成するには、次の 5 つの方法があります。 [] を使用する: リスト内の要素の値を直接指定する 変数の使用: リスト内の要素の値を間接的に指定する *演算子を使用します。リストを繰り返し処理し、新しいリストを作成します。 list() 関数の使用: 文字列、タプル、辞書を Python のリストに変換する range() 関数の使用: 要素が連続した数列であるリストを作成します 要素を直接指定して Python でリストを作成するPython でリストを作成するには、次の構文を使用して、[ ]の内に要素の値を,で区切って直接指定します。 要素1, 要素2, …] 要素は、数値や文字列など、Python が処理できる任意のデータ型にすることができます。例えば： Copy[10, 20, 30, 40, 50][&#x27;Hanoi&#x27; , &#x27;Saigon&#x27;, &#x27;Cantho&#x27;] 同じリスト内の要素ごとに異なるデータ型を使用することもできます。 Copy[&#x27;Kiyoshi&#x27;, 30 , True] また、リストを別のリストの要素として使用することもできす。 Copy[&#x27;orange&#x27; , &#x27;apple&#x27; , [ &#x27;Green Strawberry&#x27; , &#x27;Red Strawberry&#x27; ]] 次のように記述して、Python で空のリストを作成することも できます。 Copy[] リストを作成したら、そのリストをプログラムで使用する変数に割り当てることができます。 Copybasket_fruit = [ &#x27; Orange&#x27; , &#x27;Apple&#x27; , [ &#x27;Green Strawberry&#x27; , &#x27;Red Strawberry&#x27; ] ]for fruit in basket_fruit: print(fruit) 結果 Orange Apple [ 'Green Strawberry' , 'Red Strawberry' ] 要素の値を間接的に指定して Python でリストを作成する要素の値を直接指定する代わりに、変数に値を割り当て、その変数を使用してリストを初期化することにより、変数を介して要素の値を間接的に指定します。 たとえば、要素の値を変数 x、y に割り当て、これらの変数を使用して次のように Python リストを作成します Copyx = 10y = 15numlist = [x, y]print (numlist) 結果： [10, 15] ここで、リストを作成するときに変数の値を使用して要素の値を初期化するだけであり、変数とリスト内の要素との間に参照関係を作成しないことに注意してください。 したがって、リストを作成した後に変数の値を変更しても、リスト内の要素の値は変更されません。 たとえば、リストを作成するために使用される変数 x と y の値が変更されても、リスト内の要素の値は変更されません。 Copyx = 10y = 15numlist = [x, y]print (numlist)#x, y の値を変更x = 20y = 25print (numlist) 結果： [10, 15] [10, 15] リストを反復処理して新しいリストを作成次の構文で乗算演算子を使用して、リストを反復処理し、古いリストから繰り返される要素を含む新しいリストを作成できます。 new_list = org_list * num ここで、new_list は、リスト org_list を num 回繰り返して作成された新しいリストです。 具体的には、1 つの要素を持つリストをループし、次のように新しいリストを作成します。 10 個のゼロのリストを初期化する Copyorg_list = [0]numlist = org_list * 10print(numlist)#&gt;&gt; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 次のように 1 行に短縮することもできます。 Copynumlist = [0] * 10print(numlist)#&gt;&gt; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] 文字列と同様に、次のように 6 つの「null」文字列のリストを初期化できます。 Copynumlist = [&#x27;null&#x27;] * 6print(numlist)#&gt;&gt; [&#x27;null&#x27;, &#x27;null&#x27;, &#x27;null&#x27;, &#x27;null&#x27;, &#x27;null&#x27;, &#x27;null&#x27;] これは、初期値が同じで特定の要素数のリストを作成したい場合に非常に便利です。 さらに、この反復を使用して、多くの要素を含むリストを反復し、次のように新しいリストを作成することもできます。 Copynumlist = [10, 20, 30] * 3print (numlist)#&gt;&gt; [10, 20, 30, 10, 20, 30, 10, 20, 30]str_list = [&#x27;a&#x27;,&#x27;i&#x27;,&#x27;u&#x27;,&#x27;e&#x27;,&#x27;o&#x27;] * 2print(str_list)#&gt;&gt; [&#x27;a&#x27;, &#x27;i&#x27;, &#x27;u&#x27;, &#x27;e&#x27;, &#x27;o&#x27;, &#x27;a&#x27;, &#x27;i&#x27;, &#x27;u&#x27;, &#x27;e&#x27;, &#x27;o&#x27;] 文字列、タプル、辞書をリストに変換Python の list() 関数は、文字列、タプル、辞書などのイテラブルを Python のリストに変換するために使用されます。 たとえば、次のように list() 関数を使用して、Python でタプルをリストに変換します。 Copynums = list((1, 2, 3, 4, 5))print(nums)#&gt;&gt; [1, 2, 3, 4, 5] 同様に、次のように Python で文字列をリストに変換することもできます。 Copystrs = list(&#x27;abcde&#x27;)print(strs)#&gt;&gt;[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;] この部分の詳細な手順については、List() function および how to create a list from iterable in python をの記事参照してください。. 一連の数字を要素とするリストを作成するlist() 関数と range() 関数を組み合わせることで、次の構文を使用して、要素が連続した数列であるリストを作成できます。 newlist = list(range(start, end, step)) 例えば： Copynums1 = list(range(5))print(nums1)#&gt;&gt; [0, 1, 2, 3, 4]nums2 = list(range(-5, 6))print(nums2)#&gt;&gt; [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]nums3 = list(range(1, 11, 2))print(nums3)#&gt;&gt; [1, 3, 5, 7, 9] Hướng dẫn chi tiết về phần này, bạn cũng có thể tìm thấy tại bài viết Tạo list từ iterable trong python. この部分の詳細な手順についてはCreate list from iterable in pythonの記事にも記載されています。 まとめ上記 Kiyoshi はpython でリストを作成する方法を示しました。レッスンの内容をよりよく理解するために、今日の例で練習してください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Pythonで2つのリストを比較し、同じ要素と異なる要素を取得","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/so-sanh-2-list-trong-python","date":"2022-11-16T01:20:11.000Z","updated":"2022-11-17T11:21:27.599Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/so-sanh-2-list-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/so-sanh-2-list-trong-python/","excerpt":"Python で 2 つのリストを比較する方法について説明します。このレッスンの後、python で 2つのリストを比較する方法と、python で 2 つのリスト間で同じ要素と異なる要素を取得する方法を学習します。","text":"Python で 2 つのリストを比較する方法について説明します。このレッスンの後、python で 2つのリストを比較する方法と、python で 2 つのリスト間で同じ要素と異なる要素を取得する方法を学習します。 Python で 2 つのリストを比較するには、次の 4 つの方法があります。 演算子 == および != : Python で 2 つのリストが同じかどうかを確認します 演算子 &lt;、&lt;=、&gt;、&gt;= : Python の 2 つのリスト間で大小を比較します python set() function : 2 つのリストを比較し、python で同じ要素を取得する python set() function : 2 つのリストを比較し、python で異なる要素を取得する これらの方法については、以下で説明します。 Pythonで2つのリストを比較するPython で 2 つのリストを比較するには、Python で等値比較や大小比較などの比較演算子を使用します。 参照 : Python の比較演算子と文字列、数値、およびリストの比較 Python で 2 つのリストが同じかどうかを確認する | 演算子 == および !=Python で 2 つのリストが同じかどうかを確認するには、等値演算子を使用します。2 つのリストの要素の値がすべて同じであれば、値 True が返されます。例えば： Copyprint([&quot;Red&quot;, &quot;Blue&quot;] == [&quot;Red&quot;, &quot;Blue&quot;])#&gt; Trueprint([&quot;Red&quot;, &quot;Blue&quot;] != [&quot;Red&quot;, &quot;Blue&quot;])#&gt; Falseprint([&quot;Red&quot;, &quot;Blue&quot;] == [&quot;Red&quot;, &quot;Blue&quot;, &quot;White&quot;])#&gt; Falseprint([&quot;Red&quot;, &quot;Blue&quot;] != [&quot;Red&quot;, &quot;Blue&quot;, &quot;White&quot;])#&gt; True 数値要素を持つ 2 つのリストの比較に似ています。 Copynumlist1 = [0,1,2,3]numlist2 = [0,1,2,3]numlist3 = [4]print(numlist1 == numlist2)#&gt;&gt; Trueprint(numlist1 == numlist3)#&gt;&gt; False Python で 2 つのリストを比較して同じかどうかを確認する場合、2 つのリストの要素の順序に注意する必要があることに注意してください。2 つのリストの要素の値が同じでも、2 つのリストの要素の順序が異なる場合、2 つのリストは異なると見なされます。 Copyprint([&quot;Red&quot;, &quot;Blue&quot;] == [&quot;Red&quot;, &quot;Blue&quot;])#&gt; Trueprint([&quot;Red&quot;, &quot;Blue&quot;] == [&quot;Blue&quot;, &quot;Red&quot;])#&gt; False Python で 2 つのリストの大小を比較する | 演算子 &lt;、&lt;=、&gt;、&gt;=Python で大小比較を使用して 2 つのリストを比較する場合、2 つのリストで異なる値を持つ最初の要素が比較に使用されます。 次に、2 つのリストの要素のデータ型に応じて、Python での 2 つのリストの比較は、Pythonでの 2 つの文字列の比較またはPythonでの 2 つの数値の比較などに変換されます。 たとえば、次のように、string 型の要素を持つ 2 つのリスト間で大小を比較します。 Copyprint([&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;] &gt; [&quot;red&quot;, &quot;blue&quot;, &quot;white&quot;])#&gt; False 上記の 2 つのリストの比較は、次のように 2 つの文字列の Unicode コード ポイント (Unicode コード ポイント) を比較することにより、実際には 2 つの Python 文字列の比較に変換されます。 Copyprint( &quot;green&quot; &gt; &quot;white&quot;)#&gt;&gt; False 参照 : 2 つの文字列の比較 python Python で型の要素を持つ 2 つのリスト間で大小を比較する場合も同様です。 Copynumlist1 = [0,1,2,3]numlist2 = [0,1,5,3]print(numlist1 &lt;= numlist2)#&gt;&gt; True 上記の 2 つのリストの比較は、実際には次のように 2 つの Python 数値の比較に変換されます。: Copyprint( 2 &lt;= 5)#&gt;&gt; True 異なるデータ型の 2 つのリストで最初の要素の値が異なる場合、それらを比較できない可能性もあります。例えば： Copynumlist = [0,1,2,3]mixlist = [0,1,&#x27;Bob&#x27;,3]print(numlist1 &lt;= numlist2) この時点で、上記の 2 つの python リストの比較は文字列と数値の比較 (2 と ‘Bob’ の比較) に戻るため、次のように TypeError が返されます。u: CopyTraceback (most recent call last): File &quot;Main.py&quot;, line 3, in &lt;module&gt; print(numlist &lt;= mixlist)TypeError: &#x27;&lt;=&#x27; not supported between instances of &#x27;int&#x27; and &#x27;str&#x27; 参照 : Python で異なるデータ型を比較す​​る Python で 2 つのリストを比較して同じ要素を取得する | set() 関数 pythonPython には、2 つのリスト間で同じ要素を直接比較して取得するのに役立つ関数やメソッドはありません。 Pythonで 2 つのリストを比較して同じ要素を取得するには、与えられた 2 つのリストをset型に変換し、&amp;演算子で2つのセットの交差を求め、同じ要素を見つける必要があります。 参照: Python の set() 関数と iterable からセットを作成する方法 参照: Python で 2 つのセットの交点を見つける リストをセット型に変換すると、比較する前に Python リスト内の重複する要素を削除するのに役立つ別の効果もあります。 参照 : リストpythonの重複要素を削除する それでは、Python で 2 つのリストを比較し、それらの間で同じ要素を取得する具体的な例を次のように見ていきましょう。 Copyl1 = [0,1,2,3,&#x27;Bob&#x27;]l2 = [0,1,5,3]l3 = [0,1,&#x27;Bob&#x27;,3]print( set(l1) &amp; set(l2) )#&gt;&gt; &#123;0, 1, 3&#125;print( set(l1) &amp; set(l3) )#&gt;&gt; &#123;0, 1, 3, &#x27;Bob&#x27;&#125;print(type(set(l1) &amp; set(l3)))#&gt;&gt; &lt;class &#x27;set&#x27;&gt; 与えられた 2 つのリスト間で同じ要素を含む結果セットを取得したら、for ループを使用して結果セット内の要素を取得できます。インデックスがsetに存在しないため、要素が取得されて画面に出力される順序は、実行中に異なる場合があることに注意してください。 Copyl1 = [0,1,2,3,&#x27;Bob&#x27;]l2 = [0,1,&#x27;Bob&#x27;,3]common_s = set (l1) &amp; set(l2)for i in common_s: print(i)#&gt;&gt; 0#&gt;&gt; 1#&gt;&gt; 3#&gt;&gt; Bob 結果セットの要素数をカウントする len() 関数を使用して、2 つの Python リスト間の重複の数を見つけることもできます。例えば： Copyl1 = [0,1,2,3,&#x27;Bob&#x27;]l2 = [0,1,&#x27;Bob&#x27;,3]commmon_count = len( set(l1) &amp; set(l2) )print(commmon_count)#&gt;&gt; 4 参照: Python setの要素数を数える 次の例のように、Python で set() 関数と list() 関数を使用して、結果のセットをリスト型に変換し、元の 2 つのリストと同じ要素を含む新しいリストを取得することもできます。 Copyl1 = [0,1,2,3,&#x27;Bob&#x27;]l2 = [0,1,&#x27;Bob&#x27;,3]common_l = list( set (l1) &amp; set(l2) )print(common_l[2])#&gt;&gt; Bob 参照 : list() 関数と Python で iterable からリストを作成する方法 同様に、2 つのリストを比較する場合、次のように 3 つ以上のリストを比較して、Python で同じ要素を見つけることもできます。 Copyl1 = [0,1,2,3,&#x27;Bob&#x27;]l2 = [0,1,5,3]l3 = [0,1,&#x27;Bob&#x27;,3]l1_l2_l3 = set(l1) &amp; set(l2) &amp; set(l3)print(l1_l2_l3)#&gt;&gt; &#123;0, 1, 3&#125; Python で 2 つのリストを比較して異なる要素を取得する | set() 関数 pythonPython には、2 つのリスト間で異なる要素を直接比較して取得するのに役立つ関数やメソッドはありません。 Pythonで 2 つのリストを比較して異なる要素を取得するには、与えられた 2 つのリストをセット タイプに変換し、2つの間の^演算子を見つけることでそれらの違いを見つける必要があります。 参照: Python の set() 関数と iterable からセットを作成する方法 参照 : Python での補数 リストをセット型に変換すると、比較する前に Python リスト内の重複する要素を削除するのに役立つ別の効果もあります。 参照 : リストpythonの重複要素を削除する ここでは、次のように python で 2 つのリストを比較し、それらの間の異なる要素を取得する具体的な例を示します。 Copyl1 = [0,1,2,3,&#x27;Bob&#x27;]l2 = [0,1,5,3]l3 = [0,1,&#x27;Bob&#x27;,4]print( set(l1) ^ set(l2) )#&gt;&gt; &#123;2, 5, &#x27;Bob&#x27;&#125;print( set(l1) ^ set(l3) )#&gt;&gt; &#123;2, 3, 4&#125;print(type(set(l1) ^ set(l3)))#&gt;&gt; &lt;class &#x27;set&#x27;&gt; 与えられた 2 つのリスト間で異なる要素を含む結果セットを取得したら、 for ループを使用して結果セット内の要素を取得できます。インデックスがセットに存在しないため、要素が取得されて画面に出力される順序は、実行中に異なる場合があることに注意してください。 Copyl1 = [0,1,2,3,&#x27;Bob&#x27;]l2 = [0,1,&#x27;Bob&#x27;,4]common_s = set (l1) ^ set(l2)for i in common_s: print(i)#&gt;&gt; 2#&gt;&gt; 3#&gt;&gt; 4 len() 関数を使用して、結果セット内の要素の数をカウントすることにより、2 つの Python リスト間で異なる要素の数を見つけることもできます。例えば： Copyl1 = [0,1,2,3,&#x27;Bob&#x27;]l2 = [0,1,5,3]commmon_count = len( set(l1) ^ set(l2) )print(commmon_count)#&gt;&gt; 3 参照: set python の要素数を数える 次の例に示すように、Python で set() 関数と list() 関数を使用して、結果のセットをリスト型に変換し、元の 2 つのリストの異なる要素を含む新しいリストを取得することもできます。 Copyl1 = [0,1,2,3,&#x27;Bob&#x27;]l2 = [0,1,&#x27;Bob&#x27;,4]common_l = list( set (l1) ^ set(l2) )print(common_l[2])#&gt;&gt; 4 参照 : list() 関数と Python で iterable からリストを作成する方法 まとめ上記 Kiyoshi は、python で 2 つのリストを比較する方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python の List() 関数と iterable からリストを作成する方法","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/tao-list-tu-iterable-trong-python","date":"2022-11-16T01:04:07.000Z","updated":"2022-11-16T12:04:54.166Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/tao-list-tu-iterable-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/tao-list-tu-iterable-trong-python/","excerpt":"Python の list() 関数と、 list 関数を使用して python の iterable からリストを作成する方法を学びましょう。このレッスンの後、python の list() 関数とは何か、python で iterable とは何か、python でのリスト構文、python で iterable からリストを作成する方法を知ることができます。","text":"Python の list() 関数と、 list 関数を使用して python の iterable からリストを作成する方法を学びましょう。このレッスンの後、python の list() 関数とは何か、python で iterable とは何か、python でのリスト構文、python で iterable からリストを作成する方法を知ることができます。 Pythonのlist()関数とは何ですか?Python での List() 関数の概念Python の list() 関数はList クラスのコンストラクタであり、指定された値からリストを作成するために使用されます。 list() 関数の詳細とクラス リストについては、公式のPython ドキュメントWeb サイトを参照してください。 Python のlist構文Python のlist構文は như sau: list ( iterable) そこで, iterable は list 関数の唯一の引数であり、その後で再度説明します。 たとえば、list() 関数を使用して、次のように文字列からリストを作成します。 Copymylist= list(&#x27;cityboy&#x27;)print(mylist)#&gt;&gt; [&#x27;c&#x27;, &#x27;i&#x27;, &#x27;t&#x27;, &#x27;y&#x27;, &#x27;b&#x27;, &#x27;o&#x27;, &#x27;y&#x27;] Python iterableとは何ですか? 配列、リスト、タプルなどの多くの要素を持つデータ型を使用する方法を学習するときに、キーワードiterableによく遭遇します。 Python での iterableの概念は実際には複雑ではありませんが、多くの新しいプログラマーにとって頭痛の種になる可能性があります。 最も簡単な方法で理解できます。イテラブルは、リスト、文字列、タプル、セット、または python のイテレータなど、多くの反復可能な要素を持つオブジェクトです。 iterableには多くの要素が含まれているため、list() 関数の引数に iterable を指定し、その要素を取得して Python で新しいリストを作成します。 list() 関数を使用して、python で iterable からリストを作成しますPythonで別のリストからリストを作成する次の例に示すように、list() 関数のiterable引数をリストとして指定し、元のリストから新しいリストを作成します。: Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]newlist = list(mylist);print(newlist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;] 元のリストと同じ要素で新しいリストが作成されていることがわかります。list() 関数を使用して古いリストをコピーして新しいリストを作成したことに注意してください。したがって、これら 2 つのリストは 2 つの別個のオブジェクトです。 Python で文字列をリストに変換する list() 関数のiterable引数を文字列として指定し、次の例のように文字列を Python のリストに変換します。 Copymylist= list(&#x27;cityboy&#x27;)print(mylist)#&gt;&gt; [&#x27;c&#x27;, &#x27;i&#x27;, &#x27;t&#x27;, &#x27;y&#x27;, &#x27;b&#x27;, &#x27;o&#x27;, &#x27;y&#x27;] その結果、新しいリストの要素が文字列内の文字である元の文字列からリストを作成しました。 タプルを変換し、Pythonでリストに設定nlist() 関数のiterable引数をタプルまたはセットとして指定し、次の例のように、これらの iterable を python のリストに変換します。 Copy#Pythonでタプルをリストにmytuple = (&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)mylist = list(mytuple)print(mylist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]#pythonでsetをリストにmyset = &#123;1, 2, 3, 4, 5&#125;mylist =list(myset)print(mylist)#&gt;&gt; [1, 2, 3, 4, 5] その結果、タプルからリストを作成したり、Pythonで設定したりしました。n. Pythonでrangeからリストを作成する range (範囲型) はrangeクラスによって作成されるオブジェクトで、その要素は開始番号から終了番号までの連続した番号です。 次の例のように、Python で範囲からリストを作成できます。 Copymylist = list (range (10))print (mylist)#&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]mylist = list (range (2, 10))print (mylist)#&gt;&gt; [2, 3, 4, 5, 6, 7, 8, 9]mylist = list (range (2, 10, 2 ))print (mylist)#&gt;&gt; [2, 4, 6, 8] 作成されたオブジェクトで指定された番号の要素の新しいリストが表示rangeされます。 参照: Python の Range() 関数 list() 関数を使用して Python で空のリストを作成するlist() 関数の別のアプリケーションは、Python で空のリストを作成することです。 Python で空のリストを作成するには、 Creating a list in pythonの記事で学んだ空のリストを指定するだけでなく、list() 関数を使用して、関数内の引数を省略して空のリストを作成することもできます。 たとえば、次のような空のリストを作成します。 Copyempty_list = list()print(empty_list)#&gt; [] まとめ上記 Kiyoshi はlist()関数と、 list 関数を使用して python で iterable からリストを作成する方法について学びました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python リストの要素数を数える","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/dem-so-phan-tu-trong-list-python","date":"2022-11-16T01:01:53.000Z","updated":"2022-11-16T14:03:07.561Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/dem-so-phan-tu-trong-list-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/dem-so-phan-tu-trong-list-python/","excerpt":"Pythonでリストの要素数をカウントするための手順。このレッスンの後、len() 関数を使用して Python リストの要素数をカウントする方法を学習します。","text":"Pythonでリストの要素数をカウントするための手順。このレッスンの後、len() 関数を使用して Python リストの要素数をカウントする方法を学習します。 Python リストの要素数を数えるPython リストの要素数をカウントするには、次の構文で len() 関数を使用します。 len (list) Python のLen()とは、Pythonでオブジェクトの長さまたは要素の数を見つけるために使用される関数です。このオブジェクトがリストの場合、関数は指定された Python リストの要素数を返します。 len() 関数の詳細についてはlen()in Pythonの記事を参照してください。 Python リストの要素数をカウントする例Copylen([&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;])len([1, 2, 3, 4, 5])len([10, 20, [&quot;Sun&quot;, &quot;Mon&quot;, &quot;Fri&quot;], 40]) 結果： Copy354 len() 関数を使用して Python リストの要素数をカウントする方法は非常に簡単です。最後に、オンラインで練習して、より上手に使用してください Copyprint(len([&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;]))print(len([1, 2, 3, 4, 5]))print(len([10, 20, [&quot;Sun&quot;, &quot;Mon&quot;, &quot;Fri&quot;], 40])) まとめ上記 Kiyoshi はlen() 関数を使用して Python リストの要素数をカウントする方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python リストの要素を並べ替える","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/sap-xep-phan-tu-trong-list-python","date":"2022-11-16T01:01:53.000Z","updated":"2022-11-16T14:03:08.090Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/sap-xep-phan-tu-trong-list-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/sap-xep-phan-tu-trong-list-python/","excerpt":"リストを作成した後、python リスト内の要素を昇順または降順で自由に並べ替えることができることをご存知ですか? このレッスンを通じて、python リスト内の要素をソートする方法を学びます。","text":"リストを作成した後、python リスト内の要素を昇順または降順で自由に並べ替えることができることをご存知ですか? このレッスンを通じて、python リスト内の要素をソートする方法を学びます。 Python list の要素をソートするには、 sort() メソッドまたはPython の List sorted() 関数を使用する必要があります。この 2 つの方法では、リスト内の要素の値を昇順または降順で直接並べ替えます。または、これらの要素の値を中間関数の引数として使用し、返された値を取得して、sorted() 関数でpython sorted keyパラメータを使用して要素の並べ替えを実行することもできます。 Python リストの要素を昇順に並べ替えるリスト内の要素を昇順で並べ替え | Python のリスト sorted() 関数次の構文で Python の List sorted() 関数を使用して、リスト内の要素を昇順で並べ替えます。 新しいリスト = sorted ( 元リスト , * , key = None, reverse = False) ほとんどの引数を省略し、次の構文のように元リスト引数のみを使用することもできます。実際、これは最も一般的に使用されます。 新しいリスト = sorted ( 元リスト) 尚、sorted() 関数は、リストだけでなく、文字列やタプルなどの他のiterableにも使用できます。したがって、元リスト引数を他のデータ型に置き換えることもできます。 注目すべき唯一のことは、引数型はどれにでも。ただし、返される結果は常にlist新しいものになります。文字列をソートするのに、返される結果がリストである理由を不思議に思う必要はありません。 理解しやすくするために、次の例を参照してください。次のように Python で sorted() 関数を使用します。 Copymylist = [&quot;C&quot;, &quot;A&quot;, &quot;B&quot;]newlist = sorted(mylist)print(mylist)#&gt;&gt; [&quot;C&quot;, &quot;A&quot;, &quot;B&quot;]print(newlist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;] ご覧のとおり、元リストのmylistの要素が昇順で並べ替えられた結果をもとに、新しいリストが作成されましたね。 リスト内の要素を昇順で並べ替え | sort() メソッド以下のように簡単な構文で sort() メソッドを使用して、Python リストの要素を昇順にソートすることもできます。 list.sort() Python の sort() メソッドは、元のリストの要素を元の順序で並べ替えます。元のリスト自体が並べ替えられ、新しいリストは作成されないことに注意してください。 Ví dụ cụ thể : Copymylist = [&quot;C&quot;, &quot;A&quot;, &quot;B&quot;]mylist.sort()print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;] Pythonのsorted(list)とlist.sort()の違いリスト内の要素を昇順でソートするために sorted(list) と list.sort() の両方を使用していますが、これら 2 つの方法には大きな違いがあります。 sorted() 関数は元のリストを変更せず、元のリストからソート済みの新しいリストを作成します。 sort() メソッドは新しいリストを作成せず、元のリスト自体を再配置するだけです。 また、関数とメソッドは本質的に概念が異なり、性質や使用法も異なることに注意する必要があります。 つまり、 新しいリストを作成する必要がある場合は、sorted() 関数を使用します。それ以外の場合、新しいリストを作成する必要がない場合は、sort() メソッドを使用して Python リスト内の要素をソートします。 ここでは、特定の例を使用して、Python で list.sort() と sorted(list) を比較します。 数値要素でリストを並べ替える: Copy#sorted (list)を使う numlist = [84, 75, 92, 90, 78]newnumlist = sorted(numlist)print(newnumlist)##&gt; [75, 78, 84, 90, 92]#list.sort()を使うnumlist = [84, 75, 92, 90, 78]numlist.sort()print(numlist)##&gt; [75, 78, 84, 90, 92] 文字要素を含むリストのソート: Copy#sorted (list)を使う colorlist = [&quot;Blue&quot;, &quot;Red&quot;, &quot;Green&quot;, &quot;White&quot;, &quot;Black&quot;]newwcolor = sorted(colorlist)print(newwcolor)#&gt;&gt; [&#x27;Black&#x27;, &#x27;Blue&#x27;, &#x27;Green&#x27;, &#x27;Red&#x27;, &#x27;White&#x27;]#list.sort()を使うcolorlist = [&quot;Blue&quot;, &quot;Red&quot;, &quot;Green&quot;, &quot;White&quot;, &quot;Black&quot;]colorlist.sort()print(colorlist)#&gt;&gt; [&#x27;Black&#x27;, &#x27;Blue&#x27;, &#x27;Green&#x27;, &#x27;Red&#x27;, &#x27;White&#x27;] Python リストの要素を降順で並べ替えるデフォルトでは、sorted() または sort() メソッドはリストを昇順でソートします。したがって、Python リストの要素を昇順で並べ替えたい場合は、デフォルトで Kiyoshi が上で指示したように関数とメソッドを記述します。 逆に、Python リストの要素を降順で並べ替える場合は、次の構文でsorted() 関数に追加のreverse = Trueの引数を指定します。 新しいリスト = sorted ( 元リスト , reverse = True) ここでの違いはreverse引数のデフォルト値をFalseからTrueに指定しただけです。Python リストの要素を降順で並べ替える次の例を見てみましょう。 Copymylist = [&quot;C&quot;, &quot;A&quot;, &quot;B&quot;]# 昇順でソートnewlist = sorted(mylist)print(newlist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]# reverse=False で昇順ソートnewlist = sorted(mylist, reverse=False)print(newlist)#&gt;&gt; [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]# 降順でソートnewlist = sorted(mylist, reverse=True)print(newlist)#&gt;&gt; [&quot;C&quot;, &quot;B&quot;, &quot;A&quot;] 別のより複雑な例を試してみましょう。: Copycolorlist = [&quot;Blue&quot;, &quot;Red&quot;, &quot;Green&quot;, &quot;White&quot;, &quot;Black&quot;]asc_colorlist = sorted(colorlist)desc_colorlist = sorted(colorlist, reverse=True)print(&quot;元リスト:&quot;, colorlist)#&gt;&gt; 元リスト: [&#x27;Blue&#x27;, &#x27;Red&#x27;, &#x27;Green&#x27;, &#x27;White&#x27;, &#x27;Black&#x27;]print(&quot;昇順: &quot;, asc_colorlist)#&gt;&gt; 昇順: [&#x27;Black&#x27;, &#x27;Blue&#x27;, &#x27;Green&#x27;, &#x27;Red&#x27;, &#x27;White&#x27;]print(&quot;降順: &quot;, desc_colorlist)#&gt;&gt; 降順: [&#x27;White&#x27;, &#x27;Red&#x27;, &#x27;Green&#x27;, &#x27;Blue&#x27;, &#x27;Black&#x27;] さまざまなデータ型の要素を含む Python リストの要素を並べ替える前のセクションでは、リストがすべての数字や文字列など、同じ要素のみで構成されている場合に、python リスト内の要素を並べ替える方法を学びました。では、リスト内の要素のデータ型が異なる場合、どうすればよいでしょうか? ここでの答えは、リスト内の要素のデータ型が異なっていても比較可能である場合、 sorted() 関数またはsort() メソッドを使用して通常どおりリストをソートできるということです。 たとえば整数や実数などで並べ替えたい場合、次の例のようにします: Copy#整数と実数のリストをソートします。numlist = [5, 3.14, 4,78, 4]newnumlist = sorted (numlist)print (newnumlist)#&gt;&gt; [3.14, 4, 4, 5, 78] しかし、異なるデータ型を持つ要素のリストを並べ替えたい場合、例えば数と数字など比較できない場合、sorted() 関数を使用すると、次のようにエラーTypeErrorが発生します。 Copymylist = [&quot;80&quot;, 75, 45, &quot;68&quot;]newmylist = sorted(mylist) エラーの戻り値: CopyTraceback (most recent call last): File &quot;Main.py&quot;, line 2, in &lt;module&gt; newmylist = sorted(mylist)TypeError: &#x27;&lt;&#x27; not supported between instances of &#x27;int&#x27; and &#x27;str&#x27; キーを使用しpythonでリスト内の要素を並べ替える 上記では、リスト内の要素の値を直接使用して要素をソートする方法を学びました。これに加えて、これらの要素の値をの関数またはメソッドへの引数として使用し、返された値を取得して要素の並べ替えを続行することもできます。 これは、要素の値ではなく、要素を構成する文字列の長さ、要素の絶対値などに基づいてリストを並べ替える方法を決定する場合に特に便利です。 並べ替える前にリスト内の値を変換する関数またはメソッドを指定するには、次の構文で sorted() 関数のkey引数を使用します。 新しいリスト = sorted ( 元リスト, key = 関数名) そこで、key引数の後に abs()、len()、または upper() メソッドなどの関数またはメソッドを指定できます。 以下の具体例を見てみましょう。 文字列内の要素を構成する文字列の長さでpythonリスト内の要素をソートしますリスト内の要素を構成する文字列の長さを見つけるのに役立つlen()関数を関数名として指定します。 参照: リストの長さを見つける Copymylist = [&quot;apple&quot;, &quot;pen&quot;, &quot;desk&quot;, &quot;banana&quot;]sorted(mylist)#&gt;&gt; [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;desk&#x27;, &#x27;pen&#x27;]sorted(mylist, key=len)#&gt;&gt; [&#x27;pen&#x27;, &#x27;desk&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;] 文字列内の要素の絶対値でPythonリスト内の要素をソートします次の例のように、絶対値を与えるabs()関数を関数名として指定します。 Copymylist = [5, -4, -7, 6]sorted(mylist)#&gt;&gt; [-7, -4, 5, 6]sorted(mylist, key=abs)#&gt;&gt; [-4, 5, 6, -7] 文字列内の要素を小文字に変換した値で Python リスト内の要素を並べ替える次の例のように、文字列を小文字に変換するlowerメソッドを関数名として指定します。 参照: Python の Lower() メソッド Copyanimallist = [&quot;Cat&quot;, &quot;monkey&quot;, &quot;bear&quot;, &quot;Sheep&quot;, &quot;cow&quot;]sortlist = sorted(animallist)lowersortlist = sorted(animallist, key=str.lower)print(animallist)#&gt;&gt; [&#x27;Cat&#x27;, &#x27;monkey&#x27;, &#x27;bear&#x27;, &#x27;Sheep&#x27;, &#x27;cow&#x27;]print(sortlist)#&gt;&gt; [&#x27;Cat&#x27;, &#x27;Sheep&#x27;, &#x27;bear&#x27;, &#x27;cow&#x27;, &#x27;monkey&#x27;]print(lowersortlist)#&gt;&gt; [&#x27;bear&#x27;, &#x27;Cat&#x27;, &#x27;cow&#x27;, &#x27;monkey&#x27;, &#x27;Sheep&#x27;] さらに、ほとんどの文字列処理メソッドを使用してキーを指定することもできます。これらのメソッドについては、トピックPythonの文字列を参照してください。 Python で sorted() 関数または sort() メソッドを使用した並べ替えの欠点これら 2 つのメソッドは非常に使いやすく、ほとんどの場合正しくソートできますが、次の例のように、sorted() 関数または sort() メソッドでは自然なソート結果を生成できない場合がほとんどです。 Copya = [&#x27;2 ft 7 in&#x27;, &#x27;1 ft 5 in&#x27;, &#x27;10 ft 2 in&#x27;, &#x27;2 ft 11 in&#x27;, &#x27;7 ft 6 in&#x27;]sorted(a)print(a)#&gt;&gt;[&#x27;2 ft 7 in&#x27;, &#x27;1 ft 5 in&#x27;, &#x27;10 ft 2 in&#x27;, &#x27;2 ft 11 in&#x27;, &#x27;7 ft 6 in&#x27;] 必要な結果は次のとおりです。 Copy[&#x27;1 ft 5 in&#x27;, &#x27;2 ft 7 in&#x27;, &#x27;2 ft 11 in&#x27;, &#x27;7 ft 6 in&#x27;, &#x27;10 ft 2 in&#x27;] だが、上記の例のように、sorted() 関数は必要な結果を提供していません。 この場合、python のインストール時に組み込まれていない別の関数というnatsort()関数を使用する必要があります。この関数は、python をインストールした後デフォルトでは含まれていません。pip install natsortといったコマンドでインストールする必要があります。その後、import使用してから初めて利用することができます。この機能については、別のレッスンで学習します。 まとめ上記 Kiyoshi はpython listの要素をソートする方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python List の長さを計算 (len)","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/tim-chieu-dai-cua-list-trong-python-voi-ham-len","date":"2022-11-16T01:01:53.000Z","updated":"2022-11-16T12:05:02.245Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/tim-chieu-dai-cua-list-trong-python-voi-ham-len/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/tim-chieu-dai-cua-list-trong-python-voi-ham-len/","excerpt":"クレジット カードに関する情報の長いリストが手元にあるとします。すると、座って数えるのでしょうか？Kiyoshi は、この時点で、python の len()関数を使用して、この負債のリストを一瞬で解決する必要があると確信しています。すごいですね。List python の長さを len()関数で計算する方法を Kiyoshi と一緒に学びましょう。","text":"クレジット カードに関する情報の長いリストが手元にあるとします。すると、座って数えるのでしょうか？Kiyoshi は、この時点で、python の len()関数を使用して、この負債のリストを一瞬で解決する必要があると確信しています。すごいですね。List python の長さを len()関数で計算する方法を Kiyoshi と一緒に学びましょう。 Python List の長さを計算する | len()関数リストの長さを計算する必要がある場合、自分自身を数えることに加えて (冗談です ^_ )、組み込みのlen()関数を使用できます。次の構文でlen()関数を使用して、リストの長さ (そのリスト内の要素の数) を計算します。 len (list) len()関数は、検討中のオブジェクトの長さまたは要素数を返します。このオブジェクトがリストの場合、関数はそのリスト内の要素の数を返します。 以下にいくつかの例を見てみましょう。 Copylen([&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;])#&gt;&gt; 3len([1, 2, 3, 4, 5])#&gt;&gt; 5len([10, 20, [&quot;Sun&quot;, &quot;Mon&quot;, &quot;Fri&quot;], 40])#&gt;&gt; 4 len()関数の使用は非常に簡単です。最後に、オンラインで練習して、より上手に使用してください。 Copyprint(len([&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;]))print(len([1, 2, 3, 4, 5]))print(len([10, 20, [&quot;Sun&quot;, &quot;Mon&quot;, &quot;Fri&quot;], 40])) まとめ上記 Kiyoshi は、len() 関数を使用してPython リストの長さを計算する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Python リストの要素値を変更する","slug":"python/nhap-mon-lap-trinh-python/list-trong-python/thay-doi-gia-tri-cua-phan-tu-trong-list-python","date":"2022-11-16T01:00:21.000Z","updated":"2022-11-16T12:04:57.018Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/list-trong-python/thay-doi-gia-tri-cua-phan-tu-trong-list-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/list-trong-python/thay-doi-gia-tri-cua-phan-tu-trong-list-python/","excerpt":"Python list で要素の値を変更する方法に関するチュートリアル。このレッスンの後、さまざまな方法を使用して Python リストの要素の値を変更する方法を学習します。","text":"Python list で要素の値を変更する方法に関するチュートリアル。このレッスンの後、さまざまな方法を使用して Python リストの要素の値を変更する方法を学習します。 Python リストの要素の値を変更するには、次の 2 つの方法があります。 index の使用: Python リスト内の指定された要素の値を変更します スライス リストの使用: 範囲内の複数の要素の値を変更する インデックスを介してPythonリストの指定された要素の値を変更しますインデックスを介してPythonリストの指定された要素の値を変更します 参照 : Python のインデックスおよび Python でリスト内の要素にアクセスする方法 インデックスを使用して要素の値を変更する構文は次のとおりです org_list [ index ] = 置換値 ここで、org_list は元のリストであり、元のリスト内の指定されたインデックスで要素を置き換えるために置換値が使用されます。 次の例で、リストの 2 番目の要素の値を (インデックス 1 で) 置き換えてみてください。 Copylist_fruit = [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Strawberry&quot;]print (list_fruit) #&gt;&gt; [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Strawberry&quot;]# リストの 2 番目の要素の値を変更list_fruit[ 1 ] = &quot;Grape&quot; print (list_fruit) #&gt;&gt; [&quot;Apple&quot;, &quot;Grape&quot;, &quot;Strawberry&quot;] ご覧のとおり、変更値を実行した後、インデックス1で指定されたOrange要素の値がGrapeで置き換えられました python list は本質的に、要素が順番に配置されたデータのタイプであり、宣言後に値を変更できることに注意してください。したがって、リスト内の要素の値を変更した後、本質的にその要素の値のみが変更されますが、そのリストのプロパティ (リスト名、データ型、型の ID など) は変更されません。そして、そのリストの使用方法は変わりません。 たとえば、リストの id プロパティとその値へのアクセス方法は、要素値を置き換える前後で変更されません。 Copylist_fruit = [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Strawberry&quot;]print(list_fruit)#&gt;&gt; [&#x27;Apple&#x27;, &#x27;Orange&#x27;, &#x27;Strawberry&#x27;]print(&#x27;id of data type =&#x27; + str(id(list_fruit)))#&gt;&gt; id of data type =22384947762496list_fruit[1] = &quot;Grape&quot;print(list_fruit)#&gt;&gt; [&#x27;Apple&#x27;, &#x27;Grape&#x27;, &#x27;Strawberry&#x27;]print(&#x27;id of data type =&#x27; + str(id(list_fruit)))#&gt;&gt; id of data type =22384947762496 リスト内の要素の値を変更しましたが、リストのプロパティ (リスト データ型の ID) は変更されていません。 リストの範囲内の複数の要素の値を変更| Pythonのスライス 次の構文で、Python スライス リスト関数を使用して、元のリストの範囲内の複数の要素の値を変更できます。 list [開始インデックス : 終了インデックス] = リストやタプルなど置換用オブジェクト 開始インデックスと終了インデックスを指定することにより、元のリストから変更する必要がある要素の範囲を決定します。次に、上記の範囲を置き換える値を指定することで、元のリストの一連の要素の値を変更します。 インデックスの指定方法は、リストをスライスするときと同じで、範囲は開始要素のインデックスで始まり、範囲は終了要素のインデックス+1で終わります。上記の範囲を置き換える値は、リスト、文字列、タプルなどの要素を持つオブジェクトです。 注意点として、置換オブジェクトをABCなど文字列として指定した場合、その文字列自体が新しいリストの要素として使用するのではなく、文字列に含まれた各文字が新しいリストに格納されます。 次の例では、次のリストの 2 番目から 4 番目の位置 (つまり、開始インデックス = 1 、終了インデックス = 4) の範囲の要素を置き換えます。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;]print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;]# リストの 2 番目から 4 番目までの要素の配列を変更mylist[1:4] = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;E&quot;, &quot;F&quot;] 尚、置換シーケンス内の要素の数は、置換する範囲内の要素の数と必ずしも同じではありません。多くても大丈夫ですが、少なくても大丈夫です。以下の例のように、要素の少ない配列を使用し、元のリストの範囲内の要素を置き換えます。u: Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;]print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;]# 要素の配列をより少ない要素の配列に置き換えます。.mylist[1:4] = [&quot;1&quot;, &quot;2&quot;]print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;1&quot;, &quot;2&quot;, E&quot;, &quot;F&quot;] また、指定範囲内の要素の値を変更する際にジャンプしたい場合、例えば最初の要素を削除し、2 番目の要素を変更し、3 番目の要素を再度スキップする… 場合は、次の例のようにリストをスライスできます。 Copymylist = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;]print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;]# 要素をジャンプして、他の要素の値をリストの 2 番目から 6 番目に変更mylist[1:7:2] = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]print(mylist)#&gt;&gt; [&quot;A&quot;, &quot;1&quot;, &quot;C&quot;, &quot;2&quot;, &quot;E&quot;, &quot;3&quot;] 参照 : Python のスライス (スライス) リスト まとめ上記 Kiyoshi はpython list の要素の値を変更する方法を示しました。レッスンの内容をよりよく理解するために、今日の例で練習してください。 そして、次のレッスンで Python の知識についてさらに学びましょう。.","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"}]},{"title":"Pythonで変数を削除する","slug":"python/nhap-mon-lap-trinh-python/bien-trong-python/xoa-bien-trong-python","date":"2022-11-15T21:29:50.000Z","updated":"2022-11-16T14:03:11.255Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/bien-trong-python/xoa-bien-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/bien-trong-python/xoa-bien-trong-python/","excerpt":"Python で変数を削除する方法のチュートリアル。このレッスンの後、Python で del コマンドで以前に宣言された変数を削除する方法を学習します。","text":"Python で変数を削除する方法のチュートリアル。このレッスンの後、Python で del コマンドで以前に宣言された変数を削除する方法を学習します。 Pythonで変数を削除するpython の del コマンドを使用して、宣言された変数を削除し、それ以上使用されないようにすることができます。Pythonでdel コマンドを使用して Python で変数を削除する構文は次のとおりです。 del 変数名 Ví dụ: Copynum = 10print(num)del num 変数を宣言した後num、コマンドを使用しdelてそれを削除しました。を削除すると、この変数は宣言されnumていない状態に戻るため、この変数を再度宣言せずに使用すると、次のように NameError が発生します。 Copynum = 10print(num)# 10del numprint(num) エラー NameError が返す: CopyTraceback (most recent call last): File &quot;Main.py&quot;, line 7, in &lt;module&gt; print(num)NameError: name &#x27;num&#x27; is not defined プログラムを書くとき、何らかの理由で python で変数を削除したい場合は、忘れずにdel コマンドを使用してください。また、以前に宣言された変数のみを削除できる必要があることに注意してください。そうしないと、NameError が発生します。 Copydel numprint(num)&gt;Traceback (most recent call last):&gt; File &quot;Main.py&quot;, line 1, in &lt;module&gt;&gt; del num&gt;NameError: name &#x27;num&#x27; is not defined まとめ上記 Kiyoshi は、 pythonで del コマンドを使用して python で変数を削除する方法を説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Biến trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Biến trong python","slug":"Bien-trong-python","permalink":"https://laptrinhcanban.com/tags/Bien-trong-python/"}]},{"title":"python でキーボードから変数を入力する","slug":"python/nhap-mon-lap-trinh-python/bien-trong-python/nhap-bien-trong-python","date":"2022-11-15T21:28:50.000Z","updated":"2022-11-16T12:04:04.510Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/bien-trong-python/nhap-bien-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/bien-trong-python/nhap-bien-trong-python/","excerpt":"python でキーボードから変数を入力する方法に関するチュートリアル。このレッスンの後、Python でinput() 関数を使用してキーボードから変数値を入力する方法を学習します。","text":"python でキーボードから変数を入力する方法に関するチュートリアル。このレッスンの後、Python でinput() 関数を使用してキーボードから変数値を入力する方法を学習します。 Python でキーボードから変数を入力するPython でキーボードから変数を入力するには、組み込み関数 input() を pythonで使用する必要があります。input() 関数は、キーボードからデータを入力し、その値を次の構文で変数に割り当てるのに役立ちます。 name= input() そこで： input ：関数を呼び出すために使用されます。関数が呼び出されると、ユーザーがキーボードからデータを入力できるように、入力行が表示されます。 name ：Pythonの変数とはレッスンで学習したPython の変数命名規則に従って名前が付けられます。 ユーザーがキーボードから入力できるようになると、入力文字列が文字列データ型としてnameの変数に割り当てられます。 次の構文を使用して、入力画面をより美しくすることもできます。 name= input(&quot;&gt;&gt;&quot;) たとえば、次のように名前を入力して画面に出力するプログラムがあります。 Copyprint(&quot;Hay nhap ten cua ban : &quot;)name=input(&quot;&gt;&gt;&quot;)print(&quot;Hay nhap tuoi cua ban : &quot;)old=input(&quot;&gt;&gt;&quot;)user = &quot;\\n Ten ban : &quot; + name + &quot;\\n Tuoi ban : &quot; +oldprint(user) 上記のプログラムを user.py として保存し、Anaconda プロンプトで実行します。結果は次のようになります。 まとめ上記 Kiyoshi はPython でキーボードから変数を入力する方法を説明しています。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Biến trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Biến trong python","slug":"Bien-trong-python","permalink":"https://laptrinhcanban.com/tags/Bien-trong-python/"}]},{"title":"Pythonで変数を割り当てる","slug":"python/nhap-mon-lap-trinh-python/bien-trong-python/gan-bien-trong-python","date":"2022-11-15T21:27:50.000Z","updated":"2022-11-16T14:03:10.783Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/bien-trong-python/gan-bien-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/bien-trong-python/gan-bien-trong-python/","excerpt":"Python で変数に値を割り当てた後、その変数を使用してプログラムでその値を表すことができます。Python での変数の割り当ては、同時に、またはpython で変数を宣言した後に行うことができます。変数に初期値以外の値を代入したり、変数の値を別の変数に代入したりできます。 このレッスンの後、Python で変数を割り当てる方法を学びましょう。","text":"Python で変数に値を割り当てた後、その変数を使用してプログラムでその値を表すことができます。Python での変数の割り当ては、同時に、またはpython で変数を宣言した後に行うことができます。変数に初期値以外の値を代入したり、変数の値を別の変数に代入したりできます。 このレッスンの後、Python で変数を割り当てる方法を学びましょう。 Pythonで変数に初期値以外の値を代入するPython で変数を初期化して宣言するとき、その変数に割り当てる初期値を指定する必要があります。ただし、変数に特定の値を割り当てた後でも、次の例のようにその変数に別の値を割り当てることができます。 Copyprice = 100price = 200print(price)#&gt;&gt; 200 Python の変数とはという記事では、Python の変数は、メモリ内の値を含む場所のアドレスではなく、そのデータのアドレスを記録する単なるタグであることを既に知っています。したがって、指定された変数に別の値を代入するときは、変数に書かれているアドレス行を変更するだけです。したがって、変数の性質は変化せず、変数が割り当てられているメモリ内の値のアドレスのみが変化します。 繰り返しますが、変数に割り当てるために使用される値は異なるデータ型にすることができますが、python の変数は、値が割り当てられるときにデータ型として自動的に認識されます。したがって、次の例のように、異なるデータ型の変数を同じ変数に割り当てることができます。 Copyname = &quot;Kiyoshi&quot;name = 30print(name)#&gt;&gt; 30 上記の例では、変数nameが値を文字列として宣言されていても、後で数値として値を割り当てることができます。これは、Python では、変数が割り当てられた値の型を自動的に認識するためです。 ある変数の値を別の変数に割り当てる次の例のように、宣言された変数の値を別の変数に割り当てることができます。 Copynum1 = 100num2 = num1print(&quot;num1&quot;,num1)#&gt;&gt; num1 100print(&quot;num2&quot;,num2)#&gt;&gt; num2 100 この場合、両方の変数num1とnum2両方が、メモリ内の値の場所である同じアドレスに書き込み、ポイントし100ます。 num1ただし、変数 nowに新しい値を割り当てると、変数の値はnum2変更されないままになることに注意してください。 Copynum1 = 100num2 = num1num1 = 200print(&quot;num1&quot;,num1)#&gt;&gt; 200print(&quot;num2&quot;,num2)#&gt;&gt; 100 参照num1している場所に新しい値を格納する代わりに別の値を割り当てると、その新しい値のアドレスがメモリに書き込まれます。この時点で、変数はまだ元の場所を参照しているため、変数は値で場所を参照し、変数は値で場所を参照します。したがって、画面に出力する場合、これら 2 つの変数の値は異なります。num1num1num2num1200num2100 Copynum1 200num2 100 まとめ上記 Kiyoshi はpython で変数を割り当てる方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Biến trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Biến trong python","slug":"Bien-trong-python","permalink":"https://laptrinhcanban.com/tags/Bien-trong-python/"}]},{"title":"Pythonで変数を宣言、初期化、および割り当てる方法","slug":"python/nhap-mon-lap-trinh-python/bien-trong-python/khai-bao-bien-trong-python","date":"2022-11-15T21:26:50.000Z","updated":"2022-11-16T12:03:59.927Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/bien-trong-python/khai-bao-bien-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/bien-trong-python/khai-bao-bien-trong-python/","excerpt":"Python で変数を使用するには、まず変数の宣言または初期化によって変数を作成する必要があります。このレッスンの後、Python で変数を宣言、初期化、および割り当てる方法を学習します。","text":"Python で変数を使用するには、まず変数の宣言または初期化によって変数を作成する必要があります。このレッスンの後、Python で変数を宣言、初期化、および割り当てる方法を学習します。 Python で変数を宣言する変数を使用するには、最初に変数を作成する必要があります。 プログラミング言語では、変数を初期化する変数を作成する方法と、変数を宣言する方法の 2 つがあります。 変数宣言は、変数の名前とデータ型を指定するためのものであり、変数の初期化、変数の名前とデータ型を指定するだけでなく、変数に初期値も代入します。 ただし、変数の名前とデータ型を宣言する必要がある他の言語とは異なり、Python では変数を宣言する必要はありません。 宣言する代わりに、変数のデータ型に関係なく、または変数が以前に宣言されているかどうかに関係なく、変数に値を直接割り当てることができます。 その理由は、変数が初期化された後、変数に割り当てられた最初の値の型を通じて、Python がその変数のデータ型を自動的に決定するためです。これは、他のプログラミング言語と比較して Python の非常に便利な点です。 Python での変数の初期化上で Kiyoshi が分析したように、Python では変数を宣言する必要はありませんが、変数の型は割り当てられた初期値によって自動的に決定されます。. また、これはpython で変数を初期化する方法でもあります。 変数のデータ型を指定する必要はありませんが、次の変数初期化構文を使用して、Python で初期値を変数に割り当てるだけです。 name = value そこで name ： Pythonの変数とはのレッスンで学習した Python の変数命名規則に従って付けられた変数名です。 = ：変数を割り当てるために使用される記号。記号の右側の値は、左側の変数に割り当てられます。 value ：変数の宣言に使用される値です。この値は、文字列、数値、またはその他の Python オブジェクト タイプにすることができます。 具体的には、次のように Python でさまざまなデータ型で変数を初期化します。 Copyold = 24 # 変数値は数値str = &quot;Hello&quot; # 変数値は文字列colorlist = [&quot;red&quot;, &quot;blue&quot;, &quot;yerllow&quot;] # 変数値はリスト python で変数を初期化した後、変数名をプログラムに記述することで使用できます。python で変数を使用する場合、変数に割り当てられた値は、python で処理するときに変数の代わりに使用されます。 Copynum = 30print(num)#&gt;&gt; 10 上記の例のように、 variable に値30を代入して変数を初期化した後、 functionでnum変数を使用すると、画面に出力するときに変数の代わりに代入された値が使用されます。numprint30 Pythonの変数のデータ型python で変数を初期化すると、宣言された変数のデータ型が Python によって自動的に決定されます。したがって、変数で宣言したデータ型が正しいかどうかを心配する必要はありません。 Python で変数を宣言した後にデータ型を確認する場合は、次の例のように**Python関数 type()**を使用します。 Copymyvar = 1234print(type(myvar))# &lt;class &#x27;int&#x27;&gt;mystr = &quot;hello&quot;print(type(mystr))# &lt;class &#x27;str&#x27;&gt; まとめ上記 Kiyoshi は、 python で変数を宣言、初期化、および割り当てる方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Biến trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Biến trong python","slug":"Bien-trong-python","permalink":"https://laptrinhcanban.com/tags/Bien-trong-python/"}]},{"title":"Pythonの変数とは何ですか?","slug":"python/nhap-mon-lap-trinh-python/bien-trong-python/bien-trong-python-la-gi","date":"2022-11-15T21:25:30.000Z","updated":"2022-11-16T14:03:11.013Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/bien-trong-python/bien-trong-python-la-gi/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/bien-trong-python/bien-trong-python-la-gi/","excerpt":"Pythonの変数の概念を説明します。このレッスンの後、 python の変数とは何か、 python で変数に名前を付ける方法、およびpython で変数を使用する方法を知ることができます。","text":"Pythonの変数の概念を説明します。このレッスンの後、 python の変数とは何か、 python で変数に名前を付ける方法、およびpython で変数を使用する方法を知ることができます。 Pythonの変数とは何ですか?Python の変数定義には、次の 2 つの通りがあります。 最初の学校は、データを格納するためのボックスのようなPython の変数を考慮します。これらのデータは、変数に格納して何度も使用できる数値または文字列にすることができます。数値の計算、文字列の編集などの操作の結果は、一時的に変数に保持され、将来のプログラムに使用されます。 2 番目の学校は、python の変数を data のアドレスのタグのようなものと見なします。データは異なるアドレスを持つメモリ内の別々の場所に格納され、Python の変数はメモリ内のそのデータのアドレスを書き込むために使用されるタグです。データを使用する場合は、そのデータの変数に書かれたアドレスにアクセスします。 上記の 2 つの方法のいずれかを使用して、Python の変数の概念を覚えておいてください。 Python で変数に名前を付けるPython で変数に名前を付けるには、以下のように Python の変数命名規則に従う必要があります。 Python で変数名に使用できる文字はa～z、A～Z、 0～9、アンダースコア_、漢字、アクセント付きベトナム語などです。 先頭文字に数値(0～9)は使用できません。 最初の文字にはアンダースコアを使用できます。ただし、アンダースコアは特別な場合に使用されることが多いため、使用しない方がよいでしょう。 Pythonで変数に名前を付けるときは大文字と小文字が区別されます Python キーワードは使用できません。 上記の表のPythonでの変数命名規則について、次のように詳しく学習します。 Pythonで変数に名前を付けるには、英数字、アンダースコアを使用してくださいPython 3 以降では、Python で漢字とアクセント付きのベトナム語を使用して変数に名前を付けることができますが、Kiyoshi はこの方法を使用することをお勧めしません。 Copytên = &quot;Kiyoshi&quot;tuổi =30名前 = &quot;Kiyoshi&quot;年齢 = 30 変数の最初の文字に数値を使用しないでくださいPython では、変数の最初の文字に数値を使用できません。これは、SyntaxError が表示されるためです。 Copy7up = 100 Lỗi SyntaxError: Copy File &quot;Main.py&quot;, line 1 7up = 100 ^SyntaxError: invalid syntax Python で変数に名前を付けるときに大文字と小文字を区別するPython で変数に名前を付けるときは、大文字と小文字が区別されます。たとえば、次の例の 2 つの変数は異なり、異なる結果が得られます。 Copystr = &quot;Tôi yêu&quot;STR = &quot;Việt Nam&quot;print(str, STR)&gt;&gt; Tôi yêu Việt Nam Python で変数に名前を付けるために Python キーワードを使用しないでくださいPython では、Python キーワードを使用して変数に名前を付けることはできません。キーワードは Python 固有の単語であり、変数に名前を付けるために使用することはできません。以下のステートメントを使用して、Pythonのキーワードのリストを確認できます。 Copyimport sysimport keyword print (&quot;Python version: &quot;, sys.version_info)print (&quot;Python keywords: &quot;, keyword.kwlist) そして、これは python のキーワードの表です。 CopyFalse await else import passNone break except in raiseTrue class finally is returnand continue for lambda tryas def from nonlocal whileassert del global not withasync elif if or yield 上記の表のpython のキーワードを使用して Python で変数に名前を付けると、SyntaxError は次の例のように返されます。 Copyfrom = &quot;Việt Nam&quot; 構文エラー エラー: Copy File &quot;Main.py&quot;, line 1 from = &quot;Việt Nam&quot; ^SyntaxError: invalid syntax Python での変数の使用以下の例では、果物の価格 (VAT を含む) を計算して画面に出力するプログラムを作成します。 Copyprint (&quot;オレンジの価格 &quot; + str (120 * 1.1))print (&quot;リンゴの価格 &quot; + str (90 * 1.1))print (&quot;バナナの価格 &quot; + str (100 * 1.1)) 上記のようにVATを申告するたびに不注意で間違えたり、国によって調整されたVATの場合は全部訂正しなければなりません。これは間違いを犯しやすく、時間を無駄にします。 代わりに、変数を作成して VAT 値を格納することにより、python で変数を使用します。使用するときは、以下のように変数名を呼び出すだけです。 Copytax = 1.1print (&quot;オレンジの価格 &quot; + str (120 * tax))print (&quot;リンゴの価格 &quot; + str (90 * tax))print (&quot;バナナの価格 &quot; + str (100 * tax)) 上記のどちらの書き方でも同じ結果が得られます。 Copyオレンジの価格 132.0リンゴの価格 99.00000000000001バナナの価格 110.00000000000001 政府が VAT 率を1.5倍に引き上げたと仮定すると、 の値を次のように変更taxする1.5だけです。 Copytax = 1.5print (&quot;オレンジの価格 &quot; + str (120 * tax))print (&quot;リンゴの価格 &quot; + str (90 * tax))print (&quot;バナナの価格 &quot; + str (100 * tax)) 上記の例から、python で変数を使用すると、値を直接入力する場合に比べてエラーを減らすのに役立つだけでなく、プログラム内のデータの値を迅速かつ効率的に変更するのに役立つことがわかります。 まとめ上記 Kiyoshi は、python での変数の概念とは何か、pythonで変数に名前を付ける方法、および python で変数を使用する方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Biến trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Biến trong python","slug":"Bien-trong-python","permalink":"https://laptrinhcanban.com/tags/Bien-trong-python/"}]},{"title":"Pythonで完全数を判定する　　","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-hoan-hao-trong-python","date":"2022-11-15T20:50:27.000Z","updated":"2022-11-16T12:03:20.850Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-hoan-hao-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-hoan-hao-trong-python/","excerpt":"Pythonで奇数・偶数を判定する方法を説明します。この記事を通じてPythonで完全数を判定する関数の作成を学びましょう。","text":"Pythonで奇数・偶数を判定する方法を説明します。この記事を通じてPythonで完全数を判定する関数の作成を学びましょう。 Pythonで完全数とはウィキペディアによると、完全数の概念は次のとおりです。 完全数（かんぜんすう、英: perfect number）とは、自分自身が自分自身を除く正の約数の和に等しくなる自然数のことである。 Pythonにおける完全数の概念は上記と同じです。Python では、自分自身が自分自身を除く正の約数の和に等しくなる自然数は完全数であると見なされます。 これは、Pythonで完全な数を見つけるのに役立つキーです。 Pythonで完全数を判定する Python では、自分自身が自分自身を除く正の約数の和に等しくなる場合、その数は完全であると見なされます。 したがって、ある数値が完全数かどうかを確認するには、その数値のすべての約数を見つけて合計し、この合計が指定された数値と比較するだけです。 指定された数の約数を見つけるには、その数をそれよりも小さい数で順番に割ります。除算に余りがない場合、その約数が求められる約数になります。 そして、次のようにPythonで完全数チェック関数を作成します。 Copydef find_perfect_num(n): ## flag = 1 =&gt; 完全数である ## flag = 0 =&gt; 完全数ではない flag = 0 #約数を調べる divisor= [i for i in range(1,n) if n % i == 0] #全ての約数の和を計算 total = 0; for i in range(len(divisor)): total += divisor[i] #比較 if total == n: flag = 1 return flag Pythonのfor i in range関数は、指定された反復回数でループを作成するのに役立ちます。詳しくは、Pythonでのfor rangeループをご覧ください。 上コードを省略するため上記ではlist comprehensionを使用します。Pythonでのlist comprehensionをご覧ください。 この関数を呼び出し、Pythonで入力された数値が完全数かどうかを判定しましょう。 Copydef find_perfect_num(n): ## flag = 1 =&gt; 完全数である ## flag = 0 =&gt; 完全数ではない flag = 0 #約数を調べる divisor= [i for i in range(1,n) if n % i == 0] #全ての約数の和を計算 total = 0; for i in range(len(divisor)): total += divisor[i] #比較 if total == n: flag = 1 return flagn = int(input(&quot;&gt;&gt; 自然数を入力ください: &quot;))check = find_perfect_num(n); if check == 1: print(n,&quot;は完全数である&quot;)else: print(n,&quot;は完全数ではない&quot;) 注意点として入力した数値は自然数でなければなりません。 入力画面と結果は以下のように表示されます。 Copy&gt;&gt; 自然数を入力ください: 55 は完全数ではない&gt;&gt; 自然数を入力ください: 66 は完全数である n以下の完全数を調べる上記の方法を使用して、n以下の完全数をリストアップができます。 次に、Pythonでn以下の完全数を調べるプログラムを示します。 Copydef find_perfect_num(n): ## flag = 1 =&gt; 完全数である ## flag = 0 =&gt; 完全数ではない flag = 0 #約数を調べる divisor= [i for i in range(1,n) if n % i == 0] #全ての約数の和を計算 total = 0; for i in range(len(divisor)): total += divisor[i] #比較 if total == n: flag = 1 return flagn = int(input(&quot;&gt;&gt; 自然数を入力ください: &quot;))result=[]for i in range(n): check = find_perfect_num(i); if check == 1: result.append(i)print(result) Kết quả: Copy&gt;&gt; 自然数を入力ください: 10[0, 6]&gt;&gt; 自然数を入力ください: 50[0, 6, 28]&gt;&gt; 自然数を入力ください: 1000[0, 6, 28, 496] まとめ上記でKiyoshiはPythonで完全数を判定する方法を説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonついてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"Pythonで平方数を判定する","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-chinh-phuong-trong-python","date":"2022-11-15T20:49:27.000Z","updated":"2022-11-16T12:03:17.790Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-chinh-phuong-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-chinh-phuong-trong-python/","excerpt":"Pythonで平方数を判定する方法を説明します。この記事を通じて平方数の判定する方法と、n以下の平方数の調べる方法をを学びましょう。","text":"Pythonで平方数を判定する方法を説明します。この記事を通じて平方数の判定する方法と、n以下の平方数の調べる方法をを学びましょう。 Pythonで平方数を判定するには以下の２つの方法があります。 累乗を使用して平方数を判定 平方根を使用して平方数を判定 Pythonで平方数とはウィキペディアによると、平方数の概念は次のとおりです。 平方数とは、一般的には整数の自乗で表される非負整数のことである。ただし広義の意味では有理数の二乗であれば平方数という Pythonにおける平方数の概念は上記と同じです。Pythonにおける平方数とは、自然数の平方に等しい整数のことです。これは、Pythonでの平方数を見つけるのに役立つ最初のキーです。 そして、平方数の平方根は自然数です。これは、Pythonで平方数を見つけるのに役立つ2番目のキーです。 累乗を使用して平方数を判定Pythonで平方数を判定する１番目の方法は、平方数が自然数の平方に等しいという概念を使用することです。 つまり、任意の自然数について、2 乗が与えられた数と等しい自然数を見つけることができれば、その数は平方数であることです。 その特徴を使って平方数を判定する関数を作りましょう。 Copydef find_square_number(n): #flag = 1 =&gt; 平方数である #flag = 0 =&gt; 平方数ではない flag = 0; #n以下の数値の中に、その数の２乗がnと等しい数があるか確認 if any(i**2 == n for i in range(n+1)): flag = 1 return flag any()関数は、指定されたiterableの中に指定された要素があるかどうかを確認するために使用されます。 Pythonのfor i in range関数は、指定された反復回数でループを作成するのに役立ちます。詳しくは、Pythonでのfor rangeループをご覧ください。 上コードを省略するため上記ではlist comprehensionを使用します。Pythonでのlist comprehensionをご覧ください。 次のように、この関数を呼び出して、入力プしたnが平方数かどうかを確認できます。 Copydef find_square_number(n): #flag = 1 =&gt; 平方数である #flag = 0 =&gt; 平方数ではない flag = 0; #n以下の数値の中に、その数の２乗がnと等しい数があるか確認 if any(i**2 == n for i in range(n+1)): flag = 1 return flagn = int(input(&quot;&gt;&gt; 自然数を入力ください: &quot;))check = find_square_number(n); if check == 1: print(n,&quot;は平方数である&quot;)else: print(n,&quot;は平方数ではない&quot;) 注意点として入力した数値は自然数でなければなりません。 入力画面と結果は以下のように表示されます。 Copy&gt;&gt; 自然数を入力ください: 44 は平方数である&gt;&gt; 自然数を入力ください: 55 は平方数ではない&gt;&gt; 自然数を入力ください: 1616 は平方数である&gt;&gt; 自然数を入力ください: 2525 は平方数である 平方根を使用して平方数を判定Pythonで平方数を判定する2つ目の方法は、その数の平方根が自然数であるという性質を利用することです。 つまり、任意の数について、その平方根が自然数である場合、その数は平方数であるということです。 平方根が自然数であるかどうか判定するために、is_integer()の関数を使いましょう。 参照： Pythonでの整数の判定 それで、平方根を使用して平方数を判定する方法を以下のように実装します。 Copydef find_square_number_2(n): #flag = 1 =&gt; 平方数である #flag = 0 =&gt; 平方数ではない flag = 0; #平方根が自然数であるか確認 if (n ** .5).is_integer(): ## if (math.sqrt(n)).is_integer(): flag = 1 return flag 次のように、この関数を呼び出して、入力したnは平方数かどうか確認できます。 Copydef find_square_number_2(n): #flag = 1 =&gt; 平方数である #flag = 0 =&gt; 平方数ではない flag = 0; #平方根が自然数であるか確認 if (n ** .5).is_integer(): ## if (math.sqrt(n)).is_integer(): flag = 1 return flagn = int(input(&quot;&gt;&gt; 自然数を入力ください: &quot;))check = find_square_number_2(n); if check == 1: print(n,&quot;は平方数である&quot;)else: print(n,&quot;は平方数ではない&quot;) 注意点として入力した数値は自然数でなければなりません。 入力画面と結果は以下のように表示されます。 Copy&gt;&gt; 自然数を入力ください: 44 は平方数である&gt;&gt; 自然数を入力ください: 55 は平方数ではない&gt;&gt; 自然数を入力ください: 1616 は平方数である&gt;&gt; 自然数を入力ください: 2525 は平方数である n以下の平方数を調べる上記の2つの方法のいずれかを使用して、n以下の平方数をリストアップができます。 次に、Pythonでn以下の平方数を調べるプログラムを示します。 Copydef find_square_number_2(n): #flag = 1 =&gt; 平方数である #flag = 0 =&gt; 平方数ではない flag = 0; #平方根が自然数であるか確認 if (n ** .5).is_integer(): ## if (math.sqrt(n)).is_integer(): flag = 1 return flagn = int(input(&quot;&gt;&gt; 任意数を入力ください &quot;))result=[]for i in range(n): check = find_square_number_2(i); if check == 1: result.append(i)print(result) 結果： Copy&gt;&gt; 任意数を入力ください: 10[0, 1, 4, 9]&gt;&gt; 任意数を入力ください: 20[0, 1, 4, 9, 16] まとめ上記でKiyoshiはPythonで平方数を判定する方法を説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonついてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"Pythonで文字列を数値に変換する方法","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/chuyen-chuoi-thanh-so-trong-python","date":"2022-11-15T20:20:07.000Z","updated":"2022-11-16T14:03:07.338Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/chuyen-chuoi-thanh-so-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/chuyen-chuoi-thanh-so-trong-python/","excerpt":"Pythonで文字列を数値に変換する方法を説明します. この記事を通じてint()やfloat()などPythonの組み込み関数を使用して文字列を数値に変換する方法を学びましょう。","text":"Pythonで文字列を数値に変換する方法を説明します. この記事を通じてint()やfloat()などPythonの組み込み関数を使用して文字列を数値に変換する方法を学びましょう。 Pythonで文字列を数値に変換する理由Pythonでは、文字列が数値として表示しても、その数値が数値データ型でない場合、演算子を直接使用して計算することはできません。次の例のように TypeErrorが発生します。 Copyprint(10 + &quot;12&quot;) エラー内容： CopyTraceback (most recent call last): File &quot;Main.py&quot;, line 1, in &lt;module&gt; print(10 + &quot;12&quot;)TypeError: unsupported operand type(s) for +: &#x27;int&#x27; and &#x27;str&#x27; エラーの発生した理由は、数字「12」が数値データ型ではなく、文字列データ型であるためです。 Pythonの文字列についてはPythonで文字列を操作をご覧ください。 したがって、文字列で表示される数字を計算するには、計算する前にPythonで文字列を数値に変換する必要があります。 Pythonで文字列を数値に変換するPythonの数値型の記事では、Pythonが３つの数値データ型 (integer int、float real number、complex number) をサポートしていることを学びました。 複素数はあまり使用されないため、pythonで文字列を数値に変換したい場合、次の構文を使用してデータ型を整数または実数にキャストすることがよくあります。 int(x)float(x) その中、intとfloatとは関数名であり、xとは数値に変換されたい文字列です。 実際の使用法は、次の例のようになります。 Pythonで文字列を整数に変換する Copynum = &quot;25&quot;print(15 + int(num)) #&gt;&gt; 43 Pythonで文字列を実数に変換する Copynum = &quot;18.325&quot;print(4.5 + float(num));#&gt;&gt; 7.654999999999999 上記のように文字列を数値データ型に変換した後、通常の計算に使用できるようになります。 まとめ上記でKiyoshiはPythonで文字列を数値に変換する方法を説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonついてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"Pythonで整数・小数を判定する","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-nguyen-so-thuc-trong-python","date":"2022-11-15T20:17:27.000Z","updated":"2022-11-16T12:03:23.894Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-nguyen-so-thuc-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-nguyen-so-thuc-trong-python/","excerpt":"Pythonで整数・小数を判定する方法を説明します。この記事を通じて整数・小数の判定する方法と、n以下の整数の和を調べる方法をを学びましょう。","text":"Pythonで整数・小数を判定する方法を説明します。この記事を通じて整数・小数の判定する方法と、n以下の整数の和を調べる方法をを学びましょう。 Pythonで整数・小数を判定するには以下の３つの方法があります。 組み込み関数isinstance()を使用して整数・小数を判定 メソッドis_integer()を使用して整数・小数を判定 math.ceil()とmath.floor()を使用して整数・小数を判定 Pythonで整数・小数とはPythonで整数・小数の概念は私たちがよく使用するものと似ています。 整数には、自然数 (1、2、3…)、負の数 (-1、-2、-3…)、および 0が含まれます。私たちがよく使用する通常の数は、整数と呼ばれます。 小数は整数に10進数を加えたものです。たとえば、1.0、5.2、-9.687、3.14159などの数値です。小数には整数も含まれます。つまり、小数部分を含む数を小数と呼びます。 Pythonにおける整数は正確な値で表すことができますが、Pythonでの小数は浮動小数点として表されます。つまり、小数を正確な値で表すことはできませんが、小数点以下の文字数を切り上げまたは切り捨てて表すことができます。それぞれは異なる値で表します。 組み込み関数isinstance()を使用して整数・小数を判定isinstance() 関数は、指定された数値が整数かどうかを判定します。次の構文で isinstance() 関数を使用します。 isinstance(num, type) 上記のnumとは判定したい数値であり,typeとは確認したい型である. typeはintまたはfloat で指定できます。 isinstance() 関数は、指定された数値が指定されたtypeである場合にTrueを返し、そうでない場合にFalseを返します。 数値の型は組み込み関数type()で取得できます。 Copyi = 6f = 6.78print(type(i))print(type(f))# &lt;class &#x27;int&#x27;&gt;# &lt;class &#x27;float&#x27;&gt; 次のように isinstance() 関数を使用して、これらの数値が int または float であるか確認できます。 Copyi = 6f = 6.78print(isinstance(i, int))# Trueprint(isinstance(i, float))# Falseprint(isinstance(f, int))# Falseprint(isinstance(f, float))# True 注意点として、整数が数値などの小数部分で書かれている場合、 isinstance() 関数はこれを小数として扱うことに注意して下さい。 例えば： Copyprint(isinstance(1, int))# Trueprint(isinstance(1.00, int))# Falseprint(isinstance(1.00, float))# True このようなタイプの数値で整数をチェックするには、次の次の方法が必要です。 メソッドis_integer()を使用して整数・小数を判定is_integer() はfloatデータ型の組み込みメソッドであるため、任意の小数が整数かどうかこのメソッドで確認できます。 小数には有理数と無理数が含まれており、整数もそれらの部分集合です。したがって、一つの小数は整数かどうか確認することができます。 Pythonでis_integer() メソッドを使用して整数をチェックする構文は次のとおりです。 f.is_integer() 上記のfは整数・小数を判定したい数値です。 is_integer() メソッドは、指定された数値が整数の場合はTrueを返し、そうでない場合はFalseを返します。 具体例: Copyf1 = 1.234print(f1.is_integer())# Falsef2 = 100.0print(f2.is_integer())# True math.ceil()とmath.floor()を使用して整数・小数を判定Pythonでの整数は正確な値で表すことができますが、小数はさまざまな値に切り上げまたは切り捨てることができます。 この特性を使用して、指定された数値の切り上げと切り捨ての結果を比較し、これらの値が等しいの場合、指定された数値は整数になります。 math モジュールで最大 2 つの関数を使用する必要があります。math.ceil() 関数を使用して切り上げを行い、math.floor() 関数を使用して Python で数値を切り捨てます。 そして、次のようにPythonで整数・小数を判定関数を作成できます. Copyimport mathdef check_prime_number(n): #flag = 1 =&gt; 整数 #flag = 0 =&gt; 小数 flag = 1; if (math.ceil(n) != math.floor(n)): flag = 0; return flag; この関数を呼び出し、Pythonで入力された数値が整数かどうかを判定しましょう。 Copyimport mathdef check_prime_number(n): #flag = 1 =&gt; 整数 #flag = 0 =&gt; 小数 flag = 1; if (math.ceil(n) != math.floor(n)): flag = 0; return flag;n = float(input(&quot;&gt;&gt; 数値を入力ください: &quot;))check = check_prime_number(n); if check == 1: print(n,&quot; 整数である&quot;)else: print(n,&quot; 小数である&quot;) 小数と整数の両方を入力してチェックできるように、キーボードから入力する数値は小数として取得する必要があることに注意してください。 入力画面と整数小数判定結果は次のようになります。 Copy&gt;&gt; 数値を入力ください: 1.111.11 小数である&gt;&gt; 数値を入力ください: 11.0 整数である&gt;&gt; 数値を入力ください: -1.234-1.234 小数である 配列にある整数の和を調べる上記の方法を使用すると、 Pythonで配列にある整数の和を算出できます。 Pythonで配列にある整数の和を調べるプログラムの例を次に示します。 Copyimport mathdef check_prime_number(n): #flag = 1 =&gt; 整数である #flag = 0 =&gt; 小数である flag = 1; if (math.ceil(n) != math.floor(n)): flag = 0; return flag;nums = [5, 4.1, 7.2, 2, 8.9, 7, 3]total=0for i in nums: check = check_prime_number(i) if( check == 1 ) : print(i) total += iprint(&quot;配列にある整数の和：: &quot;,total) 結果： Copy5273配列にある整数の和：: 17 まとめ上記でKiyoshiはPythonで整数・小数を判定する方法を説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonついてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"Pythonで奇数・偶数を判定する","slug":"python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-chan-le-trong-python","date":"2022-11-15T20:07:27.000Z","updated":"2022-11-16T12:03:15.199Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-chan-le-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/so-trong-python/kiem-tra-so-chan-le-trong-python/","excerpt":"Pythonで奇数・偶数を判定する方法を説明します。この記事を通じてPythonでの２つの奇数・偶数の判定方法を学びましょう。","text":"Pythonで奇数・偶数を判定する方法を説明します。この記事を通じてPythonでの２つの奇数・偶数の判定方法を学びましょう。Pythonで奇数・偶数を判定するには以下の２つの方法があります。 除算と剰余の計算を使用して奇数・偶数を判定 ANDビット演算子を使用して奇数・偶数を判定 除算と剰余の計算を使用して奇数・偶数を判定偶数が2で割り切れ、奇数が2で割ると余りが1になることは誰もが知っています。2で割った余りを調べることで、与えられた数が偶数か奇数かを簡単に調べることができます。ここで使用される演算子は、除算と剰余の演算子 %です。 そして、nが偶数か奇数かをチェックする関数を次のように書きます。 Copydef check_odd_even(n): #flag = 1 =&gt; 奇数 #flag = 0 =&gt; 偶数 flag = 1; if( n % 2 == 0): flag= 0; return flag; この関数を呼び出し、Pythonでnを入力し、nが偶数か奇数かをチェックするプログラムは以下: Copydef check_odd_even(n): #flag = 1 =&gt; 奇数 #flag = 0 =&gt; 偶数 flag = 1; if( n % 2 == 0): flag= 0; return flag; n = int(input(&quot;&gt;&gt; 任意数値を入力ください: &quot;))check = check_odd_even(n); if check == 1: print(n,&quot;は奇数&quot;)else: print(n,&quot;は偶数&quot;) 入力画面と奇数・偶数チェックの結果は次のようになります。 Copy&gt;&gt; 任意数値を入力ください: 44は偶数&gt;&gt; 任意数値を入力ください: 55は奇数 ANDビット演算子を使用して奇数・偶数を判定Pythonで奇数・偶数を判定する別の方法は、ビット演算子ANDを使用することです。奇数と1のANDビット 演算の結果は常に1に等しいため、この結果を使用して、次のようにPythonで奇数・偶数判定する関数を作成できます。 Copydef check_odd_even_bit(n): #flag = 1 =&gt; 奇数 #flag = 0 =&gt; 偶数 flag = 0; if( n &amp; 1 == 1 ): flag= 1 return flag 上記関数を使ってPythonで奇数・偶数を判定しましょう。 Copydef check_odd_even_bit(n): #flag = 1 =&gt; 奇数 #flag = 0 =&gt; 偶数 flag = 0; if( n &amp; 1 == 1 ): flag= 1 return flag n = int(input(&quot;&gt;&gt; 任意数値を入力ください: &quot;))check = check_odd_even_bit(n); if check == 1: print(n,&quot;は奇数&quot;)else: print(n,&quot;は偶数&quot;) 入力画面と結果は以下になります。 Copy&gt;&gt; 任意数値を入力ください: 44 は偶数&gt;&gt; 任意数値を入力ください: 55 は奇数 まとめ上記でKiyoshiはPythonで奇数・偶数を判定する方法を説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonついてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"}]},{"title":"Pythonのinput関数によるデータ入力","slug":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/input-va-nhap-du-lieu-vao-python","date":"2022-11-15T19:56:11.000Z","updated":"2022-11-16T14:03:09.301Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/input-va-nhap-du-lieu-vao-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/input-va-nhap-du-lieu-vao-python/","excerpt":"Pythonの標準入出力のトピックの最初の記事で、標準入力のinput関数によるデータ入力方法について説明します。記事を通じて、Python2のraw_input関数やPython3のinput関数など各バージョンにおける入力関数の使い方やinput関数によるキーボードからデータ入力方法などを学びましょう。","text":"Pythonの標準入出力のトピックの最初の記事で、標準入力のinput関数によるデータ入力方法について説明します。記事を通じて、Python2のraw_input関数やPython3のinput関数など各バージョンにおける入力関数の使い方やinput関数によるキーボードからデータ入力方法などを学びましょう。 Python2およびPython3バージョンのPythonには、次のタイプの入力関数があります。 Python2のraw_input関数とinput関数 Python3のinput関数 その中、Python3のinput関数には特に注意を払う必要があります。 Python2およびPython3のデータ入力関数Python2では、Pythonにデータを入力するために、raw_input()**とinput()**の2つの関数を使用できます。ただし、Python3では、入力関数が作り直され、Python2の古いinput関数が削除され、Python2のraw_input関数が同等の機能を持つPython3のinput関数に名前が変更されました。 Python2のraw_input関数とPython3のinput関数Python2のraw_input関数とPython3のinput関数は同じ関数があり、文字列型のstring（str）としてキーボードからPythonへの入力を受け取ります。 Python2のinput関数Python2のinput()関数には、上記の2つの関数と同じ機能があります。ただし、Python2の入力関数には、キーボードから入力された文字列を評価する関数もあります。 たとえば、Python2でinput関数を使って1 + 2をキーボードから入力した場合、プログラムは入力したデータを文字列として直接受け取るのではな1 + 2の加算結果を受け取ります。 ただし、一部の処理の問題により、この評価機能はPython3の標準入力から削除されました。 ### Pythonでのinputとraw_inputの違いPython2でのみ比較する場合、上記の2つの関数の違いはPython2のinput関数に入力される文字列の評価機能があるのに対し、Python2のraw_input関数にこの機能がないという点です。 ただし、Python2のraw_input関数とPython3のinput関数で比較する場合には、これら2つの関数が完全に類似していることが分かります。 Pythonのinput関数Python3の人気により、この記事を含めてトピック「初心者向けPythonの自習」の知識共有記事では、Python3のinput関数をinput関数として呼び出し、Pythonでのデフォルトの入力関数として扱います。この関数については、以下で詳しく説明します。 Pythonのinput関数とはPythonのinput関数とは、Pythonの標準入力の組み込み関数であり、キーボードから入力した文字や数値を受け取り、結果を文字列(str)として返すための関数です。 input関数の使い方Pythonでinput関数を次の構文で使用します。 input ( prompt ) ここでの promptとはinput関数の唯一の引数です. これは、入力に関する指示またはヒントを与える文字列です。promptを自由に書くことも、この引数を省略することもできます。 たとえば、Pythonでinput関数を使用して次のように記述しても問題ありません。 promtpを省略するCopyinput() データ入力画面： promtpを介してデータ入力に関する指示またはヒントを与える: Copyinput(&quot;整数を入力ください&quot;) データ入力画面： 入力待機通知文字を追加し、promtpを介して入力画面を美化する: Copyinput(&quot;&gt;&gt;&quot;) データ入力画面： input関数を使用するときにpromtp引数に文字列を指定すると、入力を待機している間、その文字列が表示されます。promtp引数をを省略すると画面に何も表示されず、入力を待っているかどうかがわかりません。したがって、Kiyoshiは、関数でプロンプト引数を指定してinput関数を使用することをお勧めします。 input関数は、キーボードから入力したデータを受け取り、その入力したデータを含むstring（str）を返します。この結果を変数に割り当てて、プログラムで使用できます。たとえば、次のように画面に入力したデータを画面に出力します。 Copydata = input(&quot;データを入力ください：&quot;)&gt;&gt;&gt; データを入力ください：123abcprint(data)#&gt;&gt; 123abc input関数を使用してキーボードからPythonに入力されたすべてのデータ型は、string（str）として返されることに注意してください。そのため、キーボードからPythonに数値を入力しても、その数値は文字列としてのみ受信されます。以下に示すように、type関数によって受信された結果のデータ型を確認できます。 Copydata = input(&quot;データを入力ください：&quot;)&gt;&gt;&gt; データを入力ください：123abcprint(type(data))#&gt;&gt; &lt;class &#x27;str&#x27;&gt; 上記のように、キーボードから入力された数値の123が文字列(&lt;class &#39;str&#39;&gt;)としてPythonによって受信されたことが分かります。 Pythonのinput関数による高度なデータ入力方法上記では、input関数を使用してPythonでデータを入力する最も基本的な使い方について説明しました。 実際、Pythonでinput関数を使用する場合、他の関数やメソッドと組み合わせることで、input関数をよりシンプルでスマート且つ高度な使用方法が無数にあります。以下では、Pythonでinput関数を使用するいくつかの高度な手法を紹介します。 1行で複数データを入力する方法Pythonの文字列分割のsplitメソッドと組み合わせることで、1つの入力行で同時に複数のデータをPythonに入力できます。 スペースで区切ってすべてのデータを1行で入力します。入力したデータをsplitメソッドで区切って、次のように結果をリストとして保存することにより、1行で複数のデータを同時にPythonに入力する事ができます。 Copys = input(&quot;&gt;&gt;&quot;).split()print(s) データ入力画面は次のようになります Copy&gt;&gt; 1 23 ab[&#x27;1&#x27;, &#x27;23&#x27;,&#x27;ab&#x27;] 参照: Pythonで文字列を分割. 複数行のデータを入力する方法リスト内包表記と組み合わせて使用​​することにより、次のように複数行のデータをPythonに入力できます。 Copys = [input(&quot;&gt;&gt;&quot;) for i in range(3)]print(s) データ入力画面は次のようになります。 Copy&gt;&gt; 1&gt;&gt; 23&gt;&gt; ab[&#x27;1&#x27;, &#x27;23&#x27;,&#x27;ab&#x27;] 応用例で、Pythonキーボードから次のようにn個の整数を入力できます。 Copyn = 5s = [int(input(&quot;&gt;&gt;&quot;)) for i in range(n)]print(s) データ入力画面は次のようになります。 Copy&gt;&gt; 1&gt;&gt; 23&gt;&gt; 34&gt;&gt; 100&gt;&gt; 2[1, 23, 34, 100, 2] 参照: Pythonのrange関数。. 参照: Pythonでのリスト内包表記の使用. データの入力回数指定リスト内包関数を適用する方法と同様に、データを入力する回数を指定してから入力を開始することもできます。 Copyn = int(input(&quot;n=&quot;))s = [int(input(&quot;&gt;&gt;&quot;)) for i in range(n)]print(s) データ入力画面は次のようになります。 Copyn=4&gt;&gt; 1&gt;&gt; 23&gt;&gt; 34&gt;&gt; 100[1, 23, 34, 100] また、異なるデータ型をPythonに入力する場合、それぞれの適用な方法もあります。以下の記事の詳細を参照してください。 参照: Pythonで数字を入力 参照: Pythonでの文字列とリストの入力 まとめ上記 Kiyoshi はPythonのinput関数によるデータ入力方法について説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/tags/Nhap-xuat-trong-python/"}]},{"title":"Pythonで文字列とリストの入力","slug":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/nhap-chuoi-va-list-trong-python","date":"2022-11-15T19:43:10.000Z","updated":"2022-11-17T11:58:35.591Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/nhap-chuoi-va-list-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/nhap-chuoi-va-list-trong-python/","excerpt":"Pythonで文字列とリストの入力方法について説明します。記事を通じてPythonのinput関数を使用して文字列を入力する方法とリストの入力方法を学びましょう。","text":"Pythonで文字列とリストの入力方法について説明します。記事を通じてPythonのinput関数を使用して文字列を入力する方法とリストの入力方法を学びましょう。 Pythonで文字列を入力する方法は2つあります。 Pythonで一つの文字列を入力 Pythonで複数の文字列を入力 同様にPythonでリストを入力する方法も2つあります。 Pythonで要素数に制限のあるリストの入力 Pythonで要素数に制限のないリストの入力 尚、Pythonで数値を入力する方法については、Pythonで数値を入力するの記事を参照してください。 Pythonで文字列を入力Pythonで一つの文字列を入力基本的に、Pythonのinput関数を使用すると、入力したデータが文字列として受け取りますので、文字列を入力する場合は文字列として結果を返します。 参照： Pythonのinput関数によるデータ入力 たとえば、次のような基本的なinput関数を使用してPython文字列を入力できます。 Copyval = input()# Kiyoshiprint(&#x27;You are&#x27;, val)#&gt;&gt; You are Kiyoshi そして次のように、Pythonでinput関数のprompt引数を指定することにより、文字列入力の指示やヒントなどを指定することもできます。 Copyval = input(&#x27;Enter your name: &#x27;)# Enter your name: Kiyoshiprint(&#x27;You are&#x27;, val)#&gt;&gt; You are Kiyoshi これはKiyoshiがPythonで文字列を入力するときによく使用する方法です。つまりprompt引数を&gt;&gt;で指定すると、入力を待機している間にの文字が表示され、文字列の入力を待機していることをユーザーに通知します。 Copyval = input(&quot;&gt;&gt;&quot;)# &gt;&gt;abcd2print(val)#&gt;&gt; abcd2 Pythonで複数の文字列を入力Pythonで複数の文字列を入力したい場合、入力関数を何度も繰り返すだけです。 例えば： Copyval_1 = input(&#x27;文字列を入力: &#x27;)val_2 = input(&#x27;文字列を入力: &#x27;)val_3 = input(&#x27;文字列を入力: &#x27;)# 文字列を入力: Python# 文字列を入力: 入門# 文字列を入力: プログラムprint(val_1,val_2,val_3)#&gt;&gt; Python 入門 プログラム forループを使うことで、キーボードから入力文字列をリストやタプルなどに格納することもできます。 Copynum = 3mytuple = ()for i in range(3): val = input(&#x27;文字列を入力: &#x27;) mytuple += ( val,)print(mytuple)#&gt;&gt; 文字列を入力: a#&gt;&gt; 文字列を入力: b#&gt;&gt; 文字列を入力: c#&gt;&gt; (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;) 参照: Pythonのrange関数. 参照: Pythonでのforループとその処理の詳細. 参照: Pythonでのタプルへの要素の追加 Pythonでリストを入力Pythonで要素数の制限のあるリストを入力Pythonでリストを入力するには、上記のようにforループを使用してinput関数を特定の回数繰り返します。 ただし、リスト内の要素の数を指定して制限する必要がある場合は、Pythonでリストを入力する前に、そのリストの要素の数を入力するための追加の手順が必要です。 たとえば、次のように、input関数とforループを使用して要素制限付きのリストをPythonにインポートします。 Copynum = int(input(&quot;リストの要素数を入力ください: &quot;))mylist = []for i in range(num): val = input(&#x27;値を入力: &#x27;) mylist.append(val)print(mylist)#&gt;&gt; リストの要素数を入力ください: 3#&gt;&gt; 値を入力: 1#&gt;&gt; 値を入力: 2#&gt;&gt; 値を入力: 3#&gt;&gt; [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;] 上記のようにinput関数を繰り返すことに加えて、スペースなどの区切り文字で区切られたリストのすべての要素を入力することで一回の入力だけで済ませることもできます。次に、文字列分割メソッドを使用して、結果を次のようにリストします。 Copymystr = input(&quot;リストの要素数をスペース区切りで入力ください: &quot;)mylist = mystr.split()print(mylist) データ入力画面は次のようになります。 Copyリストの要素数をスペース区切りで入力ください:: 1 2 3 a b c de7[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;de7&#x27;] 参照: Pythonで文字列を分割. 要素の数に制限のないリストの入力方法停止条件で付きの無限ループを使用することにより、入力する要素の数を制限することなく、Pythonでリストを入力することができます。 たとえば、要素の数に制限のないリストをPythonでインポートし、stopなどテキストを入力するとインポートを終了します。 Copymylist = []print(&#x27;停止したいときに &quot;stop&quot;を入力ください。&#x27;)while True: val = input(&#x27;データ入力: &#x27;) if val == &#x27;stop&#x27;: print(&#x27;入力終了！&#x27;) break mylist.append(val)print(mylist) データ入力画面は次のようになります。 Copy停止したいときに &quot;stop&quot;を入力ください。データ入力: 1データ入力: 2データ入力: aデータ入力: bデータ入力: k8データ入力: stop入力終了！[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;k8&#x27;] 参照: PythonのWhile Trueの使い方と応用例 まとめ上記 Kiyoshi はPythonで文字列とリストの入力方法について説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/tags/Nhap-xuat-trong-python/"}]},{"title":"Pythonで数字を入力","slug":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/nhap-so-trong-python","date":"2022-11-15T19:42:54.000Z","updated":"2022-11-16T14:03:12.218Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/nhap-so-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/nhap-so-trong-python/","excerpt":"Pythonで数字を入力する方法のチュートリアルです。記事を通じて、Pythonでの数字を入力するすべての方法を学びましょう。","text":"Pythonで数字を入力する方法のチュートリアルです。記事を通じて、Pythonでの数字を入力するすべての方法を学びましょう。 次のようにPythonで数値を入力する3つの方法があります。 int(input()): Pythonで整数を入力 float(input()): Pythonで実数を入力 While True: 一連の数字を入力 尚、Pythonでの文字列とリストのインポートについて詳しくは、Pythonでの文字列とリストの入力の記事をご覧ください。 Pythonで数値を入力するときの論理エラーご存知通り、Pythonで数値を入力すると、文字列として結果が返されます。 Copynum = input(&quot;数値を入力してください: &quot;)print(type(num))print(num)#&gt;&gt; 数値を入力してください : 20#&gt;&gt; &lt;class &#x27;str&#x27;&gt;#&gt;&gt; 20 そこで、注意を払わずにこのキーボードからの入力を取得して他の数値で計算すると、エラーは次のように発生します。 Copynum = input(&quot;数値を入力してください : &quot;)print(num + 2)#Traceback (most recent call last):# File &quot;sample.py&quot;, line 2, in &lt;module&gt;# print(num + 2)#TypeError: unsupported operand type(s) for +: &#x27;str&#x27; and &#x27;int&#x27; 文字列型をint型に加算したため、TypeErrorエラーが発生します。 尚、*の演算子を使用してキーボード入力した結果を乗算すると、計算の結果はPythonでの文字列の反復になり、2つの数値の乗算ではありません。 Copynum = input(&quot;数値を入力してください: &quot;)print(num * 2)#&gt;&gt; 数値を入力してください : 3#&gt;&gt; 33 参照: Pythonでの文字列の連結と反復. したがって、Pythonで数値を入力した後、その数値で計算を実行する前に、入力結果のデータ型(文字列型)を数値型（intまたはfloat）に変換する処理を追加する必要があります。 Pythonで整数を入力 | int(input())Pythonで整数を入力するには、input関数を使用してキーボードから数値を入力してから、Pythonのint関数で入力結果のデータ型を整数型(int型)に変換します。 参照: Pythonのint関数 例えば: Copyval = input(&#x27;整数を入力: &#x27;)print(val)print(type(val))# Enter number: 50# 50# &lt;class &#x27;str&#x27;&gt;num = int(val)print(type(num))print(num)# &lt;class &#x27;int&#x27;&gt;# 50 次のように**int(input())**構文を使用すると、上記のコードを短縮できます。 Copyval = int(input(&#x27;整数を入力: &#x27;)) print(val)print(type(val))# Enter number: 50# 50# &lt;class &#x27;int&#x27;&gt; 上記のように入力データをintに変換した後、通常は整数で演算を実行できます。例えば： Copyval = int(input(&#x27;整数を入力: &#x27;)) print(val + 2)print(val - 2)print(val * 2)print(val / 2)# Enter number: 50# 52# 48# 100# 25.0 参照: Pythonの算術演算子 Pythonで実数を入力 | float(input())Pythonで整数を入力するには、input関数を使用してキーボードから数値を入力してから、Pythonのfloat関数で入力結果のデータ型を実数型(float型)に変換します。 参照: Pythonのfloat関数 例えば： Copyval = input(&#x27;実数を入力: &#x27;)print(val)print(type(val))# Enter number: 20.1# 20.1# &lt;class &#x27;str&#x27;&gt;num = float(val)print(type(num))print(num)# &lt;class &#x27;float&#x27;&gt;# 20.1 次のように**float(input())**構文を使用することにより、上記のコードを短縮できます。 Copyval = float(input(&#x27;実数を入力: &#x27;)) print(val)print(type(val))# Enter number: 20.1# 20.1# &lt;class &#x27;float&#x27;&gt; 上記のように入力データをfloat型に変換した後、通常は実数で演算を実行できます。例えば： Copyval = float(input(&#x27;実数を入力: &#x27;)) print(val + 2)print(val - 2.032)print(val * 9.1)print(val / 4.6)# Enter number: 20.1# 22.1# 18.068# 182.91# 4.369565217391305 参照: Pythonの算術演算子 Pythonで一連の数字を入力要素の数に制限のある一連の数字を入力Pythonで一連の数字を入力するには、単なるinput関数を指定回数で繰り返し、int関数またはfloat関数で入力結果を数値型へ変換します。 例えば： Copyx = int(input(&quot;数値を入力:&quot;))y = int(input(&quot;数値を入力:&quot;))z = int(input(&quot;数値を入力:&quot;))print(&quot;Dãy số:&quot;,x,y,z) データ入力画面は以下のとおりです。 Copy数値を入力:20数値を入力:30数値を入力:40一連の数字: 20 30 40 ただし、100個の数値など、多くの要素を含む一連の数値を入力する必要がある場合、input関数を100回繰り返し書き込むのは賢明ではありません。 その代わりに、入力したい一連の数字の数を指定しforループを使うことで、Pythonで一連の数字を入力することがスムーズに出来ます。 たとえば、Pythonキーボードから次のようにn個の整数を入力します。 Copyn = int(input(&quot;一連の数字の数を入力: &quot;))mylist = []for i in range(n): val = int(input(&#x27;数を入力: &#x27;)) mylist.append(val)print(mylist) データ入力画面は以下のとおりです。 Copy一連の数字の数を入力 : 5数値を入力: 1数値を入力: 12数値を入力: 34数値を入力: 5数値を入力: 43[1, 12, 34, 5, 43] リスト内包表記を使用して、Pythonキーボードからn個の整数を入力するとコードを次のようにすっきりとスマートに記述できます。 Copyn = int(input(&quot;一連の数字の数を入力 : &quot;))s = [int(input(&quot;&gt;&gt;&quot;)) for i in range(n)]print(s) データ入力画面は以下のとおりです。 Copy一連の数字の数を入力 : 5&gt;&gt; 1&gt;&gt; 12&gt;&gt; 34&gt;&gt; 5&gt;&gt; 43[1, 12, 34, 5, 43] 参照: Pythonのrange関数。. 参照: Pythonでのリスト内包表記の使用. 尚、上記のようにforループでinput関数を繰り返すことに加えて、スペースなどの区切り文字で区切られた一連の数字のすべての要素を単一の入力で済ませることも出来ます。 受け取った結果をsplitメソッドで分割して次のようにリストに格納すろと、一連の数値を取得することができます。 Copymystr = input(&quot;スペースで区切られた一連の数字の要素を入力: &quot;)mylist = mystr.split()mylistnum = [int(i) for i in mylist]print(mylistnum) データ入力画面は次のようになります。 Copyスペースで区切られた一連の数字の要素を入力:: 1 12 34 56 77 89[1, 12, 34, 56, 77, 89] 参照: Pythonで文字列を分割. ここでは、文字列から数値を分離できるようにするために、データ入力結果を文字列形式で保持していることに注意してください。数値を文字列から分離した後、上記のように、内部リスト内包表記を使用して、リスト内の文字列要素を整数形式に変換できます。 無制限の数の一連の数字の入力方法停止条件付きの無限whileTrueループを使用することにより、入力する要素の数を制限することなく、Pythonで一連の数値を入力できます。 たとえば、Pythonで要素の数に制限のない一連の数字を入力し、stopのテキストを入力するとインポートプロセスが終了します。 Copymylistnum = []print(&#x27;停止したいときに &quot;stop&quot;を入力&#x27;)while True: val = input(&#x27;数値を入力: &#x27;) if val == &#x27;stop&#x27;: print(&#x27;終了&#x27;) break mylistnum.append(int(val))print(mylistnum) 入力画面は以下となります。 Copy停止したいときに &quot;stop&quot;を入力数値を入力: 1数値を入力: 12数値を入力: 21数値を入力: 223数値を入力: 43数値を入力: 45数値を入力: 323数値を入力: 2数値を入力: 33数値を入力: 4数値を入力: stop終了[1, 12, 21, 223, 43, 45, 323, 2, 33, 4] 参照: PythonでのForループ. 参照: PythonのWhile True. まとめ上記 Kiyoshi はPythonで数字を入力法について説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/tags/Nhap-xuat-trong-python/"}]},{"title":"Pythonのpprintでリストや辞書をスマートに美しく出力する","slug":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/ham-pprint-trong-python-va-cach-in-list-va-tu-dien-thong-minh","date":"2022-11-15T19:36:21.000Z","updated":"2022-11-16T14:03:09.539Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/ham-pprint-trong-python-va-cach-in-list-va-tu-dien-thong-minh/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/ham-pprint-trong-python-va-cach-in-list-va-tu-dien-thong-minh/","excerpt":"Pythonのpprintの使い方について説明します。pprint関数を使用することにより、リストや辞書のリストなどの複雑な構造化データをマートに美しく出力ができ、通常のprint関数の弱点を克服できます。","text":"Pythonのpprintの使い方について説明します。pprint関数を使用することにより、リストや辞書のリストなどの複雑な構造化データをマートに美しく出力ができ、通常のprint関数の弱点を克服できます。 Pythonでpprint関数を使用する方法は次のとおりです。 行あたりの最大文字数を指定: width引数 ネストされたデータの深さを指定: depth引数 行ごとのインデントを指定： indent引数 多くの要素を含むリストの改行数を最小限に抑える: compact引数 Pythonのpprint関数Pythonのpprint関数とはPythonのpprint関数とはpprintモジュールの関数であり、リストや辞書のリストなどの複雑な構造化データを微調整してからきれいに画面に出力するための関数です。pprintとは英語のpretty-printから省略されたものであり、「きれいに出力」との意味があります。 その名の通り、pprint関数は、2次元リスト（リスト内のリスト）や辞書などの複雑な構造化オブジェクトを、すっきりとしたスマートな方法で画面に出力できます。 pprint関数は、Pythonの通常のprint関数を克服するために生まれました。このprint関数はリストや辞書を画面に出力することもできますが、インターフェイスは見苦しく、画面に表示した後のデータを観察するのは困難です。 たとえば、次の複雑な構造のリストがあります。 Copyl = [&#123;&#x27;Name&#x27;: &#x27;Yamada&#x27;, &#x27;Age&#x27;: 20, &#x27;Points&#x27;: [80, 20]&#125;, &#123;&#x27;Name&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Age&#x27;: 30, &#x27;Points&#x27;: [90, 10]&#125;, &#123;&#x27;Name&#x27;: &#x27;Honda&#x27;, &#x27;Age&#x27;: 40, &#x27;Points&#x27;: [70, 30]&#125;] 通常のprint（）メソッドでは、画面に出力された結果を次のように確認するのは困難です。 Copyprint(l)#&gt;&gt; [&#123;&#x27;Name&#x27;: &#x27;Yamada&#x27;, &#x27;Age&#x27;: 20, &#x27;Points&#x27;: [80, 20]&#125;, &#123;&#x27;Name&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Age&#x27;: 30, &#x27;Points&#x27;: [90, 10]&#125;, &#123;&#x27;Name&#x27;: &#x27;Honda&#x27;, &#x27;Age&#x27;: 40, &#x27;Points&#x27;: [70, 30]&#125;] ただし、pprint関数で微調整機能をを使用することにより、上記の複雑な構造を持つリストを次のようにすっきりときれいに出力できます。 Copyimport pprintpprint.pprint(l)#&gt;&gt; [&#123;&#x27;Age&#x27;: 20, &#x27;Name&#x27;: &#x27;Yamada&#x27;, &#x27;Points&#x27;: [80, 20]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 30, &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Points&#x27;: [90, 10]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 40, &#x27;Name&#x27;: &#x27;Honda&#x27;, &#x27;Points&#x27;: [70, 30]&#125;] import pprint pythonPythonでpprint関数を使用するには、まず、それを含むpprintモジュールを次のようにプログラムにインポートする必要があります。 Copyimport pprint Pythonでのpprint関数の構文と使用法Pythonのpprint関数には、次のようなかなりの数の引数を持つ一般的な構文があります。 pprint.pprint ( object, stream=None, indent=1, width=80, depth=None,compact=False, sort_dicts=True ) そこで： width : 出力幅（文字数）を指定 indent: インデント幅を指定 depth : 出力要素の深さを指定 compact:改行数を最小限に抑える 以下では、これらの引数を使用してpprint関数の基本的な使用法について説明します。 出力行あたりの最大文字数を指定する | width引数デフォルトでは、pprint関数は行ごとに最大80文字を出力し、文字数が満たされたら自動的に行を分割します。この引数を省略した場合でも、width引数のデフォルト値になります。 ただし、width引数を指定することで、出力される行の最大文字数（幅）を自由に調整できます。 また、出力される1行あたりの最大文字数が変更されるため、画面に出力される行数を変更することもできます。 たとえば、出力される1行あたりの最大文字数、および出力される行数は、幅の値によって次のように異なります。 Copypprint.pprint(l)#&gt;&gt; [&#123;&#x27;Age&#x27;: 20, &#x27;Name&#x27;: &#x27;Yamada&#x27;, &#x27;Points&#x27;: [80, 20]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 30, &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Points&#x27;: [90, 10]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 40, &#x27;Name&#x27;: &#x27;Honda&#x27;, &#x27;Points&#x27;: [70, 30]&#125;]pprint.pprint(l, width=40)#&gt;&gt; [&#123;&#x27;Age&#x27;: 20,#&gt;&gt; &#x27;Name&#x27;: &#x27;Yamada&#x27;,#&gt;&gt; &#x27;Points&#x27;: [80, 20]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 30,#&gt;&gt; &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;,#&gt;&gt; &#x27;Points&#x27;: [90, 10]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 40,#&gt;&gt; &#x27;Name&#x27;: &#x27;Honda&#x27;,#&gt;&gt; &#x27;Points&#x27;: [70, 30]&#125;] pprint.pprint(l, width=10)#&gt;&gt; [&#123;&#x27;Age&#x27;: 20,#&gt;&gt; &#x27;Name&#x27;: &#x27;Yamada&#x27;,#&gt;&gt; &#x27;Points&#x27;: [80,#&gt;&gt; 20]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 30,#&gt;&gt; &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;,#&gt;&gt; &#x27;Points&#x27;: [90,#&gt;&gt; 10]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 40,#&gt;&gt; &#x27;Name&#x27;: &#x27;Honda&#x27;,#&gt;&gt; &#x27;Points&#x27;: [70,#&gt;&gt; 30]&#125;] 尚、大きな値でwidthを指定すると、pprint関数の結果は、通常のprint関数を使用した場合と同じになります。 Copypprint.pprint(l, width=500)#&gt;&gt; [&#123;&#x27;Age&#x27;: 20, &#x27;Name&#x27;: &#x27;Yamada&#x27;, &#x27;Points&#x27;: [80, 20]&#125;, &#123;&#x27;Age&#x27;: 30, &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Points&#x27;: [90, 10]&#125;, &#123;&#x27;Age&#x27;: 40, &#x27;Name&#x27;: &#x27;Honda&#x27;, &#x27;Points&#x27;: [70, 30]&#125;] ネストされたデータの深さを指定 | depth引数リストまたは辞書にネストされたデータが含まれている場合、pprint関数を使用すると、そのネストされたデータのすべての子要素が画面に出力されます。 ただし、depth引数の値をカスタマイズすることで、各要素の出力される子の最大数（深さ）を指定することもできます。 また、ネストされたデータに過剰な数の子要素が含まれている場合(depthよりデカい場合)これらの子要素は...との省略記号で画面に出力されます。 Copypprint.pprint(l, depth=1)#&gt;&gt; [&#123;...&#125;, &#123;...&#125;, &#123;...&#125;]pprint.pprint(l, depth=2)#&gt;&gt; [&#123;&#x27;Age&#x27;: 20, &#x27;Name&#x27;: &#x27;Yamada&#x27;, &#x27;Points&#x27;: [...]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 30, &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Points&#x27;: [...]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 40, &#x27;Name&#x27;: &#x27;Honda&#x27;, &#x27;Points&#x27;: [...]&#125;] width引数とdepth引数の組み合わせを使用して、画面上の行数を次のように指定することもできます。 Copypprint.pprint(l, depth=2, width=40)#&gt;&gt; [&#123;&#x27;Age&#x27;: 20,#&gt;&gt; &#x27;Name&#x27;: &#x27;Yamada&#x27;,#&gt;&gt; &#x27;Points&#x27;: [...]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 30,#&gt;&gt; &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;,#&gt;&gt; &#x27;Points&#x27;: [...]&#125;,#&gt;&gt; &#123;&#x27;Age&#x27;: 40,#&gt;&gt; &#x27;Name&#x27;: &#x27;Honda&#x27;,#&gt;&gt; &#x27;Points&#x27;: [...]&#125;] 出力行ごとのインデントを指定 | indent引数デフォルトでは、pprint関数を使用するときにインデント幅の１で各行が画面に出力されます。ただし、indent引数でインデント幅を調整するこももできます。 Copypprint.pprint(l)##&gt; [&#123;&#x27;Age&#x27;: 20, &#x27;Name&#x27;: &#x27;Yamada&#x27;, &#x27;Points&#x27;: [80, 20]&#125;,##&gt; &#123;&#x27;Age&#x27;: 30, &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Points&#x27;: [90, 10]&#125;,##&gt; &#123;&#x27;Age&#x27;: 40, &#x27;Name&#x27;: &#x27;Honda&#x27;, &#x27;Points&#x27;: [70, 30]&#125;]pprint.pprint(l, indent=4)##&gt; [ &#123;&#x27;Age&#x27;: 20, &#x27;Name&#x27;: &#x27;Yamada&#x27;, &#x27;Points&#x27;: [80, 20]&#125;,##&gt; &#123;&#x27;Age&#x27;: 30, &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;, &#x27;Points&#x27;: [90, 10]&#125;,##&gt; &#123;&#x27;Age&#x27;: 40, &#x27;Name&#x27;: &#x27;Honda&#x27;, &#x27;Points&#x27;: [70, 30]&#125;] 次のような幅や深さなどの他の引数と一緒に使用することもできます。 Copypprint.pprint(l, indent=4, width=4, depth =2)##&gt;[ &#123; &#x27;Age&#x27;: 20,##&gt; &#x27;Name&#x27;: &#x27;Yamada&#x27;,##&gt; &#x27;Points&#x27;: [ 80,##&gt; 20]&#125;,##&gt; &#123; &#x27;Age&#x27;: 30,##&gt; &#x27;Name&#x27;: &#x27;Kiyoshi&#x27;,##&gt; &#x27;Points&#x27;: [ 90,##&gt; 10]&#125;,##&gt; &#123; &#x27;Age&#x27;: 40,##&gt; &#x27;Name&#x27;: &#x27;Honda&#x27;,##&gt; &#x27;Points&#x27;: [ 70,##&gt; 30]&#125;] 参照: Pythonでのインデント 改行数を最小限に抑える| compact引数Pythonで要素が多すぎるリストを出力するときに、要素の合計文字数が出力された行の長さに合わない場合、Pythonは自動的に行を分割し、次の例のように各要素を画面に出力します。 Copyimport pprintl_long = [list(range(10)), list(range(1000, 1010))]print(l_long)#&gt;&gt; [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009]]pprint.pprint(l_long, width=40)#&gt;&gt;[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],#&gt;&gt; [1000,#&gt;&gt; 1001,#&gt;&gt; 1002,#&gt;&gt; 1003,#&gt;&gt; 1004,#&gt;&gt; 1005,#&gt;&gt; 1006,#&gt;&gt; 1007,#&gt;&gt; 1008,#&gt;&gt; 1009]] Python 3.4以前のバージョンでは、上記の方法が唯一の使用方法であるため、改行の数が多くなりすぎると、ユーザーにとって非常に煩わしい場合があります。 ただし、幸いなことに、Python3.4以降では、引数compactがpprintPython関数に追加されています。 この時点で、上記のように要素が多すぎるリストを出力するとき、compact = Trueとのcompact引数を指定すると、改行数を最小限に抑え、出力の結果も見栄え良くなります。 たとえば、上記のリストは、次のように3回の改行だけで画面に出力出来ます。 Copypprint.pprint(l_long, width=40, compact=True)#&gt;&gt; [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],#&gt;&gt; [1000, 1001, 1002, 1003, 1004, 1005,#&gt;&gt; 1006, 1007, 1008, 1009]] Pythonのpprint関数をExcelファイルの処理へ適用pprint関数は、複雑な構造化オブジェクト、特に2次元リストを処理するときに非常に強力です。 この利点を活かして、Excelファイルに含まれているデータをpprint関数ですっきりに確認することが出来ます。 たとえば、Pythonでのexcelファイルの読み取りに関するチュートリアルでは、ecxelファイル全体を2次元リスト（リストのリスト）の形式で読み取るようにガイドしました。Excelファイルの内容を読み取った後、pprint関数を使用して、結果をきれいに画面に出力できます。 たとえば、次の内容のExcelファイルがあります。 Pythonでpprint関数を適用することにより、上記のExcelファイルの内容を次のように画面にきれいに出力できます。 Copy[[None, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;], [&#x27;one&#x27;, 11, 12, 13], [&#x27;two&#x27;, 21, 22, 23], [&#x27;three&#x27;, 31, 32, 33]] 参照: PythonでExcelファイルを読む まとめ上記 Kiyoshi はPythonのpprintでリストや辞書をスマートに美しく出力する 方法について説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/tags/Nhap-xuat-trong-python/"}]},{"title":"Pythonのprint関数によるデータ出力","slug":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/ham-print-va-cach-xuat-du-lieu-trong-python","date":"2022-11-15T19:22:23.000Z","updated":"2022-11-16T13:58:57.144Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/ham-print-va-cach-xuat-du-lieu-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/ham-print-va-cach-xuat-du-lieu-trong-python/","excerpt":"Pythonの標準入出力のトピックの次のの記事では、標準出力のprint関数によるデータ出力方法について説明します。記事を通じて、Pythonの各バージョンにおける出力関数の使い方やprint関数による画面にデータを出力する方法などを学びましょう。","text":"Pythonの標準入出力のトピックの次のの記事では、標準出力のprint関数によるデータ出力方法について説明します。記事を通じて、Pythonの各バージョンにおける出力関数の使い方やprint関数による画面にデータを出力する方法などを学びましょう。 Python2およびPython3バージョンのPythonには、次のタイプの出力関数があります。 Python2のprintコマンド Python3のprint関数 その中、Python3のprint関数には特に注意を払う必要があります。 次の基本的な方法で、Pythonでprint関数を使用できます。 関数の引数を省略し、Pythonで改行ありの出力 endの引数を指定し、Pythonで改行なしの出力 sep引数を指定し、同じ行に複数データを出力 尚、出力したいデータ型により出力方法が異なります。それぞれのデータ型の出力方法は以下の記事で参照ください。 参照： Pythonで文字列や数値、リスト、タプル、辞書などを出力する方法 Python2とPython3の出力関数の違いPython3では、print関数を使用してデータを画面に出力します。Python2では、printコマンドを使用してデータを画面に出力します。 これらの2つのデータ出力関数は機能が似ており、どちらもプログラムの処理結果を画面に出力するために使用されます。 ただし、それらを使用するための構文が異なることに注意する必要があります。Python3のprint関数では()を使用しますが、Python2のprintコマンドではこのペアの記号を使用しません。 たとえば、Python2のprintコマンドを使用して、次のようにデータを画面に出力します。 Copyprint &#x27;my love&#x27; その反面、Python3のprint関数を使用して画面に出力する場合は、追加で()の記号を使用します。 Copyprint (&#x27;my love&#x27;) 尚、Python3にはprintコマンドがなくて、Python3の人気によりprintコマンドの使用方法を気にする必要はほとんどありません。古いプログラムでもしprintコマンドを見当たった場合、これはPython2で書かれたことを理解してください。 Pythonのprint関数Python3の人気により、この記事を含めてトピック「初心者向けPythonの自習」の知識共有記事では、Python3のprint関数をprint関数として呼び出し、Pythonでのデフォルトの出力関数として扱います。この関数については、以下で詳しく説明します。 Pythonのprint関数とはPythonのprint関数とは、Pythonの標準出力の組み込み関数であり、プログラムの処理結果を画面に出力するための関数です。 Pythonでのprint関数の構文と使用法Pythonのprint関数の一般的な構文には、次のように数のある引数を持っています。 print ( *objects , sep=&#39; &#39;, end=&#39;\\n&#39;, file=sys.stdout, flush=False ) ここで: *objects : 画面に出力するオブジェクト（データ）。記号*とは複数形を意味し、さまざまなオブジェクトを指定して同時に画面に出力することもできます。 sep: 区切り文字列。出力する前に指定されたオブジェクトはsepにより区切られます。デフォルトではスペースになります。 end: 画面に出力される最後の値。デフォルトの値は改行文字\\nです。この引数は、Pythonで改行かどうかを出力方法を決定します。 file=sys.stdout: 出力結果をキャッシュメモリのsys.stdoutに記録するかを指定します。 flush=False: 結果を強制的にキャッシュすることを指定します。デフォルト値はfalseです。これは、結果をキャッシュしないことを意味します。 ただし、実際には、Pythonでprint（）関数を使用する場合は、ほとんどの引数を省略し、次の最も単純な構文を使用します。 print ( *objects ) たとえばobjectsを文字列で指定して、I LOVE PYTHONの文字列を画面に出力します。 Copyprint(&#x27;I LOVE PYTHON&#x27;) データ出力画面： 尚、次のように複数の文字列をカンマで区切って*objectsとして指定すると、それらを同時に画面に出力することもできます。 Copyprint(&#x27;I LOVE PYTHON&#x27;, &#x27;and JavaScript&#x27;) データ出力画面： 注意点として、sep、end、fileおよびflushのすべての引数はキーワード引数です。これらを使う時には必ずキーワードと値をペアで指定しないといけないです。 たとえば、次のようにend引数を使用して、改行なしで出力します。 Copyprint(&quot;Japan &quot;, end=&#x27;&#x27;)print(&quot;and me&quot;)#&gt;&gt; Japan and me キーワードを省略した場合、エラーは発生しませんが、引数はPythonによって画面に出力されるオブジェクトとして扱われ、次のようにその関数を無視します。 Copyprint(&quot;Japan &quot;, &#x27;&#x27;)print(&quot;and me&quot;)#&gt;&gt; Japan #&gt;&gt; and me Pythonで改行あり・なしの出力方法デフォルトでは、print関数は最後の位置で自動的に改行して出力します。例えば： Copyprint(&quot;5人の兄弟&quot;)print(&quot;1つのタンクに&quot;)#&gt;&gt; 5人の兄弟#&gt;&gt; 1つのタンクに ただし、引数endを文字で指定すると、各文字列が改行さずに、指定したsepの値で連結して画面に表示されます。これはPythonで改行なしの出力方法です。 たとえば、引数endを空白文字&#39;&#39;として指定すると、オブジェクトは次のように連結されて出力されます。 Copyprint(&quot;5人の兄弟&quot;, end=&#x27;&#x27;)print(&quot;1つのタンクに&quot;)#&gt;&gt; 5人の兄弟1つのタンクに 同様に、次のように、画面に出力するときにオブジェクトを連結するために他の文字を指定することもできます。 Copyprint(&quot;5人の兄弟&quot;, end=&#x27;_&#x27;)print(&quot;1つのタンクに&quot;)#&gt;&gt; 5人の兄弟_1つのタンクにprint(&quot;5人の兄弟&quot;,end=&#x27;*_*&#x27;)print(&quot;1つのタンクに&quot;)#&gt;&gt; 5人の兄弟*_*1つのタンクに 複数オブジェクトを１行で出力方法オブジェクトをコンマで区切って指定することで、Pythonの画面に複数のオブジェクトを同時に出力できます。また、デフォルトでは、これらのオブジェクトはスペースで接続され、次のように同じ行に出力されます。 Copya = 100b = &#x27;red&#x27;print(a, b, &#x27;green&#x27;)#&gt;&gt; 100 red green ただし、sep引数を使うことで、連結用の文字を次のように変更することもできます。 Copya = 100b = &#x27;red&#x27;print(a, b, &#x27;green&#x27;, sep = &quot;***&quot;)#&gt;&gt; 100***red***greenprint(a, b, &#x27;green&#x27;, sep=&#x27;\\n&#x27;)#&gt;&gt; 100#&gt;&gt; red#&gt;&gt; greenprint(a, b, &#x27;green&#x27;, sep=&#x27;abc&#x27;)#&gt;&gt; 00abcredabcgreen 最後に、Pythonのデータ型ごとに、データを出力する方法が異なります。これらについて詳しくは、Pythonで文字列や数値、リスト、タプル、辞書などを出力する方法の記事をご覧ください。 まとめ上記 Kiyoshi はPythonのprint関数によるデータ出力方法について説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/tags/Nhap-xuat-trong-python/"}]},{"title":"Pythonで文字列や数値、リスト、タプル、辞書などを出力","slug":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/in-chuoi-so-list-tuple-va-dictionary-trong-python","date":"2022-11-15T19:11:23.000Z","updated":"2022-11-16T13:58:55.620Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/in-chuoi-so-list-tuple-va-dictionary-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/nhap-xuat-trong-python/in-chuoi-so-list-tuple-va-dictionary-trong-python/","excerpt":"Pythonで文字列や数値、リスト、タプル、辞書などを出力する方法について説明します。この記事を通じて、Pythonの一般的な各データ型の出力方法を学びましょう。","text":"Pythonで文字列や数値、リスト、タプル、辞書などを出力する方法について説明します。この記事を通じて、Pythonの一般的な各データ型の出力方法を学びましょう。 Pythonで文字列を出力Pythonで一つの文字列を出力Pythonのprint関数の引数として文字列を指定すると、文字列は次のように画面に出力されます Copyprint(&quot;Hello Japan&quot;)#&gt;&gt; Hello Japan print関数で文字列を直接指定することに加えて、次のようにその文字列を変数に割り当て、その変数をprint関数に渡すこともできます。 Copymy_str = &quot;Hello Japan&quot;print(my_str)#&gt;&gt; Hello Japan Pythonで複数の文字列を出力Pythonで複数の文字列を1行に出力するには、これらの文字列をコンマで区切って指定します。すると、これらの文字列はスペースで連結され、次のように同じ行に出力されます。 Copyprint(&quot;Hello&quot;, &quot;Japan&quot;)#&gt;&gt; Hello Japanprint(&quot;python&quot;, &#x27;JavaScript&#x27;)#&gt;&gt; python JavaScript 同様に、これらの文字列を変数に割り当て、その変数を使用して次のように画面に出力することもできます。 Copymy_str = &quot;Hello&quot;my_str2 = &quot;Japan&quot;print(my_str,my_str2)#&gt;&gt; Hello Japan 尚、スペースを使用する代わり、print関数のsetp引数を使用し、連結用文字を指定することで、各文字列が指定した文字列で連結し、1行に出力することもできます。例えば： Copyprint(&quot;python&quot;, &#x27;JavaScript&#x27;, sep=&#x27;^_^&#x27;)#&gt;&gt; python^_^JavaScriptprint(&quot;python&quot;, &#x27;JavaScript&#x27;, sep=&#x27;\\n&#x27;)#&gt;&gt; python#&gt;&gt; JavaScript Pythonで文字列を右寄せ、中央揃え、左寄せしてから出力Pythonのljust()やrjust()、center()などの文字列配置メソッドと組み合わせることで、Pythonで文字列を右寄せ、中央揃え、左寄せしてから出力することが出来ます。 たとえば、文字列を左寄せにして、次のように画面に出力できます。 Copystr1=&quot;Python学習&quot;print(&quot;[&quot; + str1.ljust(20) + &quot;]&quot;)#&gt;&gt; [Python学習 ] 文字列を中央揃え、画面に出力する方法と同様です。 Copystr1=&quot;Python学習&quot;print(&quot;[&quot; + str1.center(20) + &quot;]&quot;)#&gt;&gt; [ Python学習 ] 参照: Pythonで文字列を左、中央、右に揃える（ljust、center、rjust、zfill） 書式化演算子%を使用して文字列を出力書式化演算子%を使用すると、文字列をカスタマイズして出力することも出来ます。 以下に記述することで、文字列の指定された位置に書式化演算子%を挿入して置換し、画面に出力できます。 string % variable 例えば： Copys = &#x27;しんちゃん&#x27;i = 2print(&#x27;しんちゃん は %d さいです。&#x27; % i)#&gt;&gt; しんちゃん は 2 さいです。print(&#x27;%s は %d さいです。&#x27; % (s, i))#&gt;&gt; しんちゃん は 2 さいです。 注意点としてこの方法を使うときには、（%s文字）や%d（数値）などの書式設定演算子を指定する必要があることに注意してください。 参照: 書式化演算子%を使用してPythonで文字列をフォーマットする Pythonで数値を出力Pythonでの数値の値を出力文字列と同様に、print関数の引数として数値を指定すると、その数値の値が画面に出力されます。例えば： Copy#Pythonで整数を出力print(12345)#&gt;&gt; 12345#Pythonで実数を出力print(12.34)#&gt;&gt; 12.34#変数に割り当て、画面に出力a = 100print(a)#&gt;&gt; 100 ただし、Pythonで実数を出力する場合、その実数のコンマの後の値は、画面に出力される数値の値は丸められる場合があることに注意してください。例えば： Copyprint(1.0000)#&gt;&gt; 1.0print(1.0010)#&gt;&gt; 1.001 print関数で式の値を出力print関数を使用して数値の値を画面に出力することに加えて、print関数で数値を使用して計算式を直接記述し、次のように結果を画面に出力できます。 Copyprint(1 + 2)#&gt;&gt; 3print(3 * 4)#&gt; 12print(5 / 4)#&gt;&gt; 1.25 次のように、print関数で数値を使用して計算式を作成する前に、これらの数値を変数に割り当てることもできます。 Copya = 2b = 3print( a + b)print( a * b)#&gt;&gt; 5#&gt;&gt; 6 Pythonで数値をフォーマットしてから出力print関数をPythonの数値フォーマットメソッドと組み合わせることで、Pythonで文字列をクリエイティブな方法で出力できます。 たとえば、次のように、数字の区切り文字をフォーマットして見やすくし、画面に出力することができます。 Copyprint(&quot;&#123;:,d&#125;&quot;.format(1234567))#&gt;&gt; 1,234,567print(&quot;&#123;:_d&#125;&quot;.format(1234567))#&gt;&gt; 1_234_567 または、次のようにPythonで実数を出力するときに、コンマの後に桁数を指定して数値を丸めることができます。 Copyprint(&quot;&#123;:f&#125;&quot;.format(1.2345))#&gt;&gt;1.234500print(&quot;&#123;:.1f&#125;&quot;.format(1.2345))#&gt;&gt; 1.2 参照: Pythonで文字列をフォーマットする Pythonでリスト、タプル、辞書を出力一つのリスト、タプル、辞書を出力リスト、タプル、辞書型などのイテラブルをprint関数の引数として指定すると、そのイテラブルは次のように画面に直接出力されます。 Copyl = [0, 1, 2]print(l)#&gt;&gt; [0, 1, 2]t = (0, 1, 2)print(t)#&gt;&gt; (0, 1, 2)d = &#123; 1: &#x27;red&#x27;, 2: &#x27;green&#x27; , 3: &#x27;black&#x27;&#125;print(d)#&gt;&gt; &#123;1: &#x27;red&#x27;, 2: &#x27;green&#x27;, 3: &#x27;black&#x27;&#125; リスト、タプル、辞書の要素を分割し、Pythonで画面に出力リスト、タプル、または辞書の前に*を追加し、それをprint関数の引数として指定すると、その中の各要素が解析され、次のように画面に出力されます。 Copyl = [0, 1, 2]print(*l)#&gt;&gt; 0 1 2t = (0, 1, 2)print(*t)#&gt;&gt; 0 1 2d = &#123; 1: &#x27;red&#x27;, 2: &#x27;green&#x27; , 3: &#x27;black&#x27;&#125;print(*d)#&gt;&gt; 0 1 2 デフォルトでは、要素は画面に出力されるときにスペースで区切られます。ただし、引数sepを使用して、次のように区切り文字を指定することもできます。 Copyl = [0, 1, 2]print(*l)#&gt;&gt; 0 1 2print(*l, sep=&#x27;&#x27;)# 012print(*l, sep=&#x27;-&#x27;)# 0-1-2 尚、Pythonの2次元リスト（リスト内のリスト）または複雑な構造の辞書の場合、print関数を使用して画面に出力できますが、出力は非常に混乱します。print関数の代わりに、pprint関数を使用して、リストと辞書をよりスマートな方法で出力しましょう。 参照: Pythonのpprint関数でリストと辞書を美しく出力 まとめ上記 Kiyoshi はPythonで文字列や数値、リスト、タプル、辞書などを出力する方法について説明しました。レッスンの内容をよりよく理解するために、各例文を練習をしてください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Nhập xuất trong python","slug":"Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/tags/Nhap-xuat-trong-python/"}]},{"title":"Pythonを直接実行する4つの方法","slug":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/lam-chu-bon-cach-chay-python-pho-bien","date":"2022-11-15T18:53:22.000Z","updated":"2022-11-16T14:03:05.449Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/lam-chu-bon-cach-chay-python-pho-bien/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/lam-chu-bon-cach-chay-python-pho-bien/","excerpt":"Pythonを実行するため実行環境が必要です。この記事ではPythonのコードの直接実行する4つの方法について説明します。","text":"Pythonを実行するため実行環境が必要です。この記事ではPythonのコードの直接実行する4つの方法について説明します。 Pythonの実行環境の選択Pythonを実行するには、 Pythonコードをインポートして実行できるようにPython環境を作成するソフトウェアが必要です。Pythonプログラミング環境を作成するためのプログラムはたくさんありますが、以下から1つを選択すればと思います。 コマンドプロンプトDOSプラットフォームでPythonコードを直接実行するのに役立つWindows組み込みプログラムです。コンピュータでコマンドプロンプトを起動する方法でコマンドプロンプトを起動する方法を参照できます。 コマンドプロンプトを使用してPythonコードを直接に実行するだけでなく、ファイルに保存されたPythonプログラムを実行することもできます。Pythonプログラムを保存して実行する方法についてはこの記事を参照することができます ただし、コマンドプロンプトでPythonを実行できるようにするには、コンピューターにPythonをインストールし、WindowsのPATH変数にPythonを追加した必要があります。 尚、コマンドプロンプトをWindowsPowerShellに置き換えることもできます。これらのソフトウェアは両方とも、Pythonコードを直接実行するためのDOSプラットフォームを提供します。 Anaconda Prompt Anacondaは、コマンドを入力してPythonコードを直接実行するのに役立つプログラムです。これはAnaconda Pythonをインストールする時に統合されるソフトウェアです。 Anacondaを使用してPythonをインストールした場合は、[スタート]メニューの[プログラム]タブで[Anacondaプロンプト]アイコンを探してこのプログラムを開始するか、Windowsキーを押してから[Anacondaプロンプト]行を入力してプログラムを見つけることができます。次に、アイコンをクリックして起動します。 コマンドプロンプトと同様に、アナコンダプロンプトを使用して、ファイルに保存されたPythonプログラムの実行も出来ます。あなたは記事Pythonプログラムを書く方法、Pythonプログラムを保存して実行する方法を参照することができます。 参照: Pythonプログラムの作成、保存、実行する方法 Jupyter-NoteBookGoogle ChromeやCoccoc、Firefoxなどのブラウザーで直接作業することに慣れている場合は、Jupyter NoteBookを使用できます。これは、Anacondaのインストール時に統合されたブラウザーでPythonコードを直接実行するのに役立つソフトウェアです。 ステートメントと実行結果の両方をログまたはグラフとして保存する機能を備えたJupyterを使用すると、作成中のプログラムを再度開くときに時間を節約できます。 スタートメニューの[プログラム]タブでアイコンを探すと、AnacondaPromptと同様にJupyterを起動できます。 paiza.ioなどWeb上でPythonを実行paiza.ioとはPythonを含めさまざまな言語で記述されたプログラムを実行するオンラインプラットフォームです。コンピューターにPythonをインストールしていない場合は、このWebサイトでオンラインで実行することもお勧めします。 本サイトlaptrinhcanban.comではpaiza.ioを使用してプログラムの説明を行っています。各記事の左側にある&lt;/&gt;へクリックすると「Run Code Online」のウィンドウは表示され、プログラムのオンライン実行ができるので、是非ご利用ください。 Pythonの実行方法Pythonコードを直接実行する記のソフトウェアのいずれかを起動すると、Pythonプログラミング環境が出来上がります。これで、ソフトウェアの画面上にPythonコード行を入力し、Enterを押して実行することで、Pythonコードを直接実行ができます。たとえば、次のコマンドラインを使用してPythonのバージョンを確認できます。 Copypython --version 以下に示すように、Pythonコマンドの入力画面とAnacondaPromptソフトウェアで返される結果を見てみましょう。 CopyPython 3.7.6 対話モードでPythonを実行するPythonには、対話モードと呼ばれるモードがあり、直接入力したコマンドラインをすばやく実行し、プログラムファイルを保存せずに結果をすぐに画面に出力できます。コマンドプロンプトまたはアナコンダプロンプトを開始した後、次のコマンドラインでインタラクティブモードを開始します。 Copypython 対話モードのデータ入力画面が表示されます。次に、変数に値を割り当ててそれを使用して計算し、結果を次のように画面に出力するなど、いくつかの簡単なPythonコードを実行してみましょう。 Copynum = 20price = 500num * price 変数を含む計算結果はすぐに表示されます。 Copy&gt;&gt;&gt; num = 20&gt;&gt;&gt; price = 500&gt;&gt;&gt; num * price10000&gt;&gt;&gt; 参照: Python対話モードの使用方法 ファイルに記述したPythonプログラムを実行sample.pyファイルにPythonコードの行が記述され、保存されています。このファイルでPythonプログラムを実行したいのですが、それでも方法がわかりませんか？ D:¥user¥sample.pyのフォルダの直下にsample.pyファイルがあると仮定します。 D:¥ ├---user ├ ├--- sample.py このファイルに記述されているPythonプログラムを実行するには、コマンドプロンプトまたはアナコンダプロンプトを起動したcd/d &lt;folder_path&gt;の後、次のコマンドで実行するPythonファイルを含むディレクトリに現在のディレクトリを移動する必要があります。 Copycd/d D:¥user 次に、以下のコマンドを使用してsample.pyファイルに記述したPythonプログラムを実行すればと思います。 Copypython sample.py 参照: Pythonプログラムの作成、保存、実行する方法 まとめ上記で、KiyoshiはPythonコードを直接実行する4つの方法を示しています。レッスンの内容をよりよく理解するために、各例文を使って練習してください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Kien-thuc-can-ban-ve-chuong-trinh-python/"}]},{"title":"Pythonプログラムの作成、保存と実行する方法","slug":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/tim-hieu-cach-viet-python","date":"2022-11-15T18:44:50.000Z","updated":"2022-11-16T14:03:05.995Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/tim-hieu-cach-viet-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/tim-hieu-cach-viet-python/","excerpt":"このレッスンでは、Pythonプログラムの作成、保存と実行する方法について説明します。この記事を通じて、Pythonのコードを記述するためのエディタの選択方法やそれらを使用してPythonプログラムの作成、ファイルにPythonプログラムの保存、そしてファイルに記述したプログラムの実行などの一連の流れを学びましょう。","text":"このレッスンでは、Pythonプログラムの作成、保存と実行する方法について説明します。この記事を通じて、Pythonのコードを記述するためのエディタの選択方法やそれらを使用してPythonプログラムの作成、ファイルにPythonプログラムの保存、そしてファイルに記述したプログラムの実行などの一連の流れを学びましょう。 Pythonにオススメのエディタの紹介Pythonプログラムを作成するには、Pythonのコードを記述するためのエディタ（コーディングソフトウェア）を準備する必要があります。 Pythonのコードを書くには、Notepad++やSublime Text、Visual Studio、Sublime Textなどどんな汎用的なエディタでも出来ます。 もしエディタをコンピューターにインストールされていない場合でも、最も単純なエディタであるメモ帳（Windowsで使用可能なテキスト編集ソフトウェア）を使用することもできます。 KiyoshiはNotepadd++といったエディタを使用してPythonコードを作成することが多いため、このWebサイトでは、Notepad ++を使用してPythonコードを作成する方法を説明します。 このソフトウェアはhttps://notepad-plus-plus.orgからダウンロードできます。 尚、Notepad++意外にも次のエディタもオススメです。 Sublime Text : 無料のPython用のエディタ。ダウンロード用サイト： https://www.sublimetext.com/3 Visual Studio - Microsoft : 無料のPython用のエディタ。ダウンロード用サイト：Microsoft visualstudio Pycharm : 有料のPython用のエディタ。ダウンロード用サイト： https://www.jetbrains.com/pycharm-edu/ サクラエディタ: 無料のPython用のエディタ。ダウンロード用サイト：https://sakura-editor.github.io/ Pythonプログラムの書き方Pythonプログラムを書くには、まずはエディタを開いて、Pythonのコードを書いてからファイルを保存します。そしてPythonプログラムの記述されたファイルを拡張子.pyで保存しましょう。保存後、ファイルに記述したプログラムを実行したり、編集したりすることも可能です。 以下、Notepad ++ を使用してPythonプログラムの作成から保存・実行まで説明します。 Python用のエディタを起動し、Pythonプログラムを作成Notepad ++を起動してから、次にプログラムのコードをソフトウェアの画面に直接書き込みましょう。 Copyprint(&quot;お名前は&quot;)yourname = input(&quot;&gt;&gt;&quot;)print(&quot;こんにちは！&quot;,yourname,&quot;さん&quot;) Notepad ++画面は次のようになります。 Notepad ++でプログラミング言語を設定する上記のように、ソースコードを単なる記述するだけでは、使用中の言語はどれか、Notepadd ++は認識されていないです。そのため、色自動調整などNotepad ++の便利機能がこの段階でまだ使えません。 その機能を使うために、使用中のプログラミング言語を設定する必要があります。以下の方法のどちらか使っても構わないので、プログラミング言語を設定しましょう。 方法1: *[Language &gt; P &gt; Python]*をクリックする 方法2: *[Alt + L &gt; P &gt; Python]*のキーの組み合わせを押す すると、フォントの色が自動的に変更され、以下に示すようにコマンドをより簡単に区別できるようにします。 ファイルにPythonプログラムを保存するデフォルトでPythonプログラムは、拡張子.pyのファイルで記述および保存されます。例えば[check_id.py]とか[sample.py]とかですね。 filename.py プログラムをファイル拡張子.pyで保存した後、そのpythonファイルを実行するか、記録されていたプログラムを編集するなとが出来ます。 たとえば、上記で書いたpythonファイルを[sample.py]という名前で保存します。Notepad ++でPythonファイルを保存する方法は以下となります。 -[ファイル]&gt; [すべて保存]をクリックし、[ファイル名]sample.pyと入力します。-[ファイルの種類]ボックスで、ファイル形式をPythonファイル（.py：.pyw）として選択します。-[保存先]ボックスでパスを選択して、ファイルを保存する場所を選択します。この例では、ファイルを[D:\\code\\python\\sample.py]に保存するとします。-最後に[保存]をクリックして、ファイルの保存を終了します。 Pythonの実行方法プログラムをPythonファイルに保存した後、そのファイルに保存されているPythonコードを実行するさまざまな方法があります。通常、次の2つの方法があります。 cmdでpythonを実行するcmdでpythonファイルを実行するには、環境変数PATHにpythonのパスを追加した条件があります。設定がまだ済ませていない方は以下の記事を参照して、環境変数PATHにpythonのパスを追加しましょう。 環境変数PATHを設定する 環境変数PATHにpythonのパスを追加したら、次のようにcmdでPythonファイルを実行できます。 例えば記の準備した[sample.py]をcmdで実行するとします。以下の順番で行いましょう。 DOSまたはPowerShellを起動します。すると、次のようにデフォルトのディレクトリを含むcmd画面が表示されます。 CopyC:¥Users¥Kiyoshi&gt; cd/d folder_pathとのコマンドを実行すると、カレントディレクトリをpythonの格納されたフォルダへ変更します。 CopyC:¥Users¥Kiyoshi&gt;cd/d D:\\code\\pythonD:\\code\\python&gt; python sample.pyとのコマンドでそのPythonファイルを実行します。 Copypython sample.py すると、Pythonファイルが処理され、そこに記述されたPythonプログラムの結果が次の画面のように表示されます。 AnacondaによるPythonファイルの実行方法anacondaプロンプトでPythonファイルを実行する方法は、cmdでPythonファイルを実行する方法と似ています。コマンドを使用して、実行するpythonファイルを含むディレクトリに作業ディレクトリを移動してから、pythonファイルを実行します。違い点は、cmd画面でコマンドを入力する代わりに、Anacondaプロンプトを開始し、この画面でコマンドを直接実行することです。 CopyC:¥Users¥Kiyoshi&gt;cd/d D:\\code\\pythonD:\\code\\python&gt;python sample.py すると、Pythonファイルが処理され、そこに記述されたPythonプログラムの結果が次の画面のように表示されます。 つまり、Pythonファイルを実行するには、次の2つのことを行う必要があります。 cd/d folder_pathコマンドでPythonファイルが格納されたフォルダーに移動します。 python filename.pyコマンドでそのpythonファイルを実行します。 まとめ上記でKiyoshiは、Pythonプログラムの作成、保存と実行する方法について説明しました。レッスンの内容をよりよく理解するために、各例文を使って練習してください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Kien-thuc-can-ban-ve-chuong-trinh-python/"}]},{"title":"Pythonのコメントの書き方","slug":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/chu-thich-trong-python","date":"2022-11-15T18:24:13.000Z","updated":"2022-11-16T14:03:04.178Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/chu-thich-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/chu-thich-trong-python/","excerpt":"Pythonのコメントの書き方について説明します。この記事を通じて１行のコメントの書き方や複数行のコメントの書き方やPythonのコメントアウトの仕方などを学びましょう。","text":"Pythonのコメントの書き方について説明します。この記事を通じて１行のコメントの書き方や複数行のコメントの書き方やPythonのコメントアウトの仕方などを学びましょう。 PythonのコメントとはPythonのコメントとはPythonプログラムの実行時に省略されるコード行であり、プログラムの作成日時、作成者の名前、作成目標、プログラムのサブアイテムの説明などの必要な情報を保存するのに役立ちます。 Pythonのコメントによって保存された必要な情報は、プログラムの保守を容易にするだけでなく、プロジェクトを他の人に移管したり、プロジェクトを多くの人と共有したりするのも簡単になります。 Pythonのコメントの書き方Pythonのコメントは、#を使用します。#の後にコメントの内容を記載します。Pythonのコメントの文法は以下です。 #コメント ここでの コメントとは、#の後に記載されるコメントの内容です。 Pythonのコメントとは「#」から行の終わりまでカウントされます。次の例のように、コードの最初や途中など、または任意の場所にコメントできます。 Copy### 作成日 : 2021-01-08 # 記者 :Kiyoshi##age = 30 # 年齢変数を初期化#年齢を印刷print(age) 注意点としては、例のように一つのコードが複数行で記述されている場合、コードの途中でのコメント挿入が出来ません。 Copynum = 1 + 2 + 3 + 4 \\ #この位置ではコメントできません。5 + 6print (num) SyntaxErrorのエラーは次のように表示されます。 Copy File &quot;Main.py&quot;, line 1 num = 1 + 2 + 3 + 4 \\ #この位置ではコメントできません。. ^SyntaxError: unexpected character after line continuation character Pythonでの改行コードと一つコードの複数行の記述方法については、Pythonでの改行コードの記事を参照してください。 Pythonの複数行のコメントの書き方Pythonで複数行のコメントを記述するには三連引用符を使います。三連引用符とはダブルクオーテーションまたはシングルクオーテーションを３つ続けた記号です。例えば&quot;&quot;&quot;とか、&#39;&#39;&#39;とかがあります。 以下のように複数行の文章を三連引用符で囲むことでコメントになります。 次の構文で書きましょう。 &quot;&quot;&quot;コメントライン１コメントライン２コメントライン３…&quot;&quot;&quot; 若しく &#39;&#39;&#39;コメントライン１コメントライン２コメントライン３…&#39;&#39;&#39; この書き方の本質は、Pythonで複数行の文字列を宣言しただけで、宣言された文字列に処理命令を追加しないことです。 したがって、新しく作成された複数行の文字列は、プログラムの処理結果に影響を与えることなく、情報を格納する効果しかありません。それで一応のコメントとみなされます。 複数行の文字列を宣言する方法については、Pythonで文字列を宣言する記事の詳細を参照してください。 この三連引用符を使用して、次の例のようにPythonの複数行のコメントを書きましょう。 Copy&quot;&quot;&quot;作成日 : 2021-01-08 記者 :Kiyoshi&quot;&quot;&quot;print(&quot;Pythonの複数行のコメントの書き方&quot;) この書き方はGihubのドキュメントやAIプログラミングプログラムでど頻繁に使用されています。 尚、この方法を使用する場合、すべてのコメント行に同じインデントを付ける必要であることに注意してください。1つの行だけにも他の行とは異なると、次の例のようにpythonの複数行コメントのエラーが発生します。 Copyfor i in range(3): print(&quot;Pythonの複数行のコメントの書き方&quot;)&quot;&quot;&quot;作成日 : 2021-01-08 記者 :Kiyoshi&quot;&quot;&quot; print(&quot;line&quot;,i) 上記のfor文の印刷行とコメントのインデントは同じではないため、次のエラーが返されます Copy File &quot;Main.py&quot;, line 8 print(i) ^IndentationError: unexpected indent その理由はprint(&quot;Pythonの複数行のコメントの書き方&quot;)の行のインデントは上下の2つの印刷行のコメント行のインデントと同じではないためです。 次のようにインデントを修正する必要があります。 Copyfor i in range(3): print(&quot;Pythonの複数行のコメントの書き方&quot;) &quot;&quot;&quot; 作成日 : 2021-01-08 記者 :Kiyoshi &quot;&quot;&quot; print(&quot;line&quot;,i) 各行のインデントは同じであるため、forループの結果は次のようにスムーズに実行されます。 CopyPythonの複数行のコメントの書き方line 0Pythonの複数行のコメントの書き方line 1Pythonの複数行のコメントの書き方line 2 Pythonのコメントの適用Pythonでコメントを使用して情報を保存する長すぎるPythonプログラムを作成する必要がある場合、または多くのPythonプログラムを組み合わせたプロジェクトを作成する必要がある場合は、Pythonでコメントを使用して、プログラムの作成日時、作成者の名前、作成などの必要な情報を格納する必要があります。例えば目標やPythonプログラムのサブアイテムの説明などといった情報です。 プログラムがクラッシュし、エラーを修正するためにプログラムのどこかに戻って検討する必要があるが、コマンドラインの意味を覚えていないと非常に困ると思います。コメントを使うことで、そのコードの意味などすぐ分かり、コードの修正がはるかに簡単になります。 特に、多くの人がプログラムの作成に関与している大規模なプロジェクトでは、コメントを付けることで、チームメートがプログラムの各部分をよりよく理解できるようになります。 新しい誰かがプロジェクトに参加したと仮定すると、それを彼らに説明するのにそれほど労力はかかりません。コメントを読んで、自分でいじくりまわしてくださいとい言えばですね。 コメントを使用して処理をスキップ | コマンドラインのコメントアウトPythonでコメントを使用して必要な情報を格納するだけでなく、コメントを使用してPythonプログラムの処理をスキップすることもできます。これはコメントアウトと呼ばれています。 コメントを使用してPythonで処理をスキップする方法は、次の例のようになります。 Copyprint(&quot;おはよう&quot;)print(&quot;お元気？&quot;)print(&quot;またね&quot;) 上記のプログラムを実行すると、次の結果が得られます。 Copyおはようお元気？またね 2番目のコマンドラインを実行したくない場合は、削除できます。ただし、このコマンドラインを一時的に実行したくない場合は、コマンドラインをコメントアウトし、プログラムを処理するときに2行目を無視してください。 Copyprint(&quot;おはよう&quot;)#print(&quot;お元気？&quot;)print(&quot;またね&quot;) 2行目のコマンドラインをコメントアウトにすることで、プログラムの処理時にその行を省略しました。したがって、コマンドライン1と3のみが処理され、返される結果は次のようになります。 Copyおはようまたね Pythonのコメントショートカット使用するPythonのエディタに応じて、以下のような異なるキーボードショートカットがあります。 Notepad ++のコメントショートカット コード行を選択した後、次のキーの組み合わせを使用してNotepad ++でコメントできます。 Ctrl + K: 選択したコード領域をコメントに変換 Ctrl + Q: 選択したコード領域のコメットを解除 Phím tắt comment trong Visual Studio コード行を選択した後、次のキーの組み合わせを使用してVisualStudioでコメントを付けることができます。 Ctrl + K + C: 選択したコード領域をコメントに変換 Ctrl + K + U: 選択したコード領域のコメットを解除 Phím tắt comment trong Sublime text 3 コード行を選択した後、次のキーの組み合わせを使用して、Sublime text3にコメントを付けることができます。 Ctrl + /: 選択したコード領域をコメントに変換 Ctrl + Shift + /: 選択したコード領域のコメットを解除 まとめ上記で、KiyoshiはPythonでコメントを付ける方法を示しました。レッスンの内容をよりよく理解するために、各例文を使って練習してください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Kien-thuc-can-ban-ve-chuong-trinh-python/"}]},{"title":"Pythonでの改行方法","slug":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/xuong-dong-trong-python","date":"2022-11-15T18:17:49.000Z","updated":"2022-11-16T14:03:05.157Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/xuong-dong-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/xuong-dong-trong-python/","excerpt":"Pythonで改行をする方法について説明します。この記事を通じて、文字列の改行やコードの改行などと共に、Pythonのprintで改行あり・改行なしの制御を学べましょう。","text":"Pythonで改行をする方法について説明します。この記事を通じて、文字列の改行やコードの改行などと共に、Pythonのprintで改行あり・改行なしの制御を学べましょう。 Pythonコードの外での改行 基本的に、Pythonのコードは1行で記述され、ENTERキーを押したときに生成される改行文字を使用して終了します。 これは、JavaScriptのような任意で改行できる他の言語とは大きく異なります。 但し、一つのコードが終わった後に、そのコードの外で自由にENTERキーを押して改行を入力することが出来ます。これらのスペースは、プログラムの処理時にも無視されます。 たとえば、次のように任意のpythonコードの外側で任意で改行を入れることが出来ます。 Copystr1 = &quot;Hello&quot;str2 =&quot;, Japan&quot;print (str1 + str2) 上記の例と以下のコードも同じです。 Copystr1 = &quot;Hello&quot;str2 =&quot;, Japan&quot;print (str1 + str2) 結果 CopyHello, Japan Pythonコード途中で改行 Enterキーを押すだけでは、Pythonコードの途中で改行することはできません上で見たように、Pythonのコードは1行で記述され、Enterキーを押したときに作成された改行文字で終了します。したがって、非常に長いコードで、コードの1行を分割し、見やすくするためにコードを複数行に記述したい場合、ENTERキーを押すだけで1行を返すことはできません。 Pythonは、そのコードがENTERキーが押された場所で終了すると見なし、コードの残りの部分を無視して、実行時にコードを失敗させます。たとえば、次のコマンドです。 Copynum = 10 + 20 + 30 + 40 + 50 + 60 + 70 print (num) 例えば40+の位置でコードを改行したいとします。もしENTERキーを押して改行すると、次のようなエラーが発生します。 Copynum = 10 + 20 + 30 + 40 +50 + 60 + 70 print (num) SyntaxErrorのエラーが返されました： Copy File &quot;Main.py&quot;, line 1 num = 10 + 20 + 30 + 40 + ^SyntaxError: invalid syntax したがって、Pythonのコードの途中でENTERキーを押して改行を入力することはできません。 Pythonコードの途中で改行するにはバックスラッシュを使用Pythonコードの途中で改行するには改行したい位置の前にバックスラッシュを挿入しましょう。 書き込み構文は次のようになります。 abc \\xyz ここでのabcと xyz とはPythonコードの分割した各部分です。 バックスラッシュ\\は、Pythonコードの途中で改行して、一つの文を複数行に分割する事をPythonに通知するため、Pythonはこの位置でコードを終了せず、次の行でコードを読み続けます。 上記の失敗した例では、次のように\\を使って書き直しましょう。 Copynum = 10 + 20 + 30 + 40 + \\50 + 60 + 70print (num) 対話モードで試すとすぐ分かると思います。 結果の画面には、\\nの代わりに円の記号が表示されるのですが、それはWindowsでのバックスラッシュの表示し方です。 上記のように、バックスラッシュ記号\\を使うと、長すぎて続行できないスPythonのコードの途中で行を分割するのに役立つことが分かりました。 Pythonのprintで改行あしの出力Pythonでは、print関数を使用して文字を画面に出力します。print関数を使用する方法はたくさんありますが、オプションを指定しない基本的なprint関数の構文は次のとおりです。 print(line) lineは、画面に印刷した文字列です。文字列を直接指定するか、変数に割り当ててその変数の値を出力することができます。 デフォルトでは、オプションなしの基本的なprint関数を使用すると、Pythonのコードを終了した後、画面に表示される結果が自動的に改行して出力されます。 そのため、基本的なprint関数を使用する場合、出力結果が改行されるかどうか心配する必要はありません。 次の具体例を見てみましょう。 Copy# 画面に出力する出力行を直接指定print(&quot;Hello&quot;)print(&quot;Japan&quot;)print(&quot;Hello Japan&quot;)# 変数に文字列を割り当てて画面に出力greeting = &quot;Hello&quot;country= &quot;Japan&quot;print(greeting)print(country)print(greeting + country) 対話モードで試すとす以下のように結果が自動的に改行されます。 Copy&gt;&gt;&gt; print(&quot;Hello&quot;)Hello&gt;&gt;&gt; print(&quot;Japan&quot;)Viet Nam&gt;&gt;&gt; print(&quot;HelloJapan&quot;)Hello Japan&gt;&gt;&gt; greeting = &quot;Hello&quot;&gt;&gt;&gt; country= &quot;Japan&quot;&gt;&gt;&gt; print(greeting)Hello&gt;&gt;&gt; print(greeting)Japan&gt;&gt;&gt; print(greeting + country)Hello Japan Pythonのprintで改行なしの出力前のセクションでは、デフォルトで、オプションなしの基本的なprint関数を使用すると、Pythonのコードを終了した後、画面に表示される結果が自動的に改行して出力することを知っています。 問題は、Pythonのprintで改行なしの出力はどうなるかですね。 これを行う方法は非常に簡単です。次のようprint関数でさらにendの引数を指定してオプションを追加すると、Pythonのprintで改行なしの出力ができるようになります。 print(line, end=&#39;&#39;) 上記のようにprint関数にend=&#39;&#39;の引数を追加すると、次の例のように改行なしで結果が出力されます。 Copy# Pythonのprintで改行なしの出力print(&quot;Hello &quot;, end=&#x27;&#x27;)print(&quot;Japan&quot;) Pythonで改行なしで結果を出力します： CopyHello Japan まとめ上記で、KiyoshiはPythonでの改行方法を示しました。レッスンの内容をよりよく理解するために、各例文を使って練習してください。 Pythonの改行に加えて、Pythonのインデントは、Pythonの学習を開始するときに習得する必要のある基本的な知識でもあります。Pythonのインデントの記事で詳細を調べましょう。 参照: Pythonのインデント.","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Kien-thuc-can-ban-ve-chuong-trinh-python/"}]},{"title":"Pythonにおけるインデント","slug":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/thut-le-trong-python","date":"2022-11-15T18:09:47.000Z","updated":"2022-11-16T14:03:04.853Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/thut-le-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/thut-le-trong-python/","excerpt":"Pythonにおけるインデントの使用方法のチュートリアルです。このレッスンで、インデントを使用して、Pythonのif文やfor文などのブロックを定義する方法を学習しましょう。","text":"Pythonにおけるインデントの使用方法のチュートリアルです。このレッスンで、インデントを使用して、Pythonのif文やfor文などのブロックを定義する方法を学習しましょう。 PythonにおけるインデントとはPythonにおけるインデントとはプログラムの中の各行頭にある空白のことです。if文やfor文などのブロックを定義するためにインデントが使用されます。 Pythonのif文やfor文などには、条件式を設置し、条件式が真のとき、一つ若しくは複数行のコードが実行されます。 そしてそれらのコードのまとめた物をブロックと呼ばれています。Pythonではブロックを定義するためインデントを使用します。 &#123;&#125;記号を使用してブロックを定義する他のプログラミング言語とは異なり、Pythonでのブロックの定義にはインデントしか使用できないため、Pythonでのインデントの役割は非常に重要です。 Pythonで間違ったインデントを使用すると、ブロックが認識されなくなり、Pythonでunexpected indent trong pythonといった予期しないインデントエラーが発生し、プログラムが中断されます。 インデントを使用してPythonでブロックを定義するPythonでは、ifステートメントやforステートメントなど、1つ以上のサブステートメントを含むステートメントは、複合ステートメントと呼ばれます。さらに、whileステートメントとtryステートメント、または関数定義とクラス定義も複合ステートメントです。 複合ステートメントでは、ブロックを使用して、サブステートメントの実行を開始する場所と終了する場所を決定します。そして、インデントを使用して、Pythonでこのブロックを定義します。 if 条件式:&nbsp;&nbsp;&nbsp;&nbsp;ifブロックのステートメント１&nbsp;&nbsp;&nbsp;&nbsp;ifブロックのステートメント２ 同じ位置でインデントされたステートメントは、同じブロックとして扱われます。また、インデントの量が異なる場合は、別々のブロックで考慮されます。 したがって、そのブロック内の残りのステートメントとは異なるインデントを持つステートメントをブロックに書き込むと、予期しないインデントエラーが発生します。 Copyif 条件式: ステートメント１ ステートメント２ ステートメント３ ifステートメントブロックにさらにifステートメントを記述したい場合は、次のようにインデントを深くして記述します。 if 条件式１:&nbsp;&nbsp;&nbsp;&nbsp;if1のステートメント１&nbsp;&nbsp;&nbsp;&nbsp;if1のステートメント２&nbsp;&nbsp;&nbsp;&nbsp;if 条件式２:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if２のステートメント１&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if２のステートメント２&nbsp;&nbsp;&nbsp;&nbsp;if1のステートメント３ たとえば、インデントを使用して、次のifステートメントでブロックを定義します。 Copynum = 10if num &lt; 100: print(num) if (num % 2) == 0: print(&quot;偶数&quot;) t = num - 2 print(&quot;２との割り算&quot;, t) Pythonで予期しないインデントエラー|Unexpected indentエラーUnexpected indentエラーとは誤ったインデントによって引き起こされたエラーであり、構文エラーの形式と見なされます。 たとえば、次のブロックでは、5行目のprintステートメントのインデント位置が同じifブロック内の他のステートメントと異なるため、エラーが発生します。 Copynum = 10if num &lt; 100: print(num) print(num + 1) print(num + 2 ) Unexpected indentが返されます: このエラーが発生した場合は、同じブロック内のステートメントが同じ位置でインデントされているかどうかを確認して修正してください。 たとえば、上記のプログラムのインデント位置を次のように修正します。 Copynum = 10if num &lt; 100: print(num) print(num + 1) print(num + 2 ) その結果、予期しないインデントエラーが修正され、出力が次のように画面に出力されます。 Copy101112 Pythonにおけるインデントの数Pythonではタブまたはスペースを使用してインデントを行いますが、Pythonではインデントの数を制限するルールはありません。たとえば、Pythonでインデントするために2つのスペースまたは4つのスペースを使用できます。言い換えれば、Pythonにはインデントの標準的な概念はありません。 選択するインデントの数について混乱している場合は、次のPythonDoccumentsWebサイトでインデントの詳細を確認してください。 Style Guide for Python Code ただし、通常、プログラマーはPythonでインデントするために4倍のスペースバーを使用するため、彼らを真似して、Pythonでインデントするために4つのスペースバーを使用すると無難ですね。 まとめ上記でKiyoshiは、Pythonにおけるインデントの使用方法について説明しました。レッスンの内容をよりよく理解するために、各例文を使って練習してください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Kien-thuc-can-ban-ve-chuong-trinh-python/"}]},{"title":"Python対話モードの使用方法","slug":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/su-dung-che-do-tuong-tac-trong-python","date":"2022-11-15T18:09:39.000Z","updated":"2022-11-16T14:03:05.738Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/su-dung-che-do-tuong-tac-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/su-dung-che-do-tuong-tac-trong-python/","excerpt":"Python対話モードの使用方法を説明します。記事を読んだ後に、Pythonの対話モードの開始・終了や、対話モード上のPythonコードの実行方法など学習できると思います。","text":"Python対話モードの使用方法を説明します。記事を読んだ後に、Pythonの対話モードの開始・終了や、対話モード上のPythonコードの実行方法など学習できると思います。 Pythonには、対話モードと呼ばれるモードがあり、直接入力したコマンドラインをすばやく実行し、プログラムファイルを保存せずに結果をすぐに画面に出力できます。 Python対話モードの開始Windows環境では、コマンドプロンプト（python環境をインストールしている場合）またはAnacondaプロンプト（Anacondaを使用してpythonをインストールしている場合）を開いて、次のコマンドラインを画面に直接入力してENTERキーを押すと、対話モードを起動します。 Copypython その後、以下の画面が表示され、Pythonで対話モードの使用を開始できます。 この画面で数行のコードを入力し、Pythonを操作してみてください。 Pythonで対話モードを使用した数値の計算例次のコマンドライン画面を入力し、Enterキーを押して実行します。 Copy1+2*3 すぐに、計算結果が返されます。 次に、変数に値を割り当てて、それを使用して計算を実行してみてください。次のコード行を入力してEnterキーを押してください。 Copynum = 20price = 500num * price 変数を含む計算結果はすぐに表示されます。 Pythonで対話モードを使用して文字列を操作する例Pythonで対話モードを使用して文字列を操作するのがどのようなものか見てみましょう。 例１: Pythonで文字列で文字の位置を見つける Copyprint(&quot;Good School&quot;.find(&quot;oo&quot;, 3, 10)) 結果: 例２: Pythonで大文字を小文字に変換する Copyprint(&quot;Good School&quot;.find(&quot;oo&quot;, 3, 10)) 結果 上記のような計算や画面への印刷などの単純な例だけでなく、IF分やループ分など複雑の処理も対話モード上で実行することが出来ます。 Python対話モードの終了Python対話モードの終了にはCtrl + ZとのWindowsのキーの組み合わせを押します。その後、Pythonのイ対話モードは次の画面のように終了します。 Python対話モードのヘルプガイド参照Pythonのヘルプチュートリアルは、Python対話モードで直接表示できます。たとえばWHILE分の使用方法を知りたい場合は、画面にコード行を入力し、次に示すようにEnterキーを押します。 Copyhelp(&#x27;while&#x27;) WHILE分の使い方を英語で表示されます。英語が得意の方には、お得なモードでしょう。ただし、英語が分からない方は心配しなくて良いです。While分も含め、初心者向けのPython学習用の記事は本サイトlaptrinhcanban.comで説明しますので、ここで学べば最善でしょう。 pythonで画面クリアする方法Python対話モードで画面をクリアしたい時には、Pythonの実行画面（Anacond PromptもしくはWindowsのCMD）を閉じるか、もしくは以下のように2行のコードを入力するかです。 pythonで画面クリアする方法（Windows用）Copyimport osret = os.system(&#x27;cls&#x27;) たとえば、Python対話モードの画面が次のようにいっぱいになっています。 画面をクリアするには、上記の2行のコードを入力してEnterキーを押します。 結果として、画面の結果はクリアされ、次のように返されます。 pythonで画面クリアする方法（Mac・Linux用）MacまたはLinuxでのPythonの画面をクリアする方法は、Windowsと似ていますが、代わりに次の2つのコマンドラインを使用する必要があります。 Copyimport osret = os.system(&#x27;clear&#x27;) まとめ上記で、KiyoshiはPython対話モードを使用する方法を示しました。今すぐPythonでインタラクティブモードを開始し、各例文を使って練習してください。 そして、次のレッスンでPythonの知識についてもっと学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Kien-thuc-can-ban-ve-chuong-trinh-python/"}]},{"title":"Pythonファイルで使用する文字コードの設定","slug":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/dat-ma-ky-trong-file-python","date":"2022-11-15T18:05:10.000Z","updated":"2022-11-16T14:03:04.584Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/dat-ma-ky-trong-file-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/kien-thuc-can-ban-ve-chuong-trinh-python/dat-ma-ky-trong-file-python/","excerpt":"現在のPythonバージョンでは、ファイルに記載されるPythonプログラムはUTF-8文字コードをデフォルトの文字コードとして処理します。PythonファイルがUTF-8以外の文字コードで記述されている場合は、プログラム実行時のデコードエラーを回避するために使用された文字コードを次のように指定する必要があります。この記事は、日本語、ヘブライ語、韓国語、中国語など、英語以外の言語を使用するオペレーティングシステムを搭載したコンピューターを使用している方に特に役立ちます。","text":"現在のPythonバージョンでは、ファイルに記載されるPythonプログラムはUTF-8文字コードをデフォルトの文字コードとして処理します。PythonファイルがUTF-8以外の文字コードで記述されている場合は、プログラム実行時のデコードエラーを回避するために使用された文字コードを次のように指定する必要があります。この記事は、日本語、ヘブライ語、韓国語、中国語など、英語以外の言語を使用するオペレーティングシステムを搭載したコンピューターを使用している方に特に役立ちます。 UTF-8文字コードで保存されてPythonファイルの文字コードの設定Pythonは、Pythonプログラムを格納するファイルを、ファイルがUTF-8文字コードで記述されているデフォルトで処理するため、UTF-8文字コードで記述および保存されたPythonファイルでは、Pythonに文字コードを配置する必要はありません。ファイル。たとえば、次のPythonプログラムをUTF-8文字コードで記述して保存します。 Copyprint(&quot;こんにちは&quot;) このpythonファイルに記述されたプログラムを実行しようとすると、次の出力が表示され、pythonがプログラムを正常に処理したことが示されます。 * Pythonファイルでプログラムを作成、保存、および実行する方法については、Pythonプログラムの作成、保存と実行する方法の記事を確認してください。 ご覧のとおり、UTF-8文字コードを使用してファイルにプログラムを記述したため、処理されるデフォルトファイルを含むPythonがUTF-8文字コードで記述されたため、文字のデコードに問題はありませんでした。そして、プログラムは正常に処理されました。 UTF-8文字コード以外で保存されてPythonファイルの文字コードの設定UTF-8文字コード以外で記述および保存されたPythonファイルではプログラムの実行時にこれらの文字コードをデコードできるようにするには、文字コードをpythonファイルに入れる必要があります。 特に日本、土井タイ、韓国、中国など英語以外の使用してオペレーティングシステムを搭載したコンピュータに要注意です。 Pythonプログラムストレージファイルで使用される文字コードを設定するための構文は次のとおりです。 # coding : 文字コード名若しくは# coding = 文字コード名 例えば： # coding: shift_jis 尚Linux環境では、Pythonプログラムファイルの最初の行の最初の行に**#!/usr/bin/env python3**が含まれている場合は、後半の書き方を使用します。 日本語を使用したPythonファイルが次のShift_JIS文字コードで記述されている例を見てみましょう。 Copyprint (&quot;こんにちは&quot;) このpythonファイルを実行しようとすると、ファイルの書き込みに使用された[Shift_JIS]文字コードを配置しないため、pythonはそれをデコードできず、エラーが発生します。 CopySyntaxError: Non-UTF-8 code starting with &#x27;\\x82&#x27; in file sample5-2.py on line 1, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details このエラーを解決するには、このPythonファイルの最初の行に次のコード行を追加して、このPythonプログラムストレージファイルで使用される文字コードを[Shift_JIS]に設定しましょう。 # coding: shift_jis 上記のpythonファイルには次の内容が含まれます。 Copy# coding: shift_jisprint (&quot;こんにちは&quot;) 上記のファイルを保存した後、プログラムを実行しようとします。その結果、プログラムは次のようにスムーズに実行されます。 上記のように、Pythonプログラムを作成してファイルに保存する場合、特別な理由がない限り、UTF-8文字コードを使用します。また、特別な理由でUTF-8以外の文字コードを使用してPythonファイルを作成および保存する場合は、そのファイルで使用される文字コードを設定する必要があります。 Pythonの文字コード 一覧Pythonファイルで使用される文字コードを設定するときに使用される一般的な文字コードの一覧は次のとおりです。 文字コード名 別の呼び方 IANA登録名 ascii 646, us-ascii ASCII cp932 932, ms932, mskanji, ms-kanji CP932 euc_jp eucjp, ujis, u-jis EUC-JIS iso2022_jp csiso2022jp, iso2022jp, iso-2022-jp ISO-2022-JP shift_jis csshiftjis, shiftjis, sjis, s_jis Shift_JIS utf_8 U8, UTF, utf8 UTF-8 まとめ上記では、KiyoshiがPythonプログラムを格納するファイルで使用される文字コードを設定する方法を示しました。 次のレッスンでは、Pythonの知識について詳しく学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Kien-thuc-can-ban-ve-chuong-trinh-python/"}]},{"title":"Ubuntuにanacondaをインストール","slug":"python/nhap-mon-lap-trinh-python/cai-dat-python/cai-dat-anaconda-cho-ubuntu","date":"2022-11-15T17:43:50.000Z","updated":"2022-11-16T14:03:08.781Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/cai-dat-python/cai-dat-anaconda-cho-ubuntu/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/cai-dat-python/cai-dat-anaconda-cho-ubuntu/","excerpt":"Ubuntu用のanacondaをインストールするための手順。このレッスンの後に、ubuntu用のanacondaの最新バージョンをインストールする方法を学習できます。","text":"Ubuntu用のanacondaをインストールするための手順。このレッスンの後に、ubuntu用のanacondaの最新バージョンをインストールする方法を学習できます。 UbuntuにanacondaをインストールUbuntu用のanacondaをダウンロードAnacondaの公式ウェブサイトのhttps://www.anaconda.com のリンクを使用して、ubuntu用のanacondaをダウンロードしてください。 この記事の執筆時点では、ubuntu用のAnacondaの最新バージョンはAnaconda3-2020.11-Linux-x86_64.shです。 メニューの Products &gt; Individual Edition, を選択し、下にスクロールして、次のようにAnaconda Installers セクションを見つけると思います。 ファイルをクリックしてコンピュータにダウンロードし、コンピュータに適したバージョンを選択してください。 Ubuntu用のanacondaをインストールubuntu用のanacondaインストールファイルをダウンロードした後、ターミナルを使用してubuntu用のanacondaのインストールに進みます。ターミナルを起動し、ダウンロードしたanacondaインストールファイルを含むフォルダーに移動します。デフォルトでは、unbutuにダウンロードされたファイルはDownloadsフォルダーに保存されるため、次のコマンドを使用してこのフォルダーに移動します。 Copycd ~/Downloads ダウンロードしたファイルを含むフォルダは、お使いのコンピュータによって異なる場合があることに注意してください。 htmlを使用してコマンド実行 ダウンロードしたファイルを含むフォルダーに移動した後、コマンドを使用してanacondaインストールファイルを実行します。この記事の執筆時点では、ダウンロードされたファイル名はAnaconda3-2020.11-Linux-x86_64.shであるため、runコマンドは次のようになります。 Copyhtml Anaconda3-2020.11-Linux-x86_64.sh プログラムがubuntu用のanacondaのインストールを開始したら、最初にEnterキーを押してAnacondaの利用規約に同意する必要があります。文章が非常に長いため、続行するにはEnterキーを繰り返し押す必要があります。 Anacondaの利用規約を読んだ後、同意するかどうか尋ねられます。入力yesしてEnterキーを押して続行します。 次に、Anacodaをマシンのどこにインストールするかを尋ねられます。特別な理由がない場合は、Enterキーを押し続けて ubuntuのanacondaのインストールを続行します。 最後に、マシンへのanacondaパスを設定するかどうかを尋ねられます。特別な理由がない場合は、yesEnterキーを押して入力し、ubuntuのanacondaのインストールを完了します。 インストールされたanacondaソフトウェアをテストanacondaのバージョン確認Ubuntuにanacondaをインストール後、次のように新しくインストールしたanacondaソフトウェアのテストに進みます。 Copy# anacondaのバージョン確認conda-V # anacondaのinfor確認conda info 結果が問題なく表示される場合はUbuntuにanacondaをインストールすることが成功したことです。 必要なパッケージをアップグレードする### パッケージをアップグレードまず、以下のコマンドを使用してパッケージをアップグレードします。 Copyconda upgrade –all アップグレード中に、確認してy入力し、Enterキーを押して続行するように求められます。 パッケージをアップグレードした後、次のコマンドを使用して古いパッケージを削除します。 Copyconda clean –packages pip アップグレード linux次に、以下のコマンドを使用してpipのアップグレードに進みます。 Copywget https://bootstrap.pypa.io/get-pip.pypython get-pip.pyrm get-pip.py コマンドが正常に実行されると、pipは最新バージョンにアップグレードされます。これを書いている時点では、これはバージョン21.0.1です。 まとめ上記 Kiyoshi は、すでにubuntu用のanacondaをインストールする方法を示しました。 anacondaのインストールが完了したら、次のレッスンでPythonの知識について詳しく学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Cài đặt python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Cai-dat-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Cai-dat-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Cài đặt python","slug":"Cai-dat-python","permalink":"https://laptrinhcanban.com/tags/Cai-dat-python/"}]},{"title":"Anacondaインストール手順（Windows・Mac用）","slug":"python/nhap-mon-lap-trinh-python/cai-dat-python/cai-dat-anaconda-python","date":"2022-11-15T17:42:50.000Z","updated":"2022-11-16T14:03:09.055Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/cai-dat-python/cai-dat-anaconda-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/cai-dat-python/cai-dat-anaconda-python/","excerpt":"anacondaインストール手順（Windows・Mac用）を説明します.この記事を読んだ後、WindowsやMacなどにanacondaインストールする方法を学習できると思います。","text":"anacondaインストール手順（Windows・Mac用）を説明します.この記事を読んだ後、WindowsやMacなどにanacondaインストールする方法を学習できると思います。 anaconda pythonとはanaconda pythonの概念Anacondaは、科学計算および人工知能開発のための無料のPythonプログラミング言語配布プラットフォームです。Anacondaには、Pythonプログラミング環境の管理と展開を容易にすることを目的として、Pythonプログラミング言語に加えて一般的に使用される必要なライブラリとパッケージが含まれています。 通常、Pythonを使用するには、Pythonをインストールした後、プログラムの実行に必要な追加のライブラリとパッケージをインストールする必要があります。たとえば、PythonでAIを開発するには、Tensorflow、matplotlib、OpenCVなどをインストールする必要があります。 ただし、anaconda pythonをインストールすると、pythonだけでなく、一般的に使用されるライブラリやパッケージもそれに応じてインストールされます。 Anaconda python長所と短所Pythonをインストールする方法と比較すると、Anaconda pythonをインストールするとpythonに加えて、標準のpythonパッケージに含まれていない600個の以上の拡張パッケージも同時にインストールされる、という最大の利点があります。Anacondaをインストールすると、Pythonの開発環境が整えます。 その反面、プログラミングの経験があるプログラマーにとって、anaconda pythonをインストールすると、独自のpythonプログラミング環境を作成することが困難になります。 Pythonプログラミングを学日始める方にとって、Anaconda pythonのインストールすることは短所より長所の方が多いでしょう。 Anaconda pythonをインストール(Windows用)Anaconda pythonをダウンロードAnacondaの公式ウェブサイトhttps://www.anaconda.com の元のリンクを使用してanacondapythonをダウンロードしてください。 メニューの Products &gt; Individual Editionを選択し、下にスクロールして、次のようにAnaconda Installersが表示される。 コンピュータのオペレーティングシステムに適したバージョンを選択し、ファイルをクリックしてコンピュータにダウンロードしてください。 Anaconda pythonをインストールこの記事の執筆時点では、Windows用のAnacondaの最新バージョンはAnaconda3-2020.11-Windows-x86_64.exeです。 このファイルをコンピューターにダウンロードした後、anaconda pythonインストールファイルをダブルクリックして、anaconda pythonインストーラーを起動します。 NEXT&gt;*にクリックし、次は *I Agreeにクリック 以下の画面が表示されます。複数のユーザーにanacondapythonをインストールする場合は、 *[All users(requires admin privileges)]にチェックマークを付けます（管理者権限が必要です）。アカウント専用にanacondapythonをインストールする場合は、[Just Me (recommended)]*オプションを押したまま、[次へ&gt; ]ボタンをクリックしてください。 次に、*[Browse]ボタンをクリックしてコンピューターにanaconda pythonをインストールする場所を選択するか、デフォルトのインストールを維持して[NEXT]*ボタンをクリックします。 次の画面で、Windowsの環境変数にanaconda pythonを追加する場合は、*[Add Anaconda3 to PATH enviroment variable]*チェックボックスをオンにします。Windows用のanacondapythonのインストールが完了したら、コンピューターのDOSデスクトップからAnacondapythonを使用できます。 ただし、この選択により、Anacondaを削除して再インストールする必要がある場合にいくつかの問題が発生する可能性もあります。 尚、RegisterAnaconda3をデフォルトのPython3.7としてチェックして、 Visual StudioPyCharmやWingIDEなどのPythonソフトウェアがAnacondaをオペレーティングシステム上のPythonのメインバージョンとして認識するようにすることもできます。 オプションを選択したら、*[Install]*ボタンをクリックして、Windows用のanaconda pythonインストールプロセスを開始します。 最後に[完了]ボタンをクリックして、Windows用のanaconda pythonのインストールを完了します。 Anaconda pythonをインストール(mac)maxos用のanacondaをインストールする方法は、anaconda pythonをインストールする場合と同じです。anaconda公式ウェブサイトhttps://www.anaconda.com/distribution/のダウンロードリンクから、macos用のanacondaのバージョンを選択してください。 次に、maxosに対してanacondaを実行し、Kiyoshiが上記で指示したWindowsと同様のバージョンを確認します。 インストールしたanaconda pythonをテストAnaconda pythonを正常にインストールした後、Anaconda Promptを起動します。タスクバーでプログラムを見つけるか、Window + Fを押して、Anaconda Promptという名前を入力して、プログラムアイコンを検索します。アイコンをクリックして、Anacondaプロンプトを起動します。 次に、以下のコマンドを入力してEnterキーを押し、PythonとAnacondaのバージョンを確認してみてください。 Copypython --versionconda --version pythonとanacondaのバージョン情報が以下のように表示されている場合は、おめでとうございます。anacondapythonが正常にインストールされています。 まとめ上記 Kiyoshi は、WindowsとMacOS用のanacondapythonをインストールする方法を示しました。anaconda pythonのインストールが完了したら、次のレッスンでpythonについて詳しく学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Cài đặt python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Cai-dat-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Cai-dat-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Cài đặt python","slug":"Cai-dat-python","permalink":"https://laptrinhcanban.com/tags/Cai-dat-python/"}]},{"title":"Pythonの環境変数(PATH)設定方法","slug":"python/nhap-mon-lap-trinh-python/cai-dat-python/thiet-lap-moi-truong-trong-python","date":"2022-11-15T17:41:50.000Z","updated":"2022-11-16T14:03:08.571Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/cai-dat-python/thiet-lap-moi-truong-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/cai-dat-python/thiet-lap-moi-truong-trong-python/","excerpt":"Pythonを実行する方法はたくさんあります。そして、最も便利な方法の1つは、cmdでpythonを実行する方法です。cmdはWindowsターミナルであり、正しい名前はWindowsPromptです。","text":"Pythonを実行する方法はたくさんあります。そして、最も便利な方法の1つは、cmdでpythonを実行する方法です。cmdはWindowsターミナルであり、正しい名前はWindowsPromptです。 ただし、cmdでpythonを実行できるようにするには、オペレーティングシステムが認識できるようにマシンにpythonのインストール場所を宣言する必要があります。つまり、オペレーティングシステムの環境変数(PATH)にpythonのインストールされたパスを登録する必要があります。 Pythonのインストール時に[Add_Python to PATH]をチェックするとすぐできますが、インストール後でもPythonのPathを環境変数(PATH)に登録することも可能です。 そのためまずはPythonのインストールした場所の確認を行いましょう。 Pythonインストール場所の確認方法Pythonを直接インストールした場合PATH環境変数にPythonのパスを追加してcmd上でPythonを実行できるため、まずはPythonのインストールされたパスを探します。 Pythonプログラムアイコンのプロパテから、Pythonをインストールした場所を確認できます。古典的な方法でPython単体でインストールした場合、Windowsの検索バーで[Python]を入力して検索するとプログラムのアイコンが表示されます。 次に、アイコンを右クリックし、[Open file location]にクリックしてアイコンを含むフォルダーを開きます。 次に、Pythonアイコンを右クリックして、[プロパティ]タブを選択します。 最後に、[ファイルの場所を開く]ボタンをクリックして、Pythonがインストールされているディレクトリパスを次のように開いて取得します。 Anaconda Pythonをインストールした場合Anaconda Pythonがインストールされている場合、Windows PATH環境変数を設定するには、Pythonのインストール済みパスとAnacondの両方のパスを見つける必要があります。 WindowsのどこにPythonとAnacondaをインストールするかを見つけるのがさらに簡単になりました。Anacond Promptを起動し、次のコマンドを入力して実行するだけで完了です。 Copywhere pythonwhere anaconda すると、インストールしたPythonを含むディレクトリが次のように表示されます。![WindowsでのPythonインストール場所の確認方法]](./find-python-anaconda.png) このフォルダパスをコピーして、以下の手順へ進みましょう。 Pythonの環境変数(PATH)設定方法Pythonを直接インストールした場合Pythonのインストールしたフォルダは[C:\\Program Files\\Python38]と仮定します。 コンピューター上の任意の場所で[python.exeファイル]を実行出来るため、このファイルを含む上記のフォルダーのパスをコンピューターが理解できるように環境変数PATHに宣言します。 以下の手順を順番に進みましょう。 Windowsキーを押して[スタート]メニューを開きます。 「環境変数」と入力し、[システム環境変数の編集結果]をクリックします。 Windows環境変数設定画面が表示されます [Path]を選択し、[編集]ボタンをクリックします [新規]ボタンをクリックし、[python.exe]の格納されたフォルダのパスを入力して、[OK]ボタンをクリックします。 それでPythonの環境変数(PATH)設定が完了します。 Anaconda Pythonをインストールした場合Anaconda PythonのPython環境をインストールする方法は、上記で紹介した方法と同様です。 重要なのは、Pythonのパスを追加するだけでなく、今回は上記で見つけたPythonパスとAnacondaパスの両方をWindowsPATH環境変数に追加する必要があるということです。 Pythonの環境変数(PATH)設定後の確認方法以下の手順で、オペレーティングシステムの環境変数PATHに正しいPythonパスが登録されているかどうかを確認しましょう。 cmd(DOS)を起動します。コンピューターでDOSを起動する方法を参照してください 以下のテストコマンドラインを入力して、インストールしたバージョンを確認しましょう。。V文字は大文字であることに注意してください。 Copypython -V 画面に以下のようなPythonのバージョン情報が表示されている場合は、おめでとうございます。Python環境が正常にインストールされています。 まとめ上記 Kiyoshi はPythonの環境変数(PATH)設定方法と設定後の確認方法を示しました。 次のレッスンでPythonの知識についてもっと学びましょう。 付録：コンピューターでDOSを起動する方法Windows + Rキーの組み合わせを押してから、cmdまたはコマンドプロンプトを入力してEnterキーを押すと、DOSを起動できます。 すると次のように、DOS画面が表示されます。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Cài đặt python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Cai-dat-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Cai-dat-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Cài đặt python","slug":"Cai-dat-python","permalink":"https://laptrinhcanban.com/tags/Cai-dat-python/"}]},{"title":"WindowsにPythonをインストール","slug":"python/nhap-mon-lap-trinh-python/cai-dat-python/cach-cai-dat-python-3.8.2","date":"2022-11-15T17:40:50.000Z","updated":"2022-11-16T12:01:53.040Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/cai-dat-python/cach-cai-dat-python-3.8.2/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/cai-dat-python/cach-cai-dat-python-3.8.2/","excerpt":"ここでは、Pythonの古典的な方法をインストールする方法を学習します。現在（2020年3月5日）のPythonの最新バージョンはPython3.8.2です。","text":"ここでは、Pythonの古典的な方法をインストールする方法を学習します。現在（2020年3月5日）のPythonの最新バージョンはPython3.8.2です。 Pythonをダウンロードするまずは、以下のPython公式ホームページにアクセスしてください。 https://www.python.org/ 次に、メニューカードの「ダウンロード」をクリックします。サブメニューが表示されます。実行しているコンピューターのオペレーティングシステムに一致するPythonのバージョンを選択してください。清はウィンドウを使用しているので、ウィンドウ用のバージョンをダウンロードします。 新しいページが表示され、さまざまなバージョンのPython forWindowsのダウンロードリンクが示されます。最新バージョンを選択してください最新のPython3リリース-Python3.8.2をダウンロードしてください。 この時点で、Python3.8.2を説明するページが表示されます。Webページの一番下までスクロールすると、ダウンロードファイルのリストが表示されます。コンピュータが32ビットである場合にはWindowsのx86のを。お使いのコンピュータは、64ビットWindowsの場合はWindows x86-64のを選択してください。 リンクをクリックすると、Pythonインストールファイルがダウンロードされます。コンピュータに保存してください。次のステップに進みます。 Pythonをインストールするダウンロードしたpython-3.8.2-amd64.exeファイルをダブルクリックします。Pythonのインストール画面が表示されます。 コンピューターの環境変数がPythonをに自動的にインストールするしたい場合、「Add_Python3.8 to PATH」にチェックマークを付けてください。すると、インストールが完了したら、コンピューターのDOS画面からPythonを直接のご使用ができます。もしPythonのデフォルトのインストールを使用したい場合には、「Install Now」にクリックしてください。 さらに、「Customize inslation」セクションでは、不要な機能をスキップするなど、さまざまな設定をカスタマイズできます。 コンピュータに複数のユーザーがいる場合、「Install for all users」にチェックマークを付けてから進めてください。 最後に、「Browse」をクリックしてインストール場所を選択することにより、コンピューター上のPythonのインストール場所を変更できます。「Install」をクリックすると、インストールが続行されます。 まとめ上記 Kiyoshi は、Pythonを従来の方法でインストールする方法を紹介しました。次の記事では、PythoのパスをWindowsの環境変数に追加する必要がある理由を説明します。またインストールする時に「Add_Python3.8 to PATH」にチェックマークを付けない時の環境変数の追加方法なども説明いたします。 手順でAdd_Python3.8をPATHにチェックしてコンピューターがソフトウェアパスを自動的にインストールするのを忘れた場合の対処方法を説明します。Pythonオペレーティングシステムに。 anacondaをインストールした後、次のレッスンで、Pythonプログラムの作成、プログラムの保存と実行方法 およびPythonコードを直接実行する4つの方法学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Cài đặt python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Cai-dat-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Cai-dat-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Cài đặt python","slug":"Cai-dat-python","permalink":"https://laptrinhcanban.com/tags/Cai-dat-python/"}]},{"title":"Pythonを学ぶべきか。Pythonで何ができるか。","slug":"python/nhap-mon-lap-trinh-python/gioi-thieu-python/ban-co-nen-hoc-python","date":"2022-11-15T16:39:50.000Z","updated":"2022-11-16T12:01:14.710Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/gioi-thieu-python/ban-co-nen-hoc-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/gioi-thieu-python/ban-co-nen-hoc-python/","excerpt":"Pythonは習得と理解が容易な単純な文法構造を持つ言語です。Pythonはいくつかの分野で非常に強力であり、もちろん他のプログラミング言語と比較して弱点もあります。Pythonで何ができるのか、何のためにPythonを学ぶかを理解することで、私たちはより良い概観を持ち、Pythonを学ぶかどうかを決定するのに役立ちます。","text":"Pythonは習得と理解が容易な単純な文法構造を持つ言語です。Pythonはいくつかの分野で非常に強力であり、もちろん他のプログラミング言語と比較して弱点もあります。Pythonで何ができるのか、何のためにPythonを学ぶかを理解することで、私たちはより良い概観を持ち、Pythonを学ぶかどうかを決定するのに役立ちます。 参照：Pythonとは何ですか？Pythonプログラミング言語の特徴 何のためにPythonを学ぶか。Pythonには、次の3つの領域に長所があります。これらの3つの領域のいずれかで活動したい方はすぐにPythonを選択することを躊躇しないでください。 コンピューター上で動作するソフトウェアの開発に興味がある方Pythonを使用すると、ハードドライブ上のファイルを検索するだけの簡単なものから、写真の編集、作成済みの写真からのmp4ビデオの作成などの複雑なソフトウェアまで、コンピューター上で実行されるアプリケーションを簡単に作成できます。 Pythonは、Excel、jsonなどのデータファイルから一般的なオーディオファイルや画像ファイルへの迅速な処理をサポートしているため、作業の生産性を向上および強化するソフトウェアを作成する場合 は、Pythonが賢明な選択です。 人工知能、ディープラーニングの開発に興味がある方ディープラーニングは、コンピューターが大量のデータを繰り返し自己分析して構造を自動的に作成し、基本的なパターンを見つけて、それを自分で学習する手法です。これにより、人間が自然に実行する「学習のような機能」をシミュレートできるAIを作成します。 ディープラーニング手法で使用できる言語はたくさんありますが、巨大なデータを処理するという利点があるため、Pythonは現在この分野で使用されている言語のトップにあります。 AI（人工知能）に興味がある場合は、Pythonを学習してください。Pythonはディープラーニングの研究開発に使用される多くのライブラリと統合されているためです。 さらに、単純な文法構造で、これらのライブラリを非常に簡単に呼び出して使用できるため、習得が容易で、学習時間を節約できます。 データ分析に興味がある方現在、ほとんどすべての企業がデータベースを使用しており、保存される情報の量が増えるにつれて、ビッグデータが形成されています。これは、GoogleやFacebookなどの巨大なデータウェアハウスです。 もちろん、大企業でビッグデータを使用する機会に関係なく、中小企業で作業している場合は、顧客情報、商品、製品などのデータベースを使用する必要があります。また、このデータの分析に苦労している場合は、Pythonを選択してください。 Pythonは、典型的なライブラリであるPandasを使用して、CSVファイル情報の読み取りなどのコマンドを実行し、それらを簡単かつ効率的に追加、編集、削除、分析するのに役立ちます。 Pythonを選ばない方が良い人スマートフォンアプリ（iPhone、Android）を作成したい方もちろん、Pythonを使用してモバイルアプリを作成することもできますが、その数がiPhoneのSwiftやAndroidのJava、最近ではKotlinなどと比較すると、Pythonはこの分野で利点がありません。さらに、Pythonを使用してアプリケーションを作成する方法に関する情報は非常に少ないため、この場合に本当にPythonを使用したい場合は、非常に困難で時間がかかります。 アプリケーションやWebサービスを開発したい方Pythonは非常に人気のある言語であるため、開発者はPythonで記述された次の3つのWebフレームワークも作成しました。 Django Flask Bottle 上記のウェブフレームワークが優れた物だと思いますが、日本では、ほとんどのWeb作成プロジェクトがRubyとPHPによって開発されています。したがって、Pythonには可能性がありますが、実際にはWebを作成するための主要言語としてはあまり適用されておらず、主にWebサイトのデータを管理するために使用されています。 組み込みシステム/アプリケーションを開発したい方Pythonは、最も人気のあるオペレーティングシステムで実行できる言語です。また、OSに依存しないため、Pythonを使用して大規模なシステムを開発したり、他のシステムで使用する組み込みアプリケーションを作成したりできます。 ただし、これはインタープリターであるため、Pythonをコンピューターが理解できる言語に翻訳し、タスクの実行は並行して行われるため、システム内のPythonの速度はJavaやC#など他の一般的な言語と比較できません。 まとめこの記事では、Pythonを学ぶべきか。Pythonで何ができるかについて学びました。業界の一部ではPythonはまだその能力を発揮していませんが、Kiyoshiは世界中のプログラマーがPythonを愛することで、Pythonはますます改善され、克服されると信じています。 そして、習得と理解が容易な単純な構造化言語として、Pythonは常にプログラミングの学習を始めようとしている人々にとって最高の選択肢の1つだと思います。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Giới thiệu python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Gioi-thieu-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Gioi-thieu-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Giới thiệu python","slug":"Gioi-thieu-python","permalink":"https://laptrinhcanban.com/tags/Gioi-thieu-python/"}]},{"title":"Zen of Python","slug":"python/nhap-mon-lap-trinh-python/gioi-thieu-python/thien-cua-python-the-zen-of-python","date":"2022-11-15T16:37:58.000Z","updated":"2022-11-16T12:01:22.090Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/gioi-thieu-python/thien-cua-python-the-zen-of-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/gioi-thieu-python/thien-cua-python-the-zen-of-python/","excerpt":"Pythonプログラミング言語を学ぶかどうか疑問を持っているあなたはこの記事を読んだ方が良いと思います。Pythonがいかに「美しい」かが分かると思います。この記事でPythonのZenを学びましょう。Zen of Pytho（Pythonの禅）とはPythonプログラミング言語の設計に大きな影響を与えたコンピュータープログラムを作成するための19の「ガイダンス原則」のセットです。","text":"Pythonプログラミング言語を学ぶかどうか疑問を持っているあなたはこの記事を読んだ方が良いと思います。Pythonがいかに「美しい」かが分かると思います。この記事でPythonのZenを学びましょう。Zen of Pytho（Pythonの禅）とはPythonプログラミング言語の設計に大きな影響を与えたコンピュータープログラムを作成するための19の「ガイダンス原則」のセットです。 Zen of PythonZen of Pythonは、ソフトウェアエンジニアのTim Petersによって書かれた、Pythonプログラミング言語の設計に影響を与えたコンピュータープログラムを作成するための19の「ガイダンス原則」のセットです リストでは、Python言語の原作者であるRossum Guido van Rossumに言及して、「Guidoに記入させる」という20番目のルールが省略されています。第20原則のギャップはまだ埋められていません。 Zen of Pythonの詳細には、wikipediaでご参考ください。 コマンドを使用してPythonコンテンツのZenを印刷する方法興味深いことに、以下のコマンドを使用してZen of python画面に出力できます。 Copyimport this 残念ながら、表示される結果には日本語は含まれず、英語のみが含まれます。ご参考までに、以下の翻訳概要をご覧ください。 CopyThe Zen of Python, by Tim PetersBeautiful is better than ugly.醜いより美しいほうがいい。Explicit is better than implicit.暗示するより明示するほうがいい。Simple is better than complex.複雑であるよりは平易であるほうがいい。Complex is better than complicated.それでも、込み入っているよりは複雑であるほうがまし。Flat is better than nested.ネストは浅いほうがいい。Sparse is better than dense.密集しているよりは隙間があるほうがいい。Readability counts.読みやすいことは善である。Special cases aren&#x27;t special enough to break the rules.特殊であることはルールを破る理由にならない。Although practicality beats purity.しかし、実用性を求めると純粋さが失われることがある。Errors should never pass silently.エラーは隠すな、無視するな。Unless explicitly silenced.ただし、わざと隠されているのなら見逃せ。In the face of ambiguity, refuse the temptation to guess.曖昧なものに出逢ったら、その意味を適当に推測してはいけない。There should be one-- and preferably only one --obvious way to do it.何かいいやり方があるはずだ。誰が見ても明らかな、たったひとつのやり方が。Although that way may not be obvious at first unless you&#x27;re Dutch.そのやり方は一目見ただけではわかりにくいかもしれない。オランダ人にだけわかりやすいなんてこともあるかもしれない。Now is better than never.ずっとやらないでいるよりは、今やれ。Although never is often better than *right* now.でも、今&quot;すぐ&quot;にやるよりはやらないほうがマシなことが多い。If the implementation is hard to explain, it&#x27;s a bad idea.コードの内容を説明するのが難しいのなら、それは悪い実装である。If the implementation is easy to explain, it may be a good idea.コードの内容を容易に説明できるのなら、おそらくそれはよい実装である。Namespaces are one honking great idea -- let&#x27;s do more of those!名前空間は優れたアイデアであるため、積極的に利用すべきである。 これ以上の言葉は必要ありません。Pythonがプログラマーにすぐに愛されるようになった理由をおそらく理解できたしょう。そしてこの記事の執筆時点で、Pythonは世界で最も人気のある言語になっています。Pythonプログラミング言語の詳細については、Pythonとはをご覧ください。 まとめZen of Pythonについて学んだ後、Pythonプログラミング言語の瞑想的な性質である典型的な考えを吸収したかもしれません。Kiyoshiが共有した以前の記事と同様に、Pythonは常に、プログラミングを学ぶために選択すべき最初のプログラミング言語であるはずです。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Giới thiệu python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Gioi-thieu-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Gioi-thieu-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Giới thiệu python","slug":"Gioi-thieu-python","permalink":"https://laptrinhcanban.com/tags/Gioi-thieu-python/"}]},{"title":"PythonでCSVファイルにデータログを残す","slug":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/ghi-log-trong-python","date":"2022-11-15T16:16:04.000Z","updated":"2022-11-16T11:55:57.509Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/ghi-log-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/csv-excel-json-xml-pdf/ghi-log-trong-python/","excerpt":"PythonでCSVファイルにデータログを残す方法の説明。このレッスンの後、PythonでのCSV ファイルの読み込みとと書き込みを組み合わせることで、Pythonのwrite() メソッドを使用してCSVファイルにログを記録する方法を学習します。","text":"PythonでCSVファイルにデータログを残す方法の説明。このレッスンの後、PythonでのCSV ファイルの読み込みとと書き込みを組み合わせることで、Pythonのwrite() メソッドを使用してCSVファイルにログを記録する方法を学習します。 Pythonでログを出力 | write()メソッドファイルを開いたり、閉じたり、書き込んだりするメソッドを使用して、CSV ファイルへの単純な Pythonログ出力関数を作成できます。 Copyimport osimport datetimedef outfilewrite(log_name): #ログ用のフォルダパス作成 log_dir_path=&#x27;./_logfile&#x27; os.makedirs(log_dir_path,exist_ok=True) #年月日取得ログファイル作成 d = datetime.datetime.now() timestr=d.strftime(&#x27;%Y%m%d&#x27;) #ログファイル名 logfile_name= (log_name+&quot;_&quot;+timestr+&#x27;.csv&#x27;) try: #ログファイルを開く outfile=open(os.path.join(log_dir_path,logfile_name),&#x27;a+&#x27;) #ファイルヘッダーcsvをログファイルに書き込む outfile.write(&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\\n&quot;.format(&#x27;No&#x27;,&#x27;Work&#x27;,&#x27;Result&#x27;,&#x27;Detail&#x27;)) except PermissionError : print(&quot;\\n Error : Cant open logfile. Please Try again&quot;) input(&quot;&gt;&gt;&quot;) sys.exit() return outfile 上記の.csvの代わりに.txt拡張子を付けてログファイルを指定することもできます。 ただし、ログ ファイルを読み取るときは、CSV 形式の方がログ ファイルの内容が記録された列を明確に確認できるため、.csv形式を使用することを推奨しています。 尚、上記の関数を作成するときは、次の記事で学んだ知識を使用しました。 os.makedirs : Pythonでディレクトリを作成 datetime.datetime.now() : Python で現在の時刻を取得する strftime():Python で日時を文字列に変換する write(&quot; &quot;.format()):Python で文字列をフォーマット ログ出力関数を使用してロギングする方法たとえば、次の構造のディレクトリがあります。 |data/ |--dir1 |--make_log.py 関数を使用するには、まず関数を実行し、関数の結果をファイル オブジェクトに任意の変数に割り当てます。 Copylogfile=outfilewrite(&quot;new_log&quot;) すると、以下のディレクトリに以下の名前のログファイル(new_log_yyyymmdd.csv)が作成さ_logfileれます。 |data/ |--dir1 |--_logfile | |--new_log_20210518.csv |--make_log.py 次に、Python でログインする必要があるプログラム内の任意の場所で、次のログ タイプを使用して、その変数で write() メソッドを使用します。 任意のコンテンツをログ ファイルの 1 行に記録します。: Copylogfile.write(&quot;log line 1\\n&quot;) ログ ファイルのさまざまな列にコンテンツを記録します。: Copylogfile.write(&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;\\n&quot;.format(&#x27;1&#x27;,&#x27;Creat log file&#x27;,&#x27;Done&#x27;))logfile.write(&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\\n&quot;.format(&#x27;2&#x27;,&#x27;Write log&#x27;,&#x27;Eror&#x27;,&#x27;PermissionError&#x27;)) 結果： 次のように、python で Exceptionを使用して try catch を使用して、python から返されたエラーを取得し、そのエラーをログ ファイルに記録できます。 Copytry: #chạy xử lý log_conttent1 = [&quot;1&quot;,&quot;Creat Log file&quot;,&quot;Done&quot;,&quot;&quot;]except Exception as e: log_conttent1 = [&quot;1&quot;,&quot;Creat Log file&quot;,&quot;Error&quot;,e]log_conttent.append(log_conttent1) その中で、eとは実行時に処理が失敗した場合にPythonが返すエラー内容です。 また、ログファイルに書き込む内容をリストとして保存し、次のようにログファイルに書き込むこともできます。 Copylog_conttent=[]#処理１実行log_conttent1 = [&quot;1&quot;,&quot;Creat Log file&quot;,&quot;Error&quot;,&quot;&quot;]log_conttent.append(log_conttent1)#処理2実行log_conttent2 = [&quot;2&quot;,&quot;write log file&quot;,&quot;Error&quot;,&quot;PermissionError&quot;]log_conttent.append(log_conttent2)#処理3実行log_conttent3 = [&quot;3&quot;,&quot;write log&quot;,&quot;Done&quot;,&quot;&quot;]log_conttent.append(log_conttent3)#...#処理終了後、ログ内容をログファイルに出力for log in log_conttent: logfile.write(&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;\\n&quot;.format(log[0],log[1],log[2],log[3]))logfile.close() 結果： ファイルへのログ記録プロセスが完了したら、logfile.close()を使用してログ ファイルを閉じることを忘れないでください。 まとめ上記 Kiyoshi は、PythonでCSVファイルにデータログを残す方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/tags/CSV-EXCEL-JSON-XML-PDF/"}]},{"title":"Pythonとは。Pythonプログラミング言語の特徴","slug":"python/nhap-mon-lap-trinh-python/gioi-thieu-python/python-la-gi","date":"2022-11-15T16:03:50.000Z","updated":"2022-11-16T12:01:17.915Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/gioi-thieu-python/python-la-gi/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/gioi-thieu-python/python-la-gi/","excerpt":"Pythonは優れたプログラミング言語であり、理解しやすい単純な文法構文を備えていますが、非常に短い行数で多くのタスクを実行できます。Python言語はシンプルで理解しやすく、非常に便利であるため、AI人工知能の開発、ウェブサイトのデザイン、教育、ヘルスケアなど、生活の多くの重要な分野に適用されます。","text":"Pythonは優れたプログラミング言語であり、理解しやすい単純な文法構文を備えていますが、非常に短い行数で多くのタスクを実行できます。Python言語はシンプルで理解しやすく、非常に便利であるため、AI人工知能の開発、ウェブサイトのデザイン、教育、ヘルスケアなど、生活の多くの重要な分野に適用されます。 プログラミングを学び始めようとしている人にとって、Pythonは学習カテゴリーのトップにあるべき言語です。なぜなら、Pythonは学びやすく、理解しやすく、そして仕事と生活の中で正しく適用できるからです。それだけでなく、Pythonはあなたの将来の成長のために多くの機会をもたらせる言語だと思います。 すでに他の言語の経験がある方にとってもPythonはもっと学ぶべきです。その理由は、IT業界の将来のトレンドがAIの開発でありまして、そしてPythonが一番の選択肢であり、情報処理と画像分析に大きな利点があるためです。 さらに、Python言語を取得できれば、Pythonで書かれたWebフレームワークであるDjangoの開発により、 Webデザインの分野でもチャンスを見つけることができます。 Pythonの歴史と起源Pythonは、もともと1991年にGuido van Rossumによって開発され、Amoebaと呼ばれるオペレーティングシステムを管理するためでした。Pythonの利点により、開発後すぐにプログラマーに愛され、現在この記事の執筆時点（2020年3月1日）で、Pythonは世界で最も人気のある言語になりました。 出典： 世界中のプログラミング言語の人気度-Googleの情報に基づく Pythonの特徴Pythonと言えば、次の特徴を思い出すことができます。 無料のプログラミング言語Pythonはオープンソースであるため、誰でも無料で使用できます。Pythonのホームページから簡単にダウンロードしてインストールすることもできるし、Anacondaなどのサードパーティソフトウェアを介してインストールしてすぐに使用することもできます。Pythonのインストール方法については、Pythonのインストールを参照してください。 構文がシンプルで、習得と理解が容易な言語CやJavaのように文の終わりに句読点とコンマを厳密に記載せざるを得ない他の言語と比べると、Pythonはインデントを使用してコマンドを完了するだけで、かなり単純な文法を持っていると言われています。 習得と理解が容易なため、Pythonは初心者が習得すべき言語のリストの一番上にあるべきだと思います。 よく知られているアプリケーションの設計に使用されるPythonによって書かれた以下の3つの有名なアプリケーションがあります。 Instagram Dropbox Youtube Pythonは、データ分析、処理、統計における利点を備えており、上記の3つのアプリケーションのような巨大なデータソース管理システムを必要とするアプリケーションの最初の選択肢となっています。 最も一般的なオペレーティングシステムで実行できるPythonは、次のような今日最も人気のあるオペレーティングシステムを実行できます。 Windows Linux Mac OS iOS Android Pythonはコンピューターで使用されるだけでなく、iOSおよびAndroidプラットフォームで実行されるアプリケーションを作成するためにも使用できます。 人工知能開発において絶対的な優位性を持つPythonは豊富なライブラリと統合されており、このために特別に開発されているため、PythonはAI開発の分野で特に有利です。その中で最も有名なのはTensorflowです。 Pythonの基本について説明した後、Tensorflowを使用してAIを作成する方法をKiyoshiと一緒に調べてみましょう。 自己翻訳プログラミング言語に属し、オブジェクト指向プログラミング言語PerlやJavaと同様に、Pythonはインタプリタプログラミング言語に属し、オブジェクト指向プログラミング言語として使用されます。これらの概念について、次の記事で説明させて頂きます。 参考文献の豊富な情報源があるPythonプログラマーの人気により、マウスを数回クリックするだけでインターネット上でPythonリファレンスを簡単に見つけることができます。Pythonに関する情報は、次のソースから入手できます。 Pythonのホームページ Pythonのドキュメント 有名なプログラマーのブログ さらに、 最も簡単な方法は、このWebサイトで学ぶことです。 laptrinhcanban.comはKiyoshiがプログラミングを学び始めたばかりのあなたのために特別に設計したサイトですから。 まとめこの記事では、Python言語と特殊について学びました。結論として、Pythonと言えば、次のことを覚えておく必要があります。 わかりやすい文法構造のシンプルなプログラミング言語です。 習得が容易で、初心者に適しています。 データ分析、人工知能開発に利点があります。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Giới thiệu python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Gioi-thieu-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Gioi-thieu-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Giới thiệu python","slug":"Gioi-thieu-python","permalink":"https://laptrinhcanban.com/tags/Gioi-thieu-python/"}]},{"title":"Pythonの三項演算子と条件文を短くする方法","slug":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/toan-tu-3-ngoi-trong-python","date":"2021-06-01T16:29:44.000Z","updated":"2022-11-17T04:23:55.380Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/toan-tu-3-ngoi-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/toan-tu-3-ngoi-trong-python/","excerpt":"Python で三項演算子を使用する方法。このレッスンの後、 python の三項演算子の概念、基本的な書き方、および python の if ステートメントでの三項演算子の使用方法を学習します","text":"Python で三項演算子を使用する方法。このレッスンの後、 python の三項演算子の概念、基本的な書き方、および python の if ステートメントでの三項演算子の使用方法を学習します Pythonの三項演算子とはPython の三項演算子は、条件、条件が true の場合の結果、条件が false の場合の結果を含む 3 つの引数で構成される演算子です。ここでの結果は、返される値、または指定された条件が true か false かに応じて後で実行される処理になります。 Python の三項演算子を使用すると、複数の if-else ステートメントを使用する代わりに、1 行のコードで特定の条件をチェックできるため、コードがよりシンプルでスマートになります。 if else 文で三項演算子を使用するPython で三項演算子を if else ステートメントと共に使用するには、次の 2 つの方法があります。 Pythonで三項演算子を使用して条件で値を変換するPython で三項演算子を使用して、次の構文で条件によって値を変換します。 (true_value) if (condition) else (false_value); conditionは条件式、true_valueは条件が true の場合の戻り値、false_valueは条件が false の場合の戻り値です。 たとえば、次のように数値が 10 に等しいかどうかを確認します。 通常の書き方 Copyif n == 10: x = &quot;OK&quot;else : x = &quot;NG&quot; 三項演算子の使い方 Copyx = &quot;OK&quot; if n == 10 else &quot;NG&quot; 別の例として、次のようにPythonで数値が偶数か奇数かを確認します。 通常の書き方 Copyx = 101if x % 2 == 0 : s = &#x27;chẵn&#x27;else: s = &#x27;lẻ&#x27;print(s) # lẻ 三項演算子の使い方 Copyx = 101s = &#x27;chẵn&#x27; if x % 2 == 0 else &#x27;lẻ&#x27;print(s) # lẻ Pythonで三項演算子を使用して条件による処理を変換Python で三項演算子を使用して、次の構文で条件付き処理を変換します。 (true_expression) if (condition) else (false_expression); true_expressionは、condition条件式が true の場合に実行される処理であり、false_expression条件が false の場合に実行される処理です。 例えば、偶数と奇数を求める問題でも、次のように与えられた数が偶数か奇数かを調べ、場合に応じて三項演算子を使ってスクリーン印刷処理を行います。 Copya = 1print(&#x27;chẵn&#x27;) if a % 2 == 0 else print(&#x27;lẻ&#x27;)# lẻ 別の例として、次のように、数値が偶数か奇数かに応じて、指定された数値に異なる数値を掛けます。 通常の書き方 Copya = 1if a % 2 == 0: result = a * 2 else: result = a * 3 print(result) # 3 三項演算子の使い方 Copya = 1result = a * 2 if a % 2 == 0 else a * 3print(result) # 3 尚、次のように if else ステートメントで三項演算子を論理演算子 (and、or) と共に使用できます。 Copya = - 2result = &#x27;負または偶数&#x27; if a &lt; 0 and a % 2 == 0 else &#x27;正または奇数&#x27; print (result) #負または偶数a = 1result = &#x27;負と偶数&#x27; if a &lt; 0 and a % 2 == 0 else &#x27;正と奇数&#x27; print (result) # 正と奇数 Python で論理演算子を使用する方法の詳細については、Python の論理演算子の記事を参照してください。 if elif else文で Python の三項演算子を使用するPython の三項演算子を if elif else 文で使用し、ステートメントを 1 行だけに記述する特別な方法は用意されていませんが、三項演算子のネストを変更して使用することで、これも実現できます。 三項演算子で使用する構文は次のようになります。 A if (condition1) else B if (condition2) else C; 上記の構文は、次のように 2 つの三項演算子に変換されます CopyA if condition1 else ( B if condition2 else C ) 現時点での演算子の優先順位に関して、python は最初に三項演算子から、つまり裏返しに実行します。 先に実行： D =( B if condition2 else C ) 次に実行：A if condition1 else たとえば、次のように、Python の三項演算子を if elif else ステートメントで使用して、数値が正か負かを確認します。 Copya = - 1result = &#x27;negative&#x27; if a &lt; 0 else &#x27;positive&#x27; if a &gt; 0 else &#x27;zero&#x27; print (result) # negativea = 0result = &#x27;negative&#x27; if a &lt; 0 else &#x27;positive&#x27; if a &gt; 0 else &#x27;zero&#x27; print (result) # zeroa = 1result = &#x27;negative&#x27; if a &lt; 0 else &#x27;positive&#x27; if a &gt; 0 else &#x27;zero&#x27; print (result) # positive Python三項演算子とリスト内包表記の組み合わせこれは、プロのプログラマーが AI プログラムでコードを記述するためによく使用する方法であり、Python の三項演算子とリスト内包表記を組み合わせたものです。 三項演算子とリスト内包表記を組み合わせることで、リスト内の要素の値を自由に変更したり、設定した条件に応じて処理を選択したりできます。 例えば： Copyl = [&#x27;even&#x27; if i % 2 == 0 else i for i in range(10)]print(l)# [&#x27;even&#x27;, 1, &#x27;even&#x27;, 3, &#x27;even&#x27;, 5, &#x27;even&#x27;, 7, &#x27;even&#x27;, 9]l = [i * 10 if i % 2 == 0 else i for i in range(10)]print(l)# [0, 1, 20, 3, 40, 5, 60, 7, 80, 9] リスト内包表記の詳細については、Python でリスト内包表記を使用する の記事を参照してください。 まとめ上記 Kiyoshi はpython で三項演算子を使用する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Lệnh điều kiện trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Lệnh điều kiện trong python","slug":"Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/tags/Lenh-dieu-kien-trong-python/"}]},{"title":"Python の論理演算子と True False値","slug":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/toan-tu-logic-trong-python","date":"2021-06-01T13:09:56.000Z","updated":"2022-11-17T04:37:36.340Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/toan-tu-logic-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/toan-tu-logic-trong-python/","excerpt":"Python で論理演算子を使用する方法。このレッスンの後、python の論理演算はpythonの論理演算子によって表されることを学びます。","text":"Python で論理演算子を使用する方法。このレッスンの後、python の論理演算はpythonの論理演算子によって表されることを学びます。 Python pythonの論理演算子表Python で論理演算を実行するには、以下の表にリストされているpython 論理演算子を使用します。 演算子 表現 意味 AND X and Y X と Y の両方が true の場合は true OR X or Y X または Y の少なくとも 1 つが true の場合は true NOT not X X が false の場合は True、X が true の場合は False Pythonの論理演算子は、論理演算子の両側が true か false かをチェックし、それらを組み合わせて結果を出します。Python での論理演算の結果は、 Python では True (真) または False (偽) の 2 つの値を持つブール型になります。 Python の論理 AND 演算子Python では積論理演算子とも呼ばれる論理 AND 演算子は、両側が true の場合は True を返し、一方が false の場合は False を返します。 True&nbsp; and True&nbsp; = TrueTrue&nbsp; and False = FalseFalse and True&nbsp; = FalseFalse and False = False 処理に関しては、Python の論理 AND 演算子は、最初に左側の式 X をチェックします。X が True の場合、Y の値を返します。X が False の場合、X の値を返します。 Python で論理 AND 演算子を使用する具体的な例は次のとおりです。 Copyprint(2 &lt; 10 and 2 &lt; 40)#&gt; Trueprint(2 &lt; 10 and 2 &gt; 40)#&gt; False 次のような変数を使用して、Python で論理 AND 演算子を使用することもできます。 Copynum = 20print((num &gt; 10 and num &lt; 40))#&gt; Trueprint((num &gt; 10 and num &gt; 40))#&gt; False Pythonの論理OR演算子Python では論理和演算子とも呼ばれる論理 OR 演算子は、どちらかの側が true の場合は True を返し、両方の側が false の場合は False を返します。 True&nbsp; or True&nbsp; = TrueTrue&nbsp; or False = TrueFalse or True&nbsp; = TrueFalse or False = False 処理手順については、python の論理 OR 演算子は論理 AND 演算子の逆になります。論理 OR 演算子は、最初に左側の式 X をチェックします。X が True の場合、X の値を返します。X が False の場合、Y の値を返します。 Python で論理 OR 演算子を使用する具体的な例は次のとおりです。 Copyprint(2 &lt; 10 or 2 &lt; 40)#&gt; Trueprint(2 &lt; 10 or 2 &gt; 40)#&gt; Trueprint(2 &gt; 10 or 2 &gt; 40)#&gt; False 次のような変数を使用して、Python で論理 AND 演算子を使用することもできます。 Copynum = 20print((num &gt; 10 or num &lt; 40))#&gt; Trueprint((num &gt; 10 or num &gt; 40))#&gt; Trueprint((num &lt; 10 or num &gt; 40))#&gt; False Pythonの論理NOT演算子Python では論理否定演算子とも呼ばれる論理 NOT 演算子は、どちらかの側が true の場合は True を返し、両方の側が false の場合は False を返します。 not True&nbsp; = Falsenot False = True Python で論理 NOT 演算子を使用する具体的な例は次のとおりです。 Copyprint(not 2 &lt; 40) # = not True#&gt; Falseprint(not 2 &gt; 40) # = not False#&gt; Trueprint(not 2 &gt; 40) # = not False#&gt; True 次のような変数を使用して、Python で論理 NOT 演算子を使用することもできます。 Copynum = 20print(not num &lt; 20)#&gt; Trueprint(not num &gt; 10)#&gt; False Pythonの論理演算子の優先順位Python で複数の論理演算子が式に共存している場合、それらの優先順位は次のとおりです。 not &gt; and &gt; or つまり、not演算子は Python の論理演算子の中で最も優先順位が高くなります。例えば： Copyprint(not True or True and False)# Falseprint(True or True and False)# True 式でこれらの演算子の優先順位を変更するには、次のように()括弧を使用します。 Copyprint((True or True) and False)# False 尚、&lt;や&gt;など比較演算子は Python の論理演算子よりも優先順位が高いため、式でそれらを一緒に記述するときに()括弧を使用する必要はありません。 Copyprint(0 &lt; a and a &lt; 100)# True Python での演算子の優先順位については、Operator precedence in pythonの記事で詳細を確認できます。 Python での論理演算子の適用Python の論理演算子は、if ステートメントやループ内の条件式でよく使用されます。これらのトピックに関する次の記事では、それらについてさらに説明します。 参考までに、Python で演算子を使用する具体的な例をいくつか示します。 if文で論理演算子の使用 Copyold = 17if (old &gt; 15 and old &lt;18): print(&quot;高校生&quot;);elif (old &gt;11 and old &lt;=15): print(&quot;中学生&quot;);else: print(&quot;小学生&quot;);#&gt;&gt;高校生 while文で論理演算子の使用 Copynum = 1while (num &lt; 20): num = num * 3 print(num);#&gt;&gt; 3#&gt;&gt; 9#&gt;&gt; 27 まとめ上記 Kiyoshi は、python で論理演算子を使用する方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Lệnh điều kiện trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Lệnh điều kiện trong python","slug":"Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/tags/Lenh-dieu-kien-trong-python/"}]},{"title":"Python 比較演算子と文字列、数値、およびリストの比較","slug":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/toan-tu-so-sanh-trong-python","date":"2021-05-31T15:10:00.000Z","updated":"2022-11-17T05:26:49.749Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/toan-tu-so-sanh-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/toan-tu-so-sanh-trong-python/","excerpt":"Python で比較演算子を使用する方法。このレッスンの後、Python で比較演算子を使用して表現されたPython 比較を学習し、それらを適用してPython 文字列を比較したり、Python で2 つのリストを比較したり、Pythonで他のデータ型を比較したりします。","text":"Python で比較演算子を使用する方法。このレッスンの後、Python で比較演算子を使用して表現されたPython 比較を学習し、それらを適用してPython 文字列を比較したり、Python で2 つのリストを比較したり、Pythonで他のデータ型を比較したりします。 Pythonの比較演算子表Python で比較を実行するには、以下の表にリストされている比較演算子を使用します。 演算子 条件式 意味 == x == y x と y が等しい != x != y x と y が等しくない &gt; x &gt; y x は y より大きい &lt; x &lt; y x は y より小さい &gt;= x &gt;= y x が y 以上 &lt;= x &lt;= y x が y 以下 in x in y 要素 x が y に存在する not in x not in y 要素 x は y に存在しません Python での比較は、比較演算子と左右の 2 つの値を組み合わせて条件式にし、この条件式が true または false であることを確認して結果を返します。 Python での比較の結果は、True (真) または False (偽) の 2 つの値を持つ Python のブール型になり、Pythonの比較演算子は、if文で使用される条件式を構築するために使用されます。. Pythonで等しいものを比較する2 つの値が等しいかどうかを比較するには==演算子または!=演算子を使用します。 2 つの値が等しい場合、Python の比較演算子==は True を返し、2 つの値が等しくない場合、Python の他の比較演算子!=は True を返します。以下の Python で等値比較を使用した具体的な例をいくつか見てみましょう。 Python で 2 つの数値を比較するPython で等値比較を使用して 2 つの数値を比較する場合、整数と整数、実数と実数を比較できるだけでなく、整数と実数などの異なるデータ型の数値も比較できます。例えば： Copyprint(1 == 1)#&gt; Trueprint(1== 2)#&gt; Falseprint(1 == 1.0)#&gt; Trueprint(1!= 2)#&gt; Trueprint(1 != 1)#&gt; False Python の数値型の詳細については、Python の数値型に関する記事を参照してください。 Python 文字列を比較する等価比較を使用して python 文字列を比較する場合、それらの値が等しいかどうかをチェックします。 Pythonで文字列を比較する場合、大文字と小文字を区別する必要があることに注意してください。例えば： Copyprint(&quot;Hello&quot; == &quot;Hello&quot;)#&gt; Trueprint(&quot;Hello&quot; == &quot;hello&quot;)#&gt; Falseprint(&quot;Hello&quot; == &quot;Hey&quot;)#&gt; Falseprint(&quot;Hello&quot; != &quot;Hello&quot;)#&gt; Falseprint(&quot;Hello&quot; != &quot;hello&quot;)#&gt; True Python で 2 つのリストを比較するPythonで等値比較を使用して 2 つのリストを比較する場合、2 つのリストの要素の値がすべて同じ場合は True が返されます。例えば： Copyprint([&quot;Red&quot;, &quot;Blue&quot;] == [&quot;Red&quot;, &quot;Blue&quot;])#&gt; Trueprint([&quot;Red&quot;, &quot;Blue&quot;] != [&quot;Red&quot;, &quot;Blue&quot;])#&gt; Falseprint([&quot;Red&quot;, &quot;Blue&quot;] == [&quot;Red&quot;, &quot;Blue&quot;, &quot;White&quot;])#&gt; Falseprint([&quot;Red&quot;, &quot;Blue&quot;] != [&quot;Red&quot;, &quot;Blue&quot;, &quot;White&quot;])#&gt; True Python で 2 つのリストを比較する場合、2 つのリスト内の要素の順序に注意する必要があることに注意してください。2 つのリスト内の要素の値が同じでも、2 つのリスト内の順序が異なる場合、2 つのリストは異なると見なされます。 Copyprint([&quot;Red&quot;, &quot;Blue&quot;] == [&quot;Red&quot;, &quot;Blue&quot;])#&gt; Trueprint([&quot;Red&quot;, &quot;Blue&quot;] == [&quot;Blue&quot;, &quot;Red&quot;])#&gt; False リストと同様に、次のように 2 つのタプル間の等価比較も使用します。 Copyprint((&quot;Red&quot;, &quot;Blue&quot;) == (&quot;Red&quot;, &quot;Blue&quot;)#&gt; Trueprint((&quot;Red&quot;, &quot;Blue&quot;) != (&quot;Red&quot;, &quot;Blue&quot;)#&gt; False 参照: Python で 2 つのリストを比較し、同じ要素と異なる要素を取得 Python で文字列と数字を比較し、論理エラーに気付く基本的に、Pythonで文字列と数値を比較することはできません。これら2つのデータ型は完全に異なるからです。 ただし、文字列と数値の間で等号を比較する場合、計算の結果は常に Falseである ため、エラーは発生しないので、キーボードから数字を入力するときには文字列としてPythonは受け取るため、入力した文字列を数字データ型に変更せずにそのまま使ってしまうことが多いです。。 たとえば、input() コマンドを使用してキーボードから数値を入力し、次のように数値と比較します。 Copyprint(&quot;数字を入力してください&quot;)num= input(&quot;&gt;&gt;&quot;)if (num == 1): print(&quot;指定された数値は 1 と等しい&quot;)else: print(&quot;指定された数値は 1 とは異なる&quot;) 結果： Copy&gt;&gt;&gt; 数字を入力してください&gt;&gt;&gt; 1&gt;&gt;&gt; 指定された数値は 1 とは異なる なぜキーボードから数字の 1 を入力したにもかかわらず、if ブロック内のステートメントは常に無視され、else は常に実行され、結果は常に”1 とは異なる”ことがわかりますか。 答えは、キーボードから数値 1 を入力しても、python はキーボードからの入力を文字列型として扱い、文字列と数値の等価比較結果は常Falseになり、結局else文の実行結果は出力されたということです。 Copyprint(&quot;数字を入力してください&quot;)num= input(&quot;&gt;&gt;&quot;)print(type(num))#&gt;&gt; &lt;class &#x27;str&#x27;&gt;print(num == 1)#&gt; False このエラーを回避するには、入力された数字を計算する前に、python int関数またはpythonの float() 関数を使用して数値に変換するように常に注意してください。 Pythonの大小比較Python で大小を比較するには、演算子&lt;、&gt;、&gt;=および&lt;=を使用します。 左側の値が右側の値よりも小さい場合、&lt;演算子は Trueを返し、逆の場合はFalseを返す。 左側の値が右側の値より大きい場合、&gt;演算子は True を返し、逆の場合はFalseを返す。 左側の値が右側の値より大きいか等しい場合、&gt;=演算子は True を返し、逆の場合はFalseを返す。 左側の値が右側の値より小さいか等しい場合、&lt;=演算子は True を返し、逆の場合はFalseを返す。 次の python 比較を使用して、いくつかの具体的な例を見てみましょう。 Python で 2 つの数値を比較するPython で大小比較を使用して 2 つの数値を比較する場合、それらの値が大きいか小さいかを確認します。 Copyprint(5 &gt; 3)#&gt; Trueprint(7 &lt; 3)#&gt; Falseprint(4 &gt;= 4)#&gt; True Python では、小さい比較と大きい比較を使用して 2 つの複素数を比較できないことに注意してください。 Copyprint((5 + 2j) &gt; (3 + 4j)) 次のエラーが発生します。a: CopyTraceback (most recent call last): File &quot;Main.py&quot;, line 1, in &lt;module&gt; print((5 + 2j) &gt; (3 + 4j))TypeError: &#x27;&gt;&#x27; not supported between instances of &#x27;complex&#x27; and &#x27;complex&#x27; Python 文字列を比較するn大小比較を使用して python 文字列を比較する場合、2 つの文字列の値を直接比較する代わりに、それらの Unicode コード ポイントを比較します。文字の Unicode コード ポイントを確認するには、次のように Python で ord() 関数を使用します。 Copyprint(ord(&quot;a&quot;))#&gt; 97print(ord(&quot;b&quot;))#&gt; 98print(ord(&quot;A&quot;))#&gt; 65 2 つの単一文字を大小比較するときは、単純にそれらの Unicode コード ポイントを比較します。たとえば、a文字の Unicode コード ポイントは97であり、 Aの文字のUnicode コード ポイントは65であるため、aとAを比較するとAよりaの方は大きいです。 Copyprint( &quot;a&quot; &gt; &quot;A&quot;)#&gt;True ただし、2 つの文字列を比較する場合、単純に各文字の Unicode コード ポイントを比較することはできません。 この場合、比較処理は2 つの文字列の最初の文字から開始され、最初の異なる文字が現れるまで続きます。 そして各文字列にある最初の現れた異なる文字のUnicodeコード ポイントによる大小比較の結果は、文字列全体の比較結果となります。 例えば： Copyprint( &quot;aAaaaaa&quot; &lt; &quot;aaa&quot;)#&gt;Trueprint( &quot;a&quot; &gt; &quot;Aaaa&quot;)#&gt; True 例１では、2 つの文字列の最初の異なる文字はAとaであるため、２つの文字列の比較結果はAとaの比較結果となります。 例 2 も同様、２つの文字列の比較結果はaとAの比較結果となります。 Python で 2 つのリストを比較するPythonで大小比較を使用して2 つのリストを比較する場合、2 つのリストで異なる値を持つ最初の要素が比較に使用されます。 例えば： Copyprint([&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;] &gt; [&quot;red&quot;, &quot;blue&quot;, &quot;white&quot;])#&gt; False この例では、2 つの文字列で異なる値を持つ最初の要素はgreenとwhiteであるため、これら 2 つの文字列の大小比較の結果によって、それらを含む 2 つのリストの大小比較の結果が決まります。リストと同様に、次のように 2 つのタプル間の小さい比較と大きい比較も使用します。 Copyprint((&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;) &gt; (&quot;red&quot;, &quot;blue&quot;, &quot;white&quot;))#&gt; False 参照 : Python で 2 つのリストを比較し、同じ要素と異なる要素を取得. inとnot in演算子を使用して要素の存在を確認Pythonで要素の存在を確認するには、 in 演算子やnot in 演算子などの比較演算子を使用します。 in 演算子は、チェックする要素が存在する場合に True を返し、逆に、not in 演算子は、チェックする要素が存在しない場合に True を返します。 たとえば、Python で要素の存在チェックを使用して、リスト、タプル、または次のような文字列内の要素の存在をチェックします。 Copyprint( &quot;apple&quot; in [&quot;orange&quot;, &quot;apple&quot;, &quot;lemon&quot;] )#&gt; Trueprint(&quot;grape&quot; in (&quot;orange&quot;, &quot;apple&quot;, &quot;lemon&quot;))#&gt; Falseprint(&quot;a&quot; not in &quot;bcd&quot;)#&gt; Trueprint(&quot;1&quot; in &quot;123&quot;)#&gt; True Python の要素の存在チェックは数学などPythonの多くのデータ型に適用できます。たとえば、指定したキーまたは値が辞書に存在する かどうかをチェックしたり、setで要素を見つけたりすることができます。 Python で異なるデータ型を比較するPython では比較演算子を使って異なるデータ型を比較できる場合がありますが、Python では異なるデータ型を比較できない場合もあります。 たとえば、次のように整数と実数を比較できます。 Copyprint(8 == 8.0)#&gt; Trueprint(14 &lt; 9.5)#&gt; False しかし、整数を文字列と比較すると、TypeError が返されます Copyprint(10 &gt; &quot;1&quot;) エラー内容: CopyTraceback (most recent call last): File &quot;Main.py&quot;, line 1, in &lt;module&gt; print(10 &gt; &quot;1&quot;)TypeError: &#x27;&gt;&#x27; not supported between instances of &#x27;int&#x27; and &#x27;str&#x27; Python で数値と数字を比較する必要がある場合は、Python でint 関数を使用して、数字のデータ型を文字列から数値型に変換してから、次のようにそれらを比較します。 Copyprint( 10 &gt; int(&quot;1&quot;) )#&gt;True まとめ上記 Kiyoshi は、 pythonの比較演算子によって表される python での比較の使用方法について説明しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Lệnh điều kiện trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Lệnh điều kiện trong python","slug":"Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/tags/Lenh-dieu-kien-trong-python/"}]},{"title":"Python でのインデント","slug":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/thut-le-trong-python","date":"2021-05-31T11:09:47.000Z","updated":"2022-11-17T04:02:17.780Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/thut-le-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/thut-le-trong-python/","excerpt":"Python でのインデントの使用方法に関するチュートリアル。このレッスンの後、Python でインデントを使用して、Python の if文 または for文で使用するブロックを定義する方法を学習します。","text":"Python でのインデントの使用方法に関するチュートリアル。このレッスンの後、Python でインデントを使用して、Python の if文 または for文で使用するブロックを定義する方法を学習します。 PythonのインデントとはPythonのインデントとはpython のif文 または for文で使用されるブロックを識別するために使用される処理の先頭のスペースです。 if または for文では、条件式を配置し、条件式が True の場合に複数の処理を実行できます。この時点で、ブロックはこれらのコマンドを配置する場所です。 記号{}を使用してブロックを定義する他のプログラミング言語とは異なり、Python ではインデントを使用してブロックを定義することしかできないため、Python でのインデントの役割は非常に重要です。 Python で間違ったインデントを使用すると、ブロックが認識されなくなり、Python で予期しないインデント エラーが発生してプログラムが中断されます。 インデントを使用して Python でブロックを定義するPython では、if文や for文など、1 つ以上のサブ処理を含む処理を複合処理と呼びます。また、while 文と try 文、または関数定義とクラス定義も複合文です。 複合処理では、ブロックを使用して、サブ処理の実行を開始する場所と終了する場所を決定します。そして、インデントを使用して Python でこのブロックを定義します。 Python if文のブロックの例: if 条件式:&nbsp;&nbsp;&nbsp;&nbsp;ブロック内の実行文１&nbsp;&nbsp;&nbsp;&nbsp;ブロック内の実行文２ 同じ位置にインデントされた処理は、同じブロックとして扱われます。また、インデントの量が異なる場合、それらは別のブロックで考慮されます。 したがって、ブロック内の残りの処理とは異なるインデントを持つ処理をブロックに記述すると、予期しないインデント エラーが発生します。例えば以下のように書くと、エラーが返します。 Copyif 条件式: ブロック内の実行文１ ブロック内の実行文２ ブロック内の実行文３ if 文ブロックにさらに if 文を書きたい場合は、次のようにインデントを深くして書きます。 if 条件式1:&nbsp;&nbsp;&nbsp;&nbsp;if１のブロック内の実行文１&nbsp;&nbsp;&nbsp;&nbsp;if２のブロック内の実行文２&nbsp;&nbsp;&nbsp;&nbsp;if 条件式2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if２のブロック内の実行文１&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if２のブロック内の実行文２&nbsp;&nbsp;&nbsp;&nbsp;if２のブロック内の実行文３ たとえば、インデントを使用して、次の if文でブロックを定義します。 Copynum = 10if num &lt; 100: print(num) if (num % 2) == 0: print(&quot;偶数&quot;) hieu = num - 2 print(&quot;２との引き算：&quot;, hieu) Python での予期しないインデント エラー**Python の予期しないインデント エラー(Unexpected indent)**は、不適切なインデントによって引き起こされるエラーであり、Python の構文エラーの一種と見なされます。たとえば、次のブロックでは、5 行目の print 処理は、同じ if ブロック内の他の処理とは異なるインデント位置を持っているため、エラーが発生します。 Copynum = 10if num &lt; 100: print(num) print(num + 1) print(num + 2 ) Lõi Unexpected indent trả về:予期しないインデント コアは次を返します。 このエラーが発生した場合は、同じブロック内の処理が同じ位置でインデントされていないか確認して修正してください。 たとえば、上記のプログラムのインデント位置を次のように修正します。 Copynum = 10if num &lt; 100: print(num) print(num + 1) print(num + 2 ) その結果、予期しないインデント エラーが修正され、次のように出力が画面に出力されます。: Copy101112 Pythonの標準インデント量Python ではタブやスペースバーを使用してインデントしますが、Python にはインデントの数を制限する規則はありません。たとえば、Python では 2 つのスペースまたは 4 つのスペースを使用してインデントできます。つまり、Python にはインデントの標準的な概念はありません。 選択するインデントの数について混乱している場合は、次の Python ドキュメント Web サイトでインデントの詳細を確認してください。 Python コードのスタイル ガイド ただし、通常、プログラマーは python でスペースバー 4 回を使用してインデントするので、私たちもそれらを学び、python でスペースバー 4 回を使用してインデントする必要があります。 まとめ上記 Kiyoshi は、Python でインデントする方法を案内しています。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Lệnh điều kiện trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Lệnh điều kiện trong python","slug":"Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/tags/Lenh-dieu-kien-trong-python/"}]},{"title":"Pythonのif文と1つ以上の条件分岐","slug":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/cau-lenh-if-trong-python","date":"2021-05-30T16:49:44.000Z","updated":"2022-11-24T14:42:39.189Z","comments":true,"path":"python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/cau-lenh-if-trong-python/","link":"","permalink":"https://laptrinhcanban.com/python/nhap-mon-lap-trinh-python/lenh-dieu-kien-trong-python/cau-lenh-if-trong-python/","excerpt":"Python での if 文の使い方。python のif 文、pythonのif else 、 pythonのelifなど、 python でさまざまなタイプの if 文を使用する方法、およびif 単一条件または複数条件分岐を処理するためにそれらを適用する方法を学びます。","text":"Python での if 文の使い方。python のif 文、pythonのif else 、 pythonのelifなど、 python でさまざまなタイプの if 文を使用する方法、およびif 単一条件または複数条件分岐を処理するためにそれらを適用する方法を学びます。 Python の if 文Python の if 文はifキーワード、条件式、およびそのブロックに記述された処理ブロックで構成されます。ブロックに記述された処理は、指定された条件式がTrueの場合にのみ処理されます。次の構文で Python の if文を使用します。 if 条件式:&nbsp;&nbsp;&nbsp;&nbsp;条件式が真の場合処理する処理 条件式がTrue の場合、ブロックに記述された処理が順番に実行されます。次のように、ブロック内に複数の処理を連続して記述することもできます if 条件式:&nbsp;&nbsp;&nbsp;&nbsp;処理 1&nbsp;&nbsp;&nbsp;&nbsp;処理 2&nbsp;&nbsp;&nbsp;&nbsp;処理 3 Python の条件文のブロック図は次のとおりです。 尚、Python では、ブロックは箇条書きのインデントによって定義されます。ブロック内のすべての記述処理は、同じインデントで記述する必要があります。デフォルトでは、キーボードの Space を 4 回押したときに作成される 4 つの連続したスペース、または Tab キーを 1 回押したときに作成されるタブマークを使用して、インデントを指定します。 インデントの詳細については、Indent in pythonの記事を参照してください。 条件式では、比較演算子と論理演算子を使用して条件を記述します。これらの比較またはロジックの結果が True の場合、新しいブロックに記述されている命令が実行されます。Python の if文の条件式で使用される演算子の種類の詳細については、Pythonの比較演算子と Pythonの論理演算子の記事を参照してください。 ここでは、人の年齢が 18 歳かどうかを確認する簡単な if文を Python で作成してみます。 まず、old変数に割り当てられた値と18を比較して、条件式の結果を確認します。条件式old &lt; 18の結果がTrueの場合のみ、result = &quot;未成人&quot;の処理が実行されます。 Copyold = 17result = &quot;18才以上&quot;if old &lt; 18: result = &quot;未成人&quot;print(result)#&gt; 未成人 上記の例で指定するold = 20と、条件式が真でなくなるため、ブロックに記述されたold &lt;18値を変更するコマンドは実行されません。その結果、resultの元の値は変更されず、次のようにそのまま出力されます。 Copyold = 20result= &quot;18才以上&quot;if old &lt; 18: result = &quot;未成人&quot;print(result)#&gt; 18才以上 Python の if elsePython の if else は、指定した条件式が Falseの場合に使用されます。前のセクションで、Python の if文は、条件式が Trueの場合に if ブロックに記述された処理のみを処理することを学びました。 条件式がFalseのときに実行したい処理が場合は、次の構文で Pythonのif elseを使用します。 if条件式:&nbsp;&nbsp;&nbsp;&nbsp;条件式がTrueの場に実行する処理else:&nbsp;&nbsp;&nbsp;&nbsp;条件式がの場に実行する処理 条件式が False の場合に処理される処理を else ブロックに追加します。これらの処理は、条件式が False の場合にのみ実行されます。 Python の if else文のブロック図は次のとおりです。 あなたが 17 歳で、バーに行きたいとします。次に、バーの年齢条件を確認するコードを次のように記述します。 Copyold = 17if old &lt; 18: print(&quot;未成人, バーに入れない&quot;)else: print(&quot;18歳以上、OK&quot;) 結果： Copy未成人, バーに入れない 上記では、あなたは 17 歳 ( old = 17) であるため、条件式old &lt; 18は Trueになり、if文 ブロック内の処理が実行され、結果敵に、未成人, バーに入れないが画面に出力されます。 old = 20のように年齢を再度指定した場合、条件式はFalseになるため、else ブロック内の処理が実行され、別の結果が次のように画面に出力されます。 Copyold = 20if old &lt; 18: print(&quot;未成人, バーに入れない&quot;)else: print(&quot;18歳以上、OK&quot;)#&gt; 18歳以上、OK Pythonのelif | 複数の条件分岐Python の elif は、Pythonで複数条件の if文を処理するために使用されます。 上記では、Pythonで条件付きの if文を使用しました。Python で複数の条件を持つif文を使用する必要がある場合、次の構文でelif を pythonで使用する必要があります。 if 条件式1:&nbsp;&nbsp;&nbsp;&nbsp;条件式1がTrueの場に実行する処理elif 条件式2:&nbsp;&nbsp;&nbsp;&nbsp;条件式2がTrueの場に実行する処理elif 条件式3:&nbsp;&nbsp;&nbsp;&nbsp;条件式3がTrueの場に実行する処理 … else:&nbsp;&nbsp;&nbsp;&nbsp;すべての条件式がFalseの場合に実行する処理 条件式と、条件式が真の場合に処理される処理を、 if文とelif文の後の対応するブロックに記述します。最後に、 elseブロックにデフォルトの処理を記述します。これらは、指定されたすべての条件式が False の場合に処理されます。 Python の elif文のブロック図は次のとおりです。 Pythoのif elif else文では、条件式は上から下に評価されます。条件式が True の場合、対応するブロック内の処理が実行され、後続の条件式はチェックされず、コード全体が終了します。条件式が Falseの場合は、次の条件式の結果を確認し、最後まで処理を繰り返します。 指定されたすべての条件式が False を返す場合、 elseブロック内のデフォルト 処理が実行されます。 尚、elseブロックを省略することもできます。その場合、プログラムにはデフォルト処理がなく、指定された条件式がすべて False の場合、どの処理も実行されず、どのような結果も返されません。 Pythonでelifを使用する例は次のとおりです。上記のバーで年齢を確認する例も再利用しますが、ID カードを確認する条件も追加します。 Copyold = 17cmnd = &#x27;無し&#x27;if old &lt; 18 and cmnd == &#x27;有り&#x27;: print(&quot;未成人, バーに入れない&quot;)elif old &gt;= 18 and cmnd == &#x27;有り&#x27;: print(&quot;18歳以上、OK&quot;)else: print(&quot;IDカードを提示ください。&quot;) 上記の例では、IDを持っていて 18 歳以上である場合にのみ、python で elif コマンドを実行した結果、バーに入ることができます。 まとめ上記 Kiyoshi は、 python のif文、 pythonのif else、およびpython のelif のような python で if文 タイプを使用する方法を示しました。レッスンの内容をよりよく理解するために、今日の例を書き直す練習をしてください。 そして、次のレッスンで Python の知識についてさらに学びましょう。","categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Lệnh điều kiện trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Lệnh điều kiện trong python","slug":"Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/tags/Lenh-dieu-kien-trong-python/"}]}],"categories":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://laptrinhcanban.com/categories/PYTHON/"},{"name":"Nhập môn lập trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Ham-trong-python/"},{"name":"Số trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/So-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/So-trong-python/"},{"name":"Đóng gói chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Dong-goi-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Dong-goi-chuong-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/CSV-EXCEL-JSON-XML-PDF/"},{"name":"Datetime trong Python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Datetime-trong-Python/"},{"name":"List trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/List-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/List-trong-python/"},{"name":"Biến trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Bien-trong-python/"},{"name":"Nhập xuất trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Nhap-xuat-trong-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Kien-thuc-can-ban-ve-chuong-trinh-python/"},{"name":"Cài đặt python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Cai-dat-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Cai-dat-python/"},{"name":"Giới thiệu python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Gioi-thieu-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Gioi-thieu-python/"},{"name":"Lệnh điều kiện trong python","slug":"PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/categories/PYTHON/Nhap-mon-lap-trinh-python/Lenh-dieu-kien-trong-python/"}],"tags":[{"name":"Nhập môn lập trình python","slug":"Nhap-mon-lap-trinh-python","permalink":"https://laptrinhcanban.com/tags/Nhap-mon-lap-trinh-python/"},{"name":"Hàm trong python","slug":"Ham-trong-python","permalink":"https://laptrinhcanban.com/tags/Ham-trong-python/"},{"name":"Số trong python","slug":"So-trong-python","permalink":"https://laptrinhcanban.com/tags/So-trong-python/"},{"name":"Đóng gói chương trình python","slug":"Dong-goi-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Dong-goi-chuong-trinh-python/"},{"name":"CSV EXCEL JSON XML PDF","slug":"CSV-EXCEL-JSON-XML-PDF","permalink":"https://laptrinhcanban.com/tags/CSV-EXCEL-JSON-XML-PDF/"},{"name":"Datetime trong Python","slug":"Datetime-trong-Python","permalink":"https://laptrinhcanban.com/tags/Datetime-trong-Python/"},{"name":"List trong python","slug":"List-trong-python","permalink":"https://laptrinhcanban.com/tags/List-trong-python/"},{"name":"Biến trong python","slug":"Bien-trong-python","permalink":"https://laptrinhcanban.com/tags/Bien-trong-python/"},{"name":"Nhập xuất trong python","slug":"Nhap-xuat-trong-python","permalink":"https://laptrinhcanban.com/tags/Nhap-xuat-trong-python/"},{"name":"Kiến thức căn bản về chương trình python","slug":"Kien-thuc-can-ban-ve-chuong-trinh-python","permalink":"https://laptrinhcanban.com/tags/Kien-thuc-can-ban-ve-chuong-trinh-python/"},{"name":"Cài đặt python","slug":"Cai-dat-python","permalink":"https://laptrinhcanban.com/tags/Cai-dat-python/"},{"name":"Giới thiệu python","slug":"Gioi-thieu-python","permalink":"https://laptrinhcanban.com/tags/Gioi-thieu-python/"},{"name":"Lệnh điều kiện trong python","slug":"Lenh-dieu-kien-trong-python","permalink":"https://laptrinhcanban.com/tags/Lenh-dieu-kien-trong-python/"}]}